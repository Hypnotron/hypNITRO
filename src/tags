!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/69af98ed/
ABT	arm.hpp	/^            ABT,$/;"	e	enum:Cpu::Mode
ARM7TDMI	arm.hpp	/^    ARM7TDMI,$/;"	e	enum:Core
ARM946E_S	arm.hpp	/^    ARM946E_S,$/;"	e	enum:Core
ARMv4T	arm.hpp	/^            ARMv4T,$/;"	e	enum:Cpu::InstructionSet
ARMv5TE	arm.hpp	/^            ARMv5TE,$/;"	e	enum:Cpu::InstructionSet
AcceptDragDropPayload	interface/imgui.cpp	/^const ImGuiPayload* ImGui::AcceptDragDropPayload(const char* type, ImGuiDragDropFlags flags)$/;"	f	class:ImGui	typeref:typename:const ImGuiPayload *
ActivateItem	interface/imgui.cpp	/^void ImGui::ActivateItem(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
Active	interface/imgui_internal.h	/^    bool                    Active;                             \/\/ Set to true on Begin(), unl/;"	m	struct:ImGuiWindow	typeref:typename:bool
ActiveId	interface/imgui_internal.h	/^    ImGuiID                 ActiveId;                           \/\/ Active widget$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
ActiveIdAllowOverlap	interface/imgui_internal.h	/^    bool                    ActiveIdAllowOverlap;               \/\/ Active widget allows anothe/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdClickOffset	interface/imgui_internal.h	/^    ImVec2                  ActiveIdClickOffset;                \/\/ Clicked offset from upper-l/;"	m	struct:ImGuiContext	typeref:typename:ImVec2
ActiveIdHasBeenEditedBefore	interface/imgui_internal.h	/^    bool                    ActiveIdHasBeenEditedBefore;        \/\/ Was the value associated to/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdHasBeenEditedThisFrame	interface/imgui_internal.h	/^    bool                    ActiveIdHasBeenEditedThisFrame;$/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdHasBeenPressedBefore	interface/imgui_internal.h	/^    bool                    ActiveIdHasBeenPressedBefore;       \/\/ Track whether the active id/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdIsAlive	interface/imgui_internal.h	/^    ImGuiID                 ActiveIdIsAlive;                    \/\/ Active widget has been seen/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
ActiveIdIsJustActivated	interface/imgui_internal.h	/^    bool                    ActiveIdIsJustActivated;            \/\/ Set at the time of activati/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdMouseButton	interface/imgui_internal.h	/^    int                     ActiveIdMouseButton;$/;"	m	struct:ImGuiContext	typeref:typename:int
ActiveIdNoClearOnFocusLoss	interface/imgui_internal.h	/^    bool                    ActiveIdNoClearOnFocusLoss;         \/\/ Disable losing active id if/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdPreviousFrame	interface/imgui_internal.h	/^    ImGuiID                 ActiveIdPreviousFrame;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
ActiveIdPreviousFrameHasBeenEditedBefore	interface/imgui_internal.h	/^    bool                    ActiveIdPreviousFrameHasBeenEditedBefore;$/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdPreviousFrameIsAlive	interface/imgui_internal.h	/^    bool                    ActiveIdPreviousFrameIsAlive;$/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdPreviousFrameWindow	interface/imgui_internal.h	/^    ImGuiWindow*            ActiveIdPreviousFrameWindow;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
ActiveIdSource	interface/imgui_internal.h	/^    ImGuiInputSource        ActiveIdSource;                     \/\/ Activating with mouse or na/;"	m	struct:ImGuiContext	typeref:typename:ImGuiInputSource
ActiveIdTimer	interface/imgui_internal.h	/^    float                   ActiveIdTimer;$/;"	m	struct:ImGuiContext	typeref:typename:float
ActiveIdUsingKeyInputMask	interface/imgui_internal.h	/^    ImU64                   ActiveIdUsingKeyInputMask;          \/\/ Active widget will want to /;"	m	struct:ImGuiContext	typeref:typename:ImU64
ActiveIdUsingNavDirMask	interface/imgui_internal.h	/^    ImU32                   ActiveIdUsingNavDirMask;            \/\/ Active widget will want to /;"	m	struct:ImGuiContext	typeref:typename:ImU32
ActiveIdUsingNavInputMask	interface/imgui_internal.h	/^    ImU32                   ActiveIdUsingNavInputMask;          \/\/ Active widget will want to /;"	m	struct:ImGuiContext	typeref:typename:ImU32
ActiveIdWindow	interface/imgui_internal.h	/^    ImGuiWindow*            ActiveIdWindow;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
Add	interface/imgui_internal.h	/^    T*          Add()                               { int idx = FreeIdx; if (idx == Buf.Size) { /;"	f	struct:ImPool	typeref:typename:T *
Add	interface/imgui_internal.h	/^    void        Add(const ImRect& r)                { if (Min.x > r.Min.x) Min.x = r.Min.x; if (/;"	f	struct:ImRect	typeref:typename:void
Add	interface/imgui_internal.h	/^    void        Add(const ImVec2& p)                { if (Min.x > p.x)     Min.x = p.x;     if (/;"	f	struct:ImRect	typeref:typename:void
AddBezierCurve	interface/imgui_draw.cpp	/^void ImDrawList::AddBezierCurve(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVe/;"	f	class:ImDrawList	typeref:typename:void
AddCallback	interface/imgui_draw.cpp	/^void ImDrawList::AddCallback(ImDrawCallback callback, void* callback_data)$/;"	f	class:ImDrawList	typeref:typename:void
AddChar	interface/imgui.h	/^    inline void     AddChar(ImWchar c)      { SetBit(c); }                      \/\/ Add charact/;"	f	struct:ImFontGlyphRangesBuilder	typeref:typename:void
AddCircle	interface/imgui_draw.cpp	/^void ImDrawList::AddCircle(const ImVec2& center, float radius, ImU32 col, int num_segments, floa/;"	f	class:ImDrawList	typeref:typename:void
AddCircleFilled	interface/imgui_draw.cpp	/^void ImDrawList::AddCircleFilled(const ImVec2& center, float radius, ImU32 col, int num_segments/;"	f	class:ImDrawList	typeref:typename:void
AddContextHook	interface/imgui.cpp	/^void ImGui::AddContextHook(ImGuiContext* ctx, const ImGuiContextHook* hook)$/;"	f	class:ImGui	typeref:typename:void
AddConvexPolyFilled	interface/imgui_draw.cpp	/^void ImDrawList::AddConvexPolyFilled(const ImVec2* points, const int points_count, ImU32 col)$/;"	f	class:ImDrawList	typeref:typename:void
AddCustomRectFontGlyph	interface/imgui_draw.cpp	/^int ImFontAtlas::AddCustomRectFontGlyph(ImFont* font, ImWchar id, int width, int height, float a/;"	f	class:ImFontAtlas	typeref:typename:int
AddCustomRectRegular	interface/imgui_draw.cpp	/^int ImFontAtlas::AddCustomRectRegular(int width, int height)$/;"	f	class:ImFontAtlas	typeref:typename:int
AddDrawCmd	interface/imgui_draw.cpp	/^void ImDrawList::AddDrawCmd()$/;"	f	class:ImDrawList	typeref:typename:void
AddDrawListToDrawData	interface/imgui.cpp	/^static void AddDrawListToDrawData(ImVector<ImDrawList*>* out_list, ImDrawList* draw_list)$/;"	f	typeref:typename:void	file:
AddFont	interface/imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFont(const ImFontConfig* font_cfg)$/;"	f	class:ImFontAtlas	typeref:typename:ImFont *
AddFontDefault	interface/imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFontDefault(const ImFontConfig* font_cfg_template)$/;"	f	class:ImFontAtlas	typeref:typename:ImFont *
AddFontFromFileTTF	interface/imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFontFromFileTTF(const char* filename, float size_pixels, const ImFontCon/;"	f	class:ImFontAtlas	typeref:typename:ImFont *
AddFontFromMemoryCompressedBase85TTF	interface/imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFontFromMemoryCompressedBase85TTF(const char* compressed_ttf_data_base85/;"	f	class:ImFontAtlas	typeref:typename:ImFont *
AddFontFromMemoryCompressedTTF	interface/imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFontFromMemoryCompressedTTF(const void* compressed_ttf_data, int compres/;"	f	class:ImFontAtlas	typeref:typename:ImFont *
AddFontFromMemoryTTF	interface/imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFontFromMemoryTTF(void* ttf_data, int ttf_size, float size_pixels, const/;"	f	class:ImFontAtlas	typeref:typename:ImFont *
AddGlyph	interface/imgui_draw.cpp	/^void ImFont::AddGlyph(const ImFontConfig* cfg, ImWchar codepoint, float x0, float y0, float x1, /;"	f	class:ImFont	typeref:typename:void
AddImage	interface/imgui_draw.cpp	/^void ImDrawList::AddImage(ImTextureID user_texture_id, const ImVec2& p_min, const ImVec2& p_max,/;"	f	class:ImDrawList	typeref:typename:void
AddImageQuad	interface/imgui_draw.cpp	/^void ImDrawList::AddImageQuad(ImTextureID user_texture_id, const ImVec2& p1, const ImVec2& p2, c/;"	f	class:ImDrawList	typeref:typename:void
AddImageRounded	interface/imgui_draw.cpp	/^void ImDrawList::AddImageRounded(ImTextureID user_texture_id, const ImVec2& p_min, const ImVec2&/;"	f	class:ImDrawList	typeref:typename:void
AddInputCharacter	interface/imgui.cpp	/^void ImGuiIO::AddInputCharacter(unsigned int c)$/;"	f	class:ImGuiIO	typeref:typename:void
AddInputCharacterUTF16	interface/imgui.cpp	/^void ImGuiIO::AddInputCharacterUTF16(ImWchar16 c)$/;"	f	class:ImGuiIO	typeref:typename:void
AddInputCharactersUTF8	interface/imgui.cpp	/^void ImGuiIO::AddInputCharactersUTF8(const char* utf8_chars)$/;"	f	class:ImGuiIO	typeref:typename:void
AddLine	interface/imgui_draw.cpp	/^void ImDrawList::AddLine(const ImVec2& p1, const ImVec2& p2, ImU32 col, float thickness)$/;"	f	class:ImDrawList	typeref:typename:void
AddNgon	interface/imgui_draw.cpp	/^void ImDrawList::AddNgon(const ImVec2& center, float radius, ImU32 col, int num_segments, float /;"	f	class:ImDrawList	typeref:typename:void
AddNgonFilled	interface/imgui_draw.cpp	/^void ImDrawList::AddNgonFilled(const ImVec2& center, float radius, ImU32 col, int num_segments)$/;"	f	class:ImDrawList	typeref:typename:void
AddPolyline	interface/imgui_draw.cpp	/^void ImDrawList::AddPolyline(const ImVec2* points, const int points_count, ImU32 col, bool close/;"	f	class:ImDrawList	typeref:typename:void
AddQuad	interface/imgui_draw.cpp	/^void ImDrawList::AddQuad(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec2& p4,/;"	f	class:ImDrawList	typeref:typename:void
AddQuadFilled	interface/imgui_draw.cpp	/^void ImDrawList::AddQuadFilled(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec/;"	f	class:ImDrawList	typeref:typename:void
AddRanges	interface/imgui_draw.cpp	/^void ImFontGlyphRangesBuilder::AddRanges(const ImWchar* ranges)$/;"	f	class:ImFontGlyphRangesBuilder	typeref:typename:void
AddRect	interface/imgui_draw.cpp	/^void ImDrawList::AddRect(const ImVec2& p_min, const ImVec2& p_max, ImU32 col, float rounding, Im/;"	f	class:ImDrawList	typeref:typename:void
AddRectFilled	interface/imgui_draw.cpp	/^void ImDrawList::AddRectFilled(const ImVec2& p_min, const ImVec2& p_max, ImU32 col, float roundi/;"	f	class:ImDrawList	typeref:typename:void
AddRectFilledMultiColor	interface/imgui_draw.cpp	/^void ImDrawList::AddRectFilledMultiColor(const ImVec2& p_min, const ImVec2& p_max, ImU32 col_upr/;"	f	class:ImDrawList	typeref:typename:void
AddRemapChar	interface/imgui_draw.cpp	/^void ImFont::AddRemapChar(ImWchar dst, ImWchar src, bool overwrite_dst)$/;"	f	class:ImFont	typeref:typename:void
AddRootWindowToDrawData	interface/imgui.cpp	/^static void AddRootWindowToDrawData(ImGuiWindow* window)$/;"	f	typeref:typename:void	file:
AddText	interface/imgui_draw.cpp	/^void ImDrawList::AddText(const ImFont* font, float font_size, const ImVec2& pos, ImU32 col, cons/;"	f	class:ImDrawList	typeref:typename:void
AddText	interface/imgui_draw.cpp	/^void ImDrawList::AddText(const ImVec2& pos, ImU32 col, const char* text_begin, const char* text_/;"	f	class:ImDrawList	typeref:typename:void
AddText	interface/imgui_draw.cpp	/^void ImFontGlyphRangesBuilder::AddText(const char* text, const char* text_end)$/;"	f	class:ImFontGlyphRangesBuilder	typeref:typename:void
AddTriangle	interface/imgui_draw.cpp	/^void ImDrawList::AddTriangle(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, ImU32 col, fl/;"	f	class:ImDrawList	typeref:typename:void
AddTriangleFilled	interface/imgui_draw.cpp	/^void ImDrawList::AddTriangleFilled(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, ImU32 c/;"	f	class:ImDrawList	typeref:typename:void
AddWindowToDrawData	interface/imgui.cpp	/^static void AddWindowToDrawData(ImVector<ImDrawList*>* out_render_list, ImGuiWindow* window)$/;"	f	typeref:typename:void	file:
AddWindowToSortBuffer	interface/imgui.cpp	/^static void AddWindowToSortBuffer(ImVector<ImGuiWindow*>* out_sorted_windows, ImGuiWindow* windo/;"	f	typeref:typename:void	file:
AdvanceX	interface/imgui.h	/^    float           AdvanceX;           \/\/ Distance to next character (= data from font + ImFo/;"	m	struct:ImFontGlyph	typeref:typename:float
AlignTextToFramePadding	interface/imgui_widgets.cpp	/^void ImGui::AlignTextToFramePadding()$/;"	f	class:ImGui	typeref:typename:void
Allocator	interface/imgui_impl_vulkan.h	/^    const VkAllocationCallbacks* Allocator;$/;"	m	struct:ImGui_ImplVulkan_InitInfo	typeref:typename:const VkAllocationCallbacks *
Alpha	interface/imgui.h	/^    float       Alpha;                      \/\/ Global alpha applies to everything in Dear ImGu/;"	m	struct:ImGuiStyle	typeref:typename:float
AngleMax12	interface/imgui.cpp	/^    int     AngleMin12, AngleMax12;$/;"	m	struct:ImGuiResizeGripDef	typeref:typename:int	file:
AngleMin12	interface/imgui.cpp	/^    int     AngleMin12, AngleMax12;$/;"	m	struct:ImGuiResizeGripDef	typeref:typename:int	file:
AntiAliasedFill	interface/imgui.h	/^    bool        AntiAliasedFill;            \/\/ Enable anti-aliased edges around filled shapes /;"	m	struct:ImGuiStyle	typeref:typename:bool
AntiAliasedLines	interface/imgui.h	/^    bool        AntiAliasedLines;           \/\/ Enable anti-aliased lines\/borders. Disable if /;"	m	struct:ImGuiStyle	typeref:typename:bool
AntiAliasedLinesUseTex	interface/imgui.h	/^    bool        AntiAliasedLinesUseTex;     \/\/ Enable anti-aliased lines\/borders using textur/;"	m	struct:ImGuiStyle	typeref:typename:bool
Appearing	interface/imgui_internal.h	/^    bool                    Appearing;                          \/\/ Set during the frame where /;"	m	struct:ImGuiWindow	typeref:typename:bool
ApplyAllFn	interface/imgui_internal.h	/^    void        (*ApplyAllFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler);                /;"	m	struct:ImGuiSettingsHandler	typeref:typename:void (*)(ImGuiContext * ctx,ImGuiSettingsHandler * handler)
ApplyWindowSettings	interface/imgui.cpp	/^static void ApplyWindowSettings(ImGuiWindow* window, ImGuiWindowSettings* settings)$/;"	f	typeref:typename:void	file:
ArcFastVtx	interface/imgui_internal.h	/^    ImVec2          ArcFastVtx[12 * IM_DRAWLIST_ARCFAST_TESSELLATION_MULTIPLIER];  \/\/ FIXME: B/;"	m	struct:ImDrawListSharedData	typeref:typename:ImVec2[]
ArrowButton	interface/imgui_widgets.cpp	/^bool ImGui::ArrowButton(const char* str_id, ImGuiDir dir)$/;"	f	class:ImGui	typeref:typename:bool
ArrowButtonEx	interface/imgui_widgets.cpp	/^bool ImGui::ArrowButtonEx(const char* str_id, ImGuiDir dir, ImVec2 size, ImGuiButtonFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
Ascent	interface/imgui.h	/^    float                       Ascent, Descent;    \/\/ 4+4   \/\/ out \/\/            \/\/ Asc/;"	m	struct:ImFont	typeref:typename:float
AutoFitChildAxises	interface/imgui_internal.h	/^    ImS8                    AutoFitChildAxises;$/;"	m	struct:ImGuiWindow	typeref:typename:ImS8
AutoFitFramesX	interface/imgui_internal.h	/^    ImS8                    AutoFitFramesX, AutoFitFramesY;$/;"	m	struct:ImGuiWindow	typeref:typename:ImS8
AutoFitFramesY	interface/imgui_internal.h	/^    ImS8                    AutoFitFramesX, AutoFitFramesY;$/;"	m	struct:ImGuiWindow	typeref:typename:ImS8
AutoFitOnlyGrows	interface/imgui_internal.h	/^    bool                    AutoFitOnlyGrows;$/;"	m	struct:ImGuiWindow	typeref:typename:bool
AutoPosLastDirection	interface/imgui_internal.h	/^    ImGuiDir                AutoPosLastDirection;$/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiDir
BYTE	arm.hpp	/^    BYTE,$/;"	e	enum:Width
Backbuffer	interface/imgui_impl_vulkan.h	/^    VkImage             Backbuffer;$/;"	m	struct:ImGui_ImplVulkanH_Frame	typeref:typename:VkImage
BackbufferView	interface/imgui_impl_vulkan.h	/^    VkImageView         BackbufferView;$/;"	m	struct:ImGui_ImplVulkanH_Frame	typeref:typename:VkImageView
BackendFlags	interface/imgui.h	/^    ImGuiBackendFlags  BackendFlags;            \/\/ = 0              \/\/ See ImGuiBackendFlags/;"	m	struct:ImGuiIO	typeref:typename:ImGuiBackendFlags
BackendLanguageUserData	interface/imgui.h	/^    void*       BackendLanguageUserData;        \/\/ = NULL           \/\/ User data for non C++/;"	m	struct:ImGuiIO	typeref:typename:void *
BackendPlatformName	interface/imgui.h	/^    const char* BackendPlatformName;            \/\/ = NULL$/;"	m	struct:ImGuiIO	typeref:typename:const char *
BackendPlatformUserData	interface/imgui.h	/^    void*       BackendPlatformUserData;        \/\/ = NULL           \/\/ User data for platfor/;"	m	struct:ImGuiIO	typeref:typename:void *
BackendRendererName	interface/imgui.h	/^    const char* BackendRendererName;            \/\/ = NULL$/;"	m	struct:ImGuiIO	typeref:typename:const char *
BackendRendererUserData	interface/imgui.h	/^    void*       BackendRendererUserData;        \/\/ = NULL           \/\/ User data for rendere/;"	m	struct:ImGuiIO	typeref:typename:void *
BackgroundDrawList	interface/imgui_internal.h	/^    ImDrawList              BackgroundDrawList;                 \/\/ First draw list to be rende/;"	m	struct:ImGuiContext	typeref:typename:ImDrawList
Backup	interface/imgui_internal.h	/^    void Backup()           { ImGuiWindow* window = GImGui->CurrentWindow; LastItemId = window->/;"	f	struct:ImGuiLastItemDataBackup	typeref:typename:void
BackupActiveIdIsAlive	interface/imgui_internal.h	/^    ImGuiID     BackupActiveIdIsAlive;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImGuiID
BackupActiveIdPreviousFrameIsAlive	interface/imgui_internal.h	/^    bool        BackupActiveIdPreviousFrameIsAlive;$/;"	m	struct:ImGuiGroupData	typeref:typename:bool
BackupCurrLineSize	interface/imgui_internal.h	/^    ImVec2      BackupCurrLineSize;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImVec2
BackupCurrLineTextBaseOffset	interface/imgui_internal.h	/^    float       BackupCurrLineTextBaseOffset;$/;"	m	struct:ImGuiGroupData	typeref:typename:float
BackupCursorMaxPos	interface/imgui_internal.h	/^    ImVec2      BackupCursorMaxPos;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImVec2
BackupCursorPos	interface/imgui_internal.h	/^    ImVec2              BackupCursorPos;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImVec2
BackupCursorPos	interface/imgui_internal.h	/^    ImVec2      BackupCursorPos;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImVec2
BackupFloat	interface/imgui_internal.h	/^    union           { int BackupInt[2]; float BackupFloat[2]; };$/;"	m	union:ImGuiStyleMod::__anonc0d10b52010a	typeref:typename:float[2]
BackupGroupOffset	interface/imgui_internal.h	/^    ImVec1      BackupGroupOffset;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImVec1
BackupIndent	interface/imgui_internal.h	/^    ImVec1      BackupIndent;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImVec1
BackupInt	interface/imgui_internal.h	/^    union           { int BackupInt[2]; float BackupFloat[2]; };$/;"	m	union:ImGuiStyleMod::__anonc0d10b52010a	typeref:typename:int[2]
BackupValue	interface/imgui_internal.h	/^    ImVec4      BackupValue;$/;"	m	struct:ImGuiColorMod	typeref:typename:ImVec4
Bank	bank.hpp	/^        Bank() {}$/;"	f	class:Bank
Bank	bank.hpp	/^class Bank {$/;"	c
BarRect	interface/imgui_internal.h	/^    ImRect              BarRect;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImRect
Begin	interface/imgui.cpp	/^bool ImGui::Begin(const char* name, bool* p_open, ImGuiWindowFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
Begin	interface/imgui.cpp	/^void ImGuiListClipper::Begin(int items_count, float items_height)$/;"	f	class:ImGuiListClipper	typeref:typename:void
BeginChild	interface/imgui.cpp	/^bool ImGui::BeginChild(ImGuiID id, const ImVec2& size_arg, bool border, ImGuiWindowFlags extra_f/;"	f	class:ImGui	typeref:typename:bool
BeginChild	interface/imgui.cpp	/^bool ImGui::BeginChild(const char* str_id, const ImVec2& size_arg, bool border, ImGuiWindowFlags/;"	f	class:ImGui	typeref:typename:bool
BeginChildEx	interface/imgui.cpp	/^bool ImGui::BeginChildEx(const char* name, ImGuiID id, const ImVec2& size_arg, bool border, ImGu/;"	f	class:ImGui	typeref:typename:bool
BeginChildFrame	interface/imgui.cpp	/^bool ImGui::BeginChildFrame(ImGuiID id, const ImVec2& size, ImGuiWindowFlags extra_flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginColumns	interface/imgui_widgets.cpp	/^void ImGui::BeginColumns(const char* str_id, int columns_count, ImGuiColumnsFlags flags)$/;"	f	class:ImGui	typeref:typename:void
BeginCombo	interface/imgui_widgets.cpp	/^bool ImGui::BeginCombo(const char* label, const char* preview_value, ImGuiComboFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginCount	interface/imgui_internal.h	/^    ImS8                BeginCount;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImS8
BeginCount	interface/imgui_internal.h	/^    short                   BeginCount;                         \/\/ Number of Begin() during th/;"	m	struct:ImGuiWindow	typeref:typename:short
BeginDragDropSource	interface/imgui.cpp	/^bool ImGui::BeginDragDropSource(ImGuiDragDropFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginDragDropTarget	interface/imgui.cpp	/^bool ImGui::BeginDragDropTarget()$/;"	f	class:ImGui	typeref:typename:bool
BeginDragDropTargetCustom	interface/imgui.cpp	/^bool ImGui::BeginDragDropTargetCustom(const ImRect& bb, ImGuiID id)$/;"	f	class:ImGui	typeref:typename:bool
BeginGroup	interface/imgui.cpp	/^void ImGui::BeginGroup()$/;"	f	class:ImGui	typeref:typename:void
BeginMainMenuBar	interface/imgui_widgets.cpp	/^bool ImGui::BeginMainMenuBar()$/;"	f	class:ImGui	typeref:typename:bool
BeginMenu	interface/imgui_widgets.cpp	/^bool ImGui::BeginMenu(const char* label, bool enabled)$/;"	f	class:ImGui	typeref:typename:bool
BeginMenuBar	interface/imgui_widgets.cpp	/^bool ImGui::BeginMenuBar()$/;"	f	class:ImGui	typeref:typename:bool
BeginOrder	interface/imgui_internal.h	/^    ImS16               BeginOrder;             \/\/ BeginTabItem() order, used to re-order tabs/;"	m	struct:ImGuiTabItem	typeref:typename:ImS16
BeginOrderWithinContext	interface/imgui_internal.h	/^    short                   BeginOrderWithinContext;            \/\/ Order within entire imgui c/;"	m	struct:ImGuiWindow	typeref:typename:short
BeginOrderWithinParent	interface/imgui_internal.h	/^    short                   BeginOrderWithinParent;             \/\/ Order within immediate pare/;"	m	struct:ImGuiWindow	typeref:typename:short
BeginPopup	interface/imgui.cpp	/^bool ImGui::BeginPopup(const char* str_id, ImGuiWindowFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginPopupContextItem	interface/imgui.cpp	/^bool ImGui::BeginPopupContextItem(const char* str_id, ImGuiPopupFlags popup_flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginPopupContextVoid	interface/imgui.cpp	/^bool ImGui::BeginPopupContextVoid(const char* str_id, ImGuiPopupFlags popup_flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginPopupContextWindow	interface/imgui.cpp	/^bool ImGui::BeginPopupContextWindow(const char* str_id, ImGuiPopupFlags popup_flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginPopupContextWindow	interface/imgui.h	/^    static inline bool  BeginPopupContextWindow(const char* str_id, ImGuiMouseButton mb, bool ov/;"	f	namespace:ImGui	typeref:typename:bool
BeginPopupEx	interface/imgui.cpp	/^bool ImGui::BeginPopupEx(ImGuiID id, ImGuiWindowFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginPopupModal	interface/imgui.cpp	/^bool ImGui::BeginPopupModal(const char* name, bool* p_open, ImGuiWindowFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginPopupStack	interface/imgui_internal.h	/^    ImVector<ImGuiPopupData>BeginPopupStack;                    \/\/ Which level of BeginPopup()/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiPopupData>
BeginTabBar	interface/imgui_widgets.cpp	/^bool    ImGui::BeginTabBar(const char* str_id, ImGuiTabBarFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginTabBarEx	interface/imgui_widgets.cpp	/^bool    ImGui::BeginTabBarEx(ImGuiTabBar* tab_bar, const ImRect& tab_bar_bb, ImGuiTabBarFlags fl/;"	f	class:ImGui	typeref:typename:bool
BeginTabItem	interface/imgui_widgets.cpp	/^bool    ImGui::BeginTabItem(const char* label, bool* p_open, ImGuiTabItemFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginTooltip	interface/imgui.cpp	/^void ImGui::BeginTooltip()$/;"	f	class:ImGui	typeref:typename:void
BeginTooltipEx	interface/imgui.cpp	/^void ImGui::BeginTooltipEx(ImGuiWindowFlags extra_flags, ImGuiTooltipFlags tooltip_flags)$/;"	f	class:ImGui	typeref:typename:void
BezierClosestPointCasteljauStep	interface/imgui.cpp	/^static void BezierClosestPointCasteljauStep(const ImVec2& p, ImVec2& p_closest, ImVec2& p_last, /;"	f	typeref:typename:void	file:
BgAlphaVal	interface/imgui_internal.h	/^    float                       BgAlphaVal;             \/\/ Override background alpha$/;"	m	struct:ImGuiNextWindowData	typeref:typename:float
BringWindowToDisplayBack	interface/imgui.cpp	/^void ImGui::BringWindowToDisplayBack(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
BringWindowToDisplayFront	interface/imgui.cpp	/^void ImGui::BringWindowToDisplayFront(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
BringWindowToFocusFront	interface/imgui.cpp	/^void ImGui::BringWindowToFocusFront(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
Buf	interface/imgui.h	/^    ImVector<char>      Buf;$/;"	m	struct:ImGuiTextBuffer	typeref:typename:ImVector<char>
Buf	interface/imgui.h	/^    char*               Buf;            \/\/ Text buffer                          \/\/ Read-writ/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:char *
Buf	interface/imgui_internal.h	/^    ImVector<T>     Buf;        \/\/ Contiguous data$/;"	m	struct:ImPool	typeref:typename:ImVector<T>
Buf	interface/imgui_internal.h	/^    ImVector<char>  Buf;$/;"	m	struct:ImChunkStream	typeref:typename:ImVector<char>
BufCapacityA	interface/imgui_internal.h	/^    int                     BufCapacityA;           \/\/ end-user buffer capacity$/;"	m	struct:ImGuiInputTextState	typeref:typename:int
BufDirty	interface/imgui.h	/^    bool                BufDirty;       \/\/ Set if you modify Buf\/BufTextLen!    \/\/ Write   /;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:bool
BufSize	interface/imgui.h	/^    int                 BufSize;        \/\/ Buffer size (in bytes) = capacity+1  \/\/ Read-only/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:int
BufTextLen	interface/imgui.h	/^    int                 BufTextLen;     \/\/ Text length (in bytes)               \/\/ Read-writ/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:int
Build	interface/imgui.cpp	/^void ImGuiTextFilter::Build()$/;"	f	class:ImGuiTextFilter	typeref:typename:void
Build	interface/imgui_draw.cpp	/^bool    ImFontAtlas::Build()$/;"	f	class:ImFontAtlas	typeref:typename:bool
BuildLookupTable	interface/imgui_draw.cpp	/^void ImFont::BuildLookupTable()$/;"	f	class:ImFont	typeref:typename:void
BuildRanges	interface/imgui_draw.cpp	/^void ImFontGlyphRangesBuilder::BuildRanges(ImVector<ImWchar>* out_ranges)$/;"	f	class:ImFontGlyphRangesBuilder	typeref:typename:void
BuildSortByKey	interface/imgui.cpp	/^void ImGuiStorage::BuildSortByKey()$/;"	f	class:ImGuiStorage	typeref:typename:void
Bullet	interface/imgui_widgets.cpp	/^void ImGui::Bullet()$/;"	f	class:ImGui	typeref:typename:void
BulletText	interface/imgui_widgets.cpp	/^void ImGui::BulletText(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
BulletTextV	interface/imgui_widgets.cpp	/^void ImGui::BulletTextV(const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
BusType	arm.hpp	/^enum class BusType : u8 {$/;"	g	typeref:typename:u8
Button	interface/imgui_widgets.cpp	/^bool ImGui::Button(const char* label, const ImVec2& size_arg)$/;"	f	class:ImGui	typeref:typename:bool
ButtonBehavior	interface/imgui_widgets.cpp	/^bool ImGui::ButtonBehavior(const ImRect& bb, ImGuiID id, bool* out_hovered, bool* out_held, ImGu/;"	f	class:ImGui	typeref:typename:bool
ButtonEx	interface/imgui_widgets.cpp	/^bool ImGui::ButtonEx(const char* label, const ImVec2& size_arg, ImGuiButtonFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
ButtonTextAlign	interface/imgui.h	/^    ImVec2      ButtonTextAlign;            \/\/ Alignment of button text when button is larger /;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
CARRY	arm.hpp	/^            CARRY,$/;"	e	enum:Cpu::Flag
CODE	arm.hpp	/^    CODE,$/;"	e	enum:BusType
COLUMNS_HIT_RECT_HALF_WIDTH	interface/imgui_widgets.cpp	/^static const float COLUMNS_HIT_RECT_HALF_WIDTH = 4.0f;$/;"	v	typeref:typename:const float	file:
CP15	arm.hpp	/^class CP15 : public Coprocessor {$/;"	c
CPSR	arm.hpp	/^            CPSR,$/;"	e	enum:Cpu::Register
CalcCustomRectUV	interface/imgui_draw.cpp	/^void ImFontAtlas::CalcCustomRectUV(const ImFontAtlasCustomRect* rect, ImVec2* out_uv_min, ImVec2/;"	f	class:ImFontAtlas	typeref:typename:void
CalcExtraSpace	interface/imgui_widgets.cpp	/^float ImGuiMenuColumns::CalcExtraSpace(float avail_w) const$/;"	f	class:ImGuiMenuColumns	typeref:typename:float
CalcFontSize	interface/imgui_internal.h	/^    float       CalcFontSize() const    { ImGuiContext& g = *GImGui; float scale = g.FontBaseSiz/;"	f	struct:ImGuiWindow	typeref:typename:float
CalcItemSize	interface/imgui.cpp	/^ImVec2 ImGui::CalcItemSize(ImVec2 size, float default_w, float default_h)$/;"	f	class:ImGui	typeref:typename:ImVec2
CalcItemWidth	interface/imgui.cpp	/^float ImGui::CalcItemWidth()$/;"	f	class:ImGui	typeref:typename:float
CalcListClipping	interface/imgui.cpp	/^void ImGui::CalcListClipping(int items_count, float items_height, int* out_items_display_start, /;"	f	class:ImGui	typeref:typename:void
CalcMaxPopupHeightFromItemCount	interface/imgui_widgets.cpp	/^static float CalcMaxPopupHeightFromItemCount(int items_count)$/;"	f	typeref:typename:float	file:
CalcNextScrollFromScrollTargetAndClamp	interface/imgui.cpp	/^static ImVec2 CalcNextScrollFromScrollTargetAndClamp(ImGuiWindow* window)$/;"	f	typeref:typename:ImVec2	file:
CalcResizePosSizeFromAnyCorner	interface/imgui.cpp	/^static void CalcResizePosSizeFromAnyCorner(ImGuiWindow* window, const ImVec2& corner_target, con/;"	f	typeref:typename:void	file:
CalcScrollEdgeSnap	interface/imgui.cpp	/^static float CalcScrollEdgeSnap(float target, float snap_min, float snap_max, float snap_thresho/;"	f	typeref:typename:float	file:
CalcTextSize	interface/imgui.cpp	/^ImVec2 ImGui::CalcTextSize(const char* text, const char* text_end, bool hide_text_after_double_h/;"	f	class:ImGui	typeref:typename:ImVec2
CalcTextSizeA	interface/imgui_draw.cpp	/^ImVec2 ImFont::CalcTextSizeA(float size, float max_width, float wrap_width, const char* text_beg/;"	f	class:ImFont	typeref:typename:ImVec2
CalcTypematicRepeatAmount	interface/imgui.cpp	/^int ImGui::CalcTypematicRepeatAmount(float t0, float t1, float repeat_delay, float repeat_rate)$/;"	f	class:ImGui	typeref:typename:int
CalcWindowAutoFitSize	interface/imgui.cpp	/^static ImVec2 CalcWindowAutoFitSize(ImGuiWindow* window, const ImVec2& size_contents)$/;"	f	typeref:typename:ImVec2	file:
CalcWindowContentSize	interface/imgui.cpp	/^static ImVec2 CalcWindowContentSize(ImGuiWindow* window)$/;"	f	typeref:typename:ImVec2	file:
CalcWindowExpectedSize	interface/imgui.cpp	/^ImVec2 ImGui::CalcWindowExpectedSize(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:ImVec2
CalcWindowSizeAfterConstraint	interface/imgui.cpp	/^static ImVec2 CalcWindowSizeAfterConstraint(ImGuiWindow* window, ImVec2 new_size)$/;"	f	typeref:typename:ImVec2	file:
CalcWordWrapPositionA	interface/imgui_draw.cpp	/^const char* ImFont::CalcWordWrapPositionA(float scale, const char* text, const char* text_end, f/;"	f	class:ImFont	typeref:typename:const char *
CalcWrapWidthForPos	interface/imgui.cpp	/^float ImGui::CalcWrapWidthForPos(const ImVec2& pos, float wrap_pos_x)$/;"	f	class:ImGui	typeref:typename:float
CallContextHooks	interface/imgui.cpp	/^void ImGui::CallContextHooks(ImGuiContext* ctx, ImGuiContextHookType hook_type)$/;"	f	class:ImGui	typeref:typename:void
Callback	interface/imgui_internal.h	/^    ImGuiContextHookCallback    Callback;$/;"	m	struct:ImGuiContextHook	typeref:typename:ImGuiContextHookCallback
Capacity	interface/imgui.h	/^    int                 Capacity;$/;"	m	struct:ImVector	typeref:typename:int
CaptureKeyboardFromApp	interface/imgui.cpp	/^void ImGui::CaptureKeyboardFromApp(bool capture)$/;"	f	class:ImGui	typeref:typename:void
CaptureMouseFromApp	interface/imgui.cpp	/^void ImGui::CaptureMouseFromApp(bool capture)$/;"	f	class:ImGui	typeref:typename:void
ChannelsMerge	interface/imgui.h	/^    inline void     ChannelsMerge()             { _Splitter.Merge(this); }$/;"	f	struct:ImDrawList	typeref:typename:void
ChannelsSetCurrent	interface/imgui.h	/^    inline void     ChannelsSetCurrent(int n)   { _Splitter.SetCurrentChannel(this, n); }$/;"	f	struct:ImDrawList	typeref:typename:void
ChannelsSplit	interface/imgui.h	/^    inline void     ChannelsSplit(int count)    { _Splitter.Split(this, count); }$/;"	f	struct:ImDrawList	typeref:typename:void
CheckVkResultFn	interface/imgui_impl_vulkan.h	/^    void                (*CheckVkResultFn)(VkResult err);$/;"	m	struct:ImGui_ImplVulkan_InitInfo	typeref:typename:void (*)(VkResult err)
Checkbox	interface/imgui_widgets.cpp	/^bool ImGui::Checkbox(const char* label, bool* v)$/;"	f	class:ImGui	typeref:typename:bool
CheckboxFlags	interface/imgui_widgets.cpp	/^bool ImGui::CheckboxFlags(const char* label, unsigned int* flags, unsigned int flags_value)$/;"	f	class:ImGui	typeref:typename:bool
ChildBorderSize	interface/imgui.h	/^    float       ChildBorderSize;            \/\/ Thickness of border around child windows. Gener/;"	m	struct:ImGuiStyle	typeref:typename:float
ChildId	interface/imgui_internal.h	/^    ImGuiID                 ChildId;                            \/\/ ID of corresponding item in/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiID
ChildRounding	interface/imgui.h	/^    float       ChildRounding;              \/\/ Radius of child window corners rounding. Set to/;"	m	struct:ImGuiStyle	typeref:typename:float
ChildWindowComparer	interface/imgui.cpp	/^static int IMGUI_CDECL ChildWindowComparer(const void* lhs, const void* rhs)$/;"	f	typeref:typename:int IMGUI_CDECL	file:
ChildWindows	interface/imgui_internal.h	/^    ImVector<ImGuiWindow*>  ChildWindows;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVector<ImGuiWindow * >
CircleSegmentCounts	interface/imgui_internal.h	/^    ImU8            CircleSegmentCounts[64];    \/\/ Precomputed segment count for given radius /;"	m	struct:ImDrawListSharedData	typeref:typename:ImU8[64]
CircleSegmentMaxError	interface/imgui.h	/^    float       CircleSegmentMaxError;      \/\/ Maximum error (in pixels) allowed when using Ad/;"	m	struct:ImGuiStyle	typeref:typename:float
CircleSegmentMaxError	interface/imgui_internal.h	/^    float           CircleSegmentMaxError;      \/\/ Number of circle segments to use per pixel /;"	m	struct:ImDrawListSharedData	typeref:typename:float
ClampWindowRect	interface/imgui.cpp	/^static inline void ClampWindowRect(ImGuiWindow* window, const ImRect& visibility_rect)$/;"	f	typeref:typename:void	file:
Clear	interface/imgui.h	/^    inline void                 Clear() { _Current = 0; _Count = 1; } \/\/ Do not clear Channels/;"	f	struct:ImDrawListSplitter	typeref:typename:void
Clear	interface/imgui.h	/^    inline void     Clear()                 { int size_in_bytes = (IM_UNICODE_CODEPOINT_MAX + 1)/;"	f	struct:ImFontGlyphRangesBuilder	typeref:typename:void
Clear	interface/imgui.h	/^    void                Clear()          { InputBuf[0] = 0; Build(); }$/;"	f	struct:ImGuiTextFilter	typeref:typename:void
Clear	interface/imgui.h	/^    void                Clear() { Data.clear(); }$/;"	f	struct:ImGuiStorage	typeref:typename:void
Clear	interface/imgui.h	/^    void Clear()    { SourceId = SourceParentId = 0; Data = NULL; DataSize = 0; memset(DataType,/;"	f	struct:ImGuiPayload	typeref:typename:void
Clear	interface/imgui.h	/^    void Clear()    { Valid = false; CmdLists = NULL; CmdListsCount = TotalVtxCount = TotalIdxCo/;"	f	struct:ImDrawData	typeref:typename:void
Clear	interface/imgui_draw.cpp	/^void    ImFontAtlas::Clear()$/;"	f	class:ImFontAtlas	typeref:typename:void
Clear	interface/imgui_internal.h	/^    void            Clear()                     { Storage.clear(); }$/;"	f	struct:ImBitVector	typeref:typename:void
Clear	interface/imgui_internal.h	/^    void        Clear()                             { for (int n = 0; n < Map.Data.Size; n++) { /;"	f	struct:ImPool	typeref:typename:void
Clear	interface/imgui_internal.h	/^    void Clear()            { for (int n = 0; n < IM_ARRAYSIZE(Layers); n++) Layers[n].resize(0)/;"	f	struct:ImDrawDataBuilder	typeref:typename:void
Clear	interface/imgui_internal.h	/^    void Clear()         { Window = NULL; ID = FocusScopeId = 0; DistBox = DistCenter = DistAxia/;"	f	struct:ImGuiNavMoveResult	typeref:typename:void
Clear	interface/imgui_internal.h	/^    void Clear()$/;"	f	struct:ImGuiColumns	typeref:typename:void
ClearActiveID	interface/imgui.cpp	/^void ImGui::ClearActiveID()$/;"	f	class:ImGui	typeref:typename:void
ClearAllFn	interface/imgui_internal.h	/^    void        (*ClearAllFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler);                /;"	m	struct:ImGuiSettingsHandler	typeref:typename:void (*)(ImGuiContext * ctx,ImGuiSettingsHandler * handler)
ClearBit	interface/imgui_internal.h	/^    void            ClearBit(int n)             { IM_ASSERT(n < (Storage.Size << 5)); ImBitArray/;"	f	struct:ImBitVector	typeref:typename:void
ClearDragDrop	interface/imgui.cpp	/^void ImGui::ClearDragDrop()$/;"	f	class:ImGui	typeref:typename:void
ClearEnable	interface/imgui_impl_vulkan.h	/^    bool                ClearEnable;$/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:bool
ClearFlags	interface/imgui_internal.h	/^    inline void ClearFlags()    { Flags = ImGuiNextItemDataFlags_None; } \/\/ Also cleared manua/;"	f	struct:ImGuiNextItemData	typeref:typename:void
ClearFlags	interface/imgui_internal.h	/^    inline void ClearFlags()    { Flags = ImGuiNextWindowDataFlags_None; }$/;"	f	struct:ImGuiNextWindowData	typeref:typename:void
ClearFonts	interface/imgui_draw.cpp	/^void    ImFontAtlas::ClearFonts()$/;"	f	class:ImFontAtlas	typeref:typename:void
ClearFreeMemory	interface/imgui_draw.cpp	/^void ImDrawListSplitter::ClearFreeMemory()$/;"	f	class:ImDrawListSplitter	typeref:typename:void
ClearFreeMemory	interface/imgui_internal.h	/^    void        ClearFreeMemory()           { TextW.clear(); TextA.clear(); InitialTextA.clear()/;"	f	struct:ImGuiInputTextState	typeref:typename:void
ClearFreeMemory	interface/imgui_internal.h	/^    void ClearFreeMemory()  { for (int n = 0; n < IM_ARRAYSIZE(Layers); n++) Layers[n].clear(); /;"	f	struct:ImDrawDataBuilder	typeref:typename:void
ClearIniSettings	interface/imgui.cpp	/^void ImGui::ClearIniSettings()$/;"	f	class:ImGui	typeref:typename:void
ClearInputCharacters	interface/imgui.cpp	/^void ImGuiIO::ClearInputCharacters()$/;"	f	class:ImGuiIO	typeref:typename:void
ClearInputData	interface/imgui_draw.cpp	/^void    ImFontAtlas::ClearInputData()$/;"	f	class:ImFontAtlas	typeref:typename:void
ClearOutputData	interface/imgui_draw.cpp	/^void    ImFont::ClearOutputData()$/;"	f	class:ImFont	typeref:typename:void
ClearSelection	interface/imgui.h	/^    void                ClearSelection()        { SelectionStart = SelectionEnd = BufTextLen; }$/;"	f	struct:ImGuiInputTextCallbackData	typeref:typename:void
ClearSelection	interface/imgui_internal.h	/^    void        ClearSelection()            { Stb.select_start = Stb.select_end = Stb.cursor; }$/;"	f	struct:ImGuiInputTextState	typeref:typename:void
ClearTexData	interface/imgui_draw.cpp	/^void    ImFontAtlas::ClearTexData()$/;"	f	class:ImFontAtlas	typeref:typename:void
ClearText	interface/imgui_internal.h	/^    void        ClearText()                 { CurLenW = CurLenA = 0; TextW[0] = 0; TextA[0] = 0;/;"	f	struct:ImGuiInputTextState	typeref:typename:void
ClearValue	interface/imgui_impl_vulkan.h	/^    VkClearValue        ClearValue;$/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:VkClearValue
ClipRect	interface/imgui.h	/^    ImVec4          ClipRect;           \/\/ 4*4  \/\/ Clipping rectangle (x1, y1, x2, y2). Subt/;"	m	struct:ImDrawCmd	typeref:typename:ImVec4
ClipRect	interface/imgui_internal.h	/^    ImRect                  ClipRect;                           \/\/ Current clipping\/scissorin/;"	m	struct:ImGuiWindow	typeref:typename:ImRect
ClipRect	interface/imgui_internal.h	/^    ImRect              ClipRect;$/;"	m	struct:ImGuiColumnData	typeref:typename:ImRect
ClipRectFullscreen	interface/imgui_internal.h	/^    ImVec4          ClipRectFullscreen;         \/\/ Value for PushClipRectFullscreen()$/;"	m	struct:ImDrawListSharedData	typeref:typename:ImVec4
ClipWith	interface/imgui_internal.h	/^    void        ClipWith(const ImRect& r)           { Min = ImMax(Min, r.Min); Max = ImMin(Max, /;"	f	struct:ImRect	typeref:typename:void
ClipWithFull	interface/imgui_internal.h	/^    void        ClipWithFull(const ImRect& r)       { Min = ImClamp(Min, r.Min, r.Max); Max = Im/;"	f	struct:ImRect	typeref:typename:void
ClipboardHandlerData	interface/imgui_internal.h	/^    ImVector<char>          ClipboardHandlerData;               \/\/ If no custom clipboard hand/;"	m	struct:ImGuiContext	typeref:typename:ImVector<char>
ClipboardUserData	interface/imgui.h	/^    void*       ClipboardUserData;$/;"	m	struct:ImGuiIO	typeref:typename:void *
CloneOutput	interface/imgui_draw.cpp	/^ImDrawList* ImDrawList::CloneOutput() const$/;"	f	class:ImDrawList	typeref:typename:ImDrawList *
CloseButton	interface/imgui_widgets.cpp	/^bool ImGui::CloseButton(ImGuiID id, const ImVec2& pos)\/\/, float size)$/;"	f	class:ImGui	typeref:typename:bool
CloseCurrentPopup	interface/imgui.cpp	/^void ImGui::CloseCurrentPopup()$/;"	f	class:ImGui	typeref:typename:void
ClosePopupToLevel	interface/imgui.cpp	/^void ImGui::ClosePopupToLevel(int remaining, bool restore_focus_to_window_under_popup)$/;"	f	class:ImGui	typeref:typename:void
ClosePopupsOverWindow	interface/imgui.cpp	/^void ImGui::ClosePopupsOverWindow(ImGuiWindow* ref_window, bool restore_focus_to_window_under_po/;"	f	class:ImGui	typeref:typename:void
CmdBuffer	interface/imgui.h	/^    ImVector<ImDrawCmd>     CmdBuffer;          \/\/ Draw commands. Typically 1 command = 1 GPU /;"	m	struct:ImDrawList	typeref:typename:ImVector<ImDrawCmd>
CmdLists	interface/imgui.h	/^    ImDrawList**    CmdLists;               \/\/ Array of ImDrawList* to render. The ImDrawList /;"	m	struct:ImDrawData	typeref:typename:ImDrawList **
CmdListsCount	interface/imgui.h	/^    int             CmdListsCount;          \/\/ Number of ImDrawList* to render$/;"	m	struct:ImDrawData	typeref:typename:int
Codepoint	interface/imgui.h	/^    unsigned int    Codepoint : 31;     \/\/ 0x0000..0xFFFF$/;"	m	struct:ImFontGlyph	typeref:typename:unsigned int:31
Col	interface/imgui_internal.h	/^    ImGuiCol    Col;$/;"	m	struct:ImGuiColorMod	typeref:typename:ImGuiCol
CollapseButton	interface/imgui_widgets.cpp	/^bool ImGui::CollapseButton(ImGuiID id, const ImVec2& pos)$/;"	f	class:ImGui	typeref:typename:bool
Collapsed	interface/imgui_internal.h	/^    bool                    Collapsed;                          \/\/ Set when collapsing window /;"	m	struct:ImGuiWindow	typeref:typename:bool
Collapsed	interface/imgui_internal.h	/^    bool        Collapsed;$/;"	m	struct:ImGuiWindowSettings	typeref:typename:bool
CollapsedCond	interface/imgui_internal.h	/^    ImGuiCond                   CollapsedCond;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImGuiCond
CollapsedVal	interface/imgui_internal.h	/^    bool                        CollapsedVal;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:bool
CollapsingHeader	interface/imgui_widgets.cpp	/^bool ImGui::CollapsingHeader(const char* label, ImGuiTreeNodeFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
CollapsingHeader	interface/imgui_widgets.cpp	/^bool ImGui::CollapsingHeader(const char* label, bool* p_open, ImGuiTreeNodeFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
ColorButton	interface/imgui_widgets.cpp	/^bool ImGui::ColorButton(const char* desc_id, const ImVec4& col, ImGuiColorEditFlags flags, ImVec/;"	f	class:ImGui	typeref:typename:bool
ColorButtonPosition	interface/imgui.h	/^    ImGuiDir    ColorButtonPosition;        \/\/ Side of the color button in the ColorEdit4 widg/;"	m	struct:ImGuiStyle	typeref:typename:ImGuiDir
ColorConvertFloat4ToU32	interface/imgui.cpp	/^ImU32 ImGui::ColorConvertFloat4ToU32(const ImVec4& in)$/;"	f	class:ImGui	typeref:typename:ImU32
ColorConvertHSVtoRGB	interface/imgui.cpp	/^void ImGui::ColorConvertHSVtoRGB(float h, float s, float v, float& out_r, float& out_g, float& o/;"	f	class:ImGui	typeref:typename:void
ColorConvertRGBtoHSV	interface/imgui.cpp	/^void ImGui::ColorConvertRGBtoHSV(float r, float g, float b, float& out_h, float& out_s, float& o/;"	f	class:ImGui	typeref:typename:void
ColorConvertU32ToFloat4	interface/imgui.cpp	/^ImVec4 ImGui::ColorConvertU32ToFloat4(ImU32 in)$/;"	f	class:ImGui	typeref:typename:ImVec4
ColorEdit3	interface/imgui_widgets.cpp	/^bool ImGui::ColorEdit3(const char* label, float col[3], ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
ColorEdit4	interface/imgui_widgets.cpp	/^bool ImGui::ColorEdit4(const char* label, float col[4], ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
ColorEditLastColor	interface/imgui_internal.h	/^    float                   ColorEditLastColor[3];$/;"	m	struct:ImGuiContext	typeref:typename:float[3]
ColorEditLastHue	interface/imgui_internal.h	/^    float                   ColorEditLastHue;                   \/\/ Backup of last Hue associat/;"	m	struct:ImGuiContext	typeref:typename:float
ColorEditLastSat	interface/imgui_internal.h	/^    float                   ColorEditLastSat;                   \/\/ Backup of last Saturation a/;"	m	struct:ImGuiContext	typeref:typename:float
ColorEditOptions	interface/imgui_internal.h	/^    ImGuiColorEditFlags     ColorEditOptions;                   \/\/ Store user options for colo/;"	m	struct:ImGuiContext	typeref:typename:ImGuiColorEditFlags
ColorEditOptionsPopup	interface/imgui_widgets.cpp	/^void ImGui::ColorEditOptionsPopup(const float* col, ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:void
ColorModifiers	interface/imgui_internal.h	/^    ImVector<ImGuiColorMod> ColorModifiers;                     \/\/ Stack for PushStyleColor()\//;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiColorMod>
ColorPicker3	interface/imgui_widgets.cpp	/^bool ImGui::ColorPicker3(const char* label, float col[3], ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
ColorPicker4	interface/imgui_widgets.cpp	/^bool ImGui::ColorPicker4(const char* label, float col[4], ImGuiColorEditFlags flags, const float/;"	f	class:ImGui	typeref:typename:bool
ColorPickerOptionsPopup	interface/imgui_widgets.cpp	/^void ImGui::ColorPickerOptionsPopup(const float* ref_col, ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:void
ColorPickerRef	interface/imgui_internal.h	/^    ImVec4                  ColorPickerRef;                     \/\/ Initial\/reference color at/;"	m	struct:ImGuiContext	typeref:typename:ImVec4
ColorTooltip	interface/imgui_widgets.cpp	/^void ImGui::ColorTooltip(const char* text, const float* col, ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:void
Colors	interface/imgui.h	/^    ImVec4      Colors[ImGuiCol_COUNT];$/;"	m	struct:ImGuiStyle	typeref:typename:ImVec4[]
Columns	interface/imgui_internal.h	/^    ImVector<ImGuiColumnData> Columns;$/;"	m	struct:ImGuiColumns	typeref:typename:ImVector<ImGuiColumnData>
Columns	interface/imgui_widgets.cpp	/^void ImGui::Columns(int columns_count, const char* id, bool border)$/;"	f	class:ImGui	typeref:typename:void
ColumnsMinSpacing	interface/imgui.h	/^    float       ColumnsMinSpacing;          \/\/ Minimum horizontal spacing between two columns./;"	m	struct:ImGuiStyle	typeref:typename:float
ColumnsOffset	interface/imgui_internal.h	/^    ImVec1                  ColumnsOffset;          \/\/ Offset to the current column (if Column/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec1
ColumnsStorage	interface/imgui_internal.h	/^    ImVector<ImGuiColumns>  ColumnsStorage;$/;"	m	struct:ImGuiWindow	typeref:typename:ImVector<ImGuiColumns>
Combo	interface/imgui_widgets.cpp	/^bool ImGui::Combo(const char* label, int* current_item, bool (*items_getter)(void*, int, const c/;"	f	class:ImGui	typeref:typename:bool
Combo	interface/imgui_widgets.cpp	/^bool ImGui::Combo(const char* label, int* current_item, const char* const items[], int items_cou/;"	f	class:ImGui	typeref:typename:bool
Combo	interface/imgui_widgets.cpp	/^bool ImGui::Combo(const char* label, int* current_item, const char* items_separated_by_zeros, in/;"	f	class:ImGui	typeref:typename:bool
CommandBuffer	interface/imgui_impl_vulkan.h	/^    VkCommandBuffer     CommandBuffer;$/;"	m	struct:ImGui_ImplVulkanH_Frame	typeref:typename:VkCommandBuffer
CommandPool	interface/imgui_impl_vulkan.h	/^    VkCommandPool       CommandPool;$/;"	m	struct:ImGui_ImplVulkanH_Frame	typeref:typename:VkCommandPool
ConfigData	interface/imgui.h	/^    ImVector<ImFontConfig>      ConfigData;         \/\/ Configuration data$/;"	m	struct:ImFontAtlas	typeref:typename:ImVector<ImFontConfig>
ConfigData	interface/imgui.h	/^    const ImFontConfig*         ConfigData;         \/\/ 4-8   \/\/ in  \/\/            \/\/ Poi/;"	m	struct:ImFont	typeref:typename:const ImFontConfig *
ConfigDataCount	interface/imgui.h	/^    short                       ConfigDataCount;    \/\/ 2     \/\/ in  \/\/ ~ 1        \/\/ Num/;"	m	struct:ImFont	typeref:typename:short
ConfigFlags	interface/imgui.h	/^    ImGuiConfigFlags   ConfigFlags;             \/\/ = 0              \/\/ See ImGuiConfigFlags_/;"	m	struct:ImGuiIO	typeref:typename:ImGuiConfigFlags
ConfigInputTextCursorBlink	interface/imgui.h	/^    bool        ConfigInputTextCursorBlink;     \/\/ = true           \/\/ Set to false to disab/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigMacOSXBehaviors	interface/imgui.h	/^    bool        ConfigMacOSXBehaviors;          \/\/ = defined(__APPLE__) \/\/ OS X style: Text /;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigWindowsMemoryCompactTimer	interface/imgui.h	/^    float       ConfigWindowsMemoryCompactTimer;\/\/ = 60.0f          \/\/ [BETA] Compact window/;"	m	struct:ImGuiIO	typeref:typename:float
ConfigWindowsMoveFromTitleBarOnly	interface/imgui.h	/^    bool        ConfigWindowsMoveFromTitleBarOnly; \/\/ = false       \/\/ [BETA] Set to true to/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigWindowsResizeFromEdges	interface/imgui.h	/^    bool        ConfigWindowsResizeFromEdges;   \/\/ = true           \/\/ Enable resizing of wi/;"	m	struct:ImGuiIO	typeref:typename:bool
ContainerAtlas	interface/imgui.h	/^    ImFontAtlas*                ContainerAtlas;     \/\/ 4-8   \/\/ out \/\/            \/\/ Wha/;"	m	struct:ImFont	typeref:typename:ImFontAtlas *
Contains	interface/imgui_internal.h	/^    bool        Contains(const ImRect& r) const     { return r.Min.x >= Min.x && r.Min.y >= Min./;"	f	struct:ImRect	typeref:typename:bool
Contains	interface/imgui_internal.h	/^    bool        Contains(const ImVec2& p) const     { return p.x     >= Min.x && p.y     >= Min./;"	f	struct:ImRect	typeref:typename:bool
Contains	interface/imgui_internal.h	/^    bool        Contains(const T* p) const          { return (p >= Buf.Data && p < Buf.Data + Bu/;"	f	struct:ImPool	typeref:typename:bool
ContentRegionRect	interface/imgui_internal.h	/^    ImRect                  ContentRegionRect;                  \/\/ FIXME: This is currently co/;"	m	struct:ImGuiWindow	typeref:typename:ImRect
ContentSize	interface/imgui_internal.h	/^    ImVec2                  ContentSize;                        \/\/ Size of contents\/scrollabl/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ContentSizeExplicit	interface/imgui_internal.h	/^    ImVec2                  ContentSizeExplicit;                \/\/ Size of contents\/scrollabl/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ContentSizeVal	interface/imgui_internal.h	/^    ImVec2                      ContentSizeVal;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImVec2
ContentWidth	interface/imgui_internal.h	/^    float               ContentWidth;           \/\/ Width of label, stored during BeginTabItem(/;"	m	struct:ImGuiTabItem	typeref:typename:float
Coprocessor	arm.hpp	/^class Coprocessor {};$/;"	c
Core	arm.hpp	/^enum Core : u8 { $/;"	g	typeref:typename:u8
CornerPosN	interface/imgui.cpp	/^    ImVec2  CornerPosN;$/;"	m	struct:ImGuiResizeGripDef	typeref:typename:ImVec2	file:
CornerPosN1	interface/imgui.cpp	/^    ImVec2 CornerPosN1, CornerPosN2;$/;"	m	struct:ImGuiResizeBorderDef	typeref:typename:ImVec2	file:
CornerPosN2	interface/imgui.cpp	/^    ImVec2 CornerPosN1, CornerPosN2;$/;"	m	struct:ImGuiResizeBorderDef	typeref:typename:ImVec2	file:
Count	interface/imgui.cpp	/^    ImU32           Count;$/;"	m	struct:ImGuiStyleVarInfo	typeref:typename:ImU32	file:
Count	interface/imgui_impl_vulkan.cpp	/^    uint32_t            Count;$/;"	m	struct:ImGui_ImplVulkanH_WindowRenderBuffers	typeref:typename:uint32_t	file:
Count	interface/imgui_internal.h	/^    int                 Count;$/;"	m	struct:ImGuiColumns	typeref:typename:int
CountGrep	interface/imgui.h	/^    int                     CountGrep;$/;"	m	struct:ImGuiTextFilter	typeref:typename:int
Cpu	arm.hpp	/^class Cpu {$/;"	c
Create	interface/imgui_internal.h	/^    void            Create(int sz)              { Storage.resize((sz + 31) >> 5); memset(Storage/;"	f	struct:ImBitVector	typeref:typename:void
CreateContext	interface/imgui.cpp	/^ImGuiContext* ImGui::CreateContext(ImFontAtlas* shared_font_atlas)$/;"	f	class:ImGui	typeref:typename:ImGuiContext *
CreateNewWindow	interface/imgui.cpp	/^static ImGuiWindow* CreateNewWindow(const char* name, ImGuiWindowFlags flags)$/;"	f	typeref:typename:ImGuiWindow *	file:
CreateNewWindowSettings	interface/imgui.cpp	/^ImGuiWindowSettings* ImGui::CreateNewWindowSettings(const char* name)$/;"	f	class:ImGui	typeref:typename:ImGuiWindowSettings *
CreateOrResizeBuffer	interface/imgui_impl_vulkan.cpp	/^static void CreateOrResizeBuffer(VkBuffer& buffer, VkDeviceMemory& buffer_memory, VkDeviceSize& /;"	f	typeref:typename:void	file:
CurLenA	interface/imgui_internal.h	/^    int                     CurLenW, CurLenA;       \/\/ we need to maintain our buffer length i/;"	m	struct:ImGuiInputTextState	typeref:typename:int
CurLenW	interface/imgui_internal.h	/^    int                     CurLenW, CurLenA;       \/\/ we need to maintain our buffer length i/;"	m	struct:ImGuiInputTextState	typeref:typename:int
CurrFrameVisible	interface/imgui_internal.h	/^    int                 CurrFrameVisible;$/;"	m	struct:ImGuiTabBar	typeref:typename:int
CurrLineSize	interface/imgui_internal.h	/^    ImVec2                  CurrLineSize;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
CurrLineTextBaseOffset	interface/imgui_internal.h	/^    float                   CurrLineTextBaseOffset; \/\/ Baseline offset (0.0f by default on a n/;"	m	struct:ImGuiWindowTempData	typeref:typename:float
CurrTabsContentsHeight	interface/imgui_internal.h	/^    float               CurrTabsContentsHeight;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
Current	interface/imgui_internal.h	/^    int                 Current;$/;"	m	struct:ImGuiColumns	typeref:typename:int
CurrentColumns	interface/imgui_internal.h	/^    ImGuiColumns*           CurrentColumns;         \/\/ Current columns set$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiColumns *
CurrentSize	interface/imgui.h	/^    ImVec2  CurrentSize;    \/\/ Read-only.   Current window size.$/;"	m	struct:ImGuiSizeCallbackData	typeref:typename:ImVec2
CurrentTabBar	interface/imgui_internal.h	/^    ImGuiTabBar*                    CurrentTabBar;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiTabBar *
CurrentTabBarStack	interface/imgui_internal.h	/^    ImVector<ImGuiPtrOrIndex>       CurrentTabBarStack;$/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiPtrOrIndex>
CurrentWindow	interface/imgui_internal.h	/^    ImGuiWindow*            CurrentWindow;                      \/\/ Window being drawn into$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
CurrentWindowStack	interface/imgui_internal.h	/^    ImVector<ImGuiWindow*>  CurrentWindowStack;$/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiWindow * >
CursorAnim	interface/imgui_internal.h	/^    float                   CursorAnim;             \/\/ timer for cursor blink, reset on every /;"	m	struct:ImGuiInputTextState	typeref:typename:float
CursorAnimReset	interface/imgui_internal.h	/^    void        CursorAnimReset()           { CursorAnim = -0.30f; }                            /;"	f	struct:ImGuiInputTextState	typeref:typename:void
CursorClamp	interface/imgui_internal.h	/^    void        CursorClamp()               { Stb.cursor = ImMin(Stb.cursor, CurLenW); Stb.selec/;"	f	struct:ImGuiInputTextState	typeref:typename:void
CursorFollow	interface/imgui_internal.h	/^    bool                    CursorFollow;           \/\/ set when we want scrolling to follow th/;"	m	struct:ImGuiInputTextState	typeref:typename:bool
CursorMaxPos	interface/imgui_internal.h	/^    ImVec2                  CursorMaxPos;           \/\/ Used to implicitly calculate the size o/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
CursorPos	interface/imgui.h	/^    int                 CursorPos;      \/\/                                      \/\/ Read-writ/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:int
CursorPos	interface/imgui_internal.h	/^    ImVec2                  CursorPos;              \/\/ Current emitting position, in absolute /;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
CursorPosPrevLine	interface/imgui_internal.h	/^    ImVec2                  CursorPosPrevLine;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
CursorStartPos	interface/imgui_internal.h	/^    ImVec2                  CursorStartPos;         \/\/ Initial position after Begin(), general/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
CurveTessellationTol	interface/imgui.h	/^    float       CurveTessellationTol;       \/\/ Tessellation tolerance when using PathBezierCur/;"	m	struct:ImGuiStyle	typeref:typename:float
CurveTessellationTol	interface/imgui_internal.h	/^    float           CurveTessellationTol;       \/\/ Tessellation tolerance when using PathBezie/;"	m	struct:ImDrawListSharedData	typeref:typename:float
CustomRect	interface/imgui.h	/^    typedef ImFontAtlasCustomRect    CustomRect;         \/\/ OBSOLETED in 1.72+$/;"	t	struct:ImFontAtlas	typeref:typename:ImFontAtlasCustomRect
CustomRects	interface/imgui.h	/^    ImVector<ImFontAtlasCustomRect> CustomRects;    \/\/ Rectangles for packing custom texture d/;"	m	struct:ImFontAtlas	typeref:typename:ImVector<ImFontAtlasCustomRect>
DATA	arm.hpp	/^    DATA,$/;"	e	enum:BusType
DATA_ABORT	arm.hpp	/^            DATA_ABORT,$/;"	e	enum:Cpu::Interrupt
DC	interface/imgui_internal.h	/^    ImGuiWindowTempData     DC;                                 \/\/ Temporary per-window data, /;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindowTempData
DISABLE_FIQ	arm.hpp	/^            DISABLE_FIQ,$/;"	e	enum:Cpu::Flag
DISABLE_IRQ	arm.hpp	/^            DISABLE_IRQ,$/;"	e	enum:Cpu::Flag
DISABLE_LOGGING	interface/test.cpp	/^#define DISABLE_LOGGING$/;"	d	file:
Data	interface/imgui.h	/^    ImVector<ImGuiStoragePair>      Data;$/;"	m	struct:ImGuiStorage	typeref:typename:ImVector<ImGuiStoragePair>
Data	interface/imgui.h	/^    T*                  Data;$/;"	m	struct:ImVector	typeref:typename:T *
Data	interface/imgui.h	/^    void*           Data;               \/\/ Data (copied and owned by dear imgui)$/;"	m	struct:ImGuiPayload	typeref:typename:void *
Data	interface/imgui_internal.h	/^    ImU8        Data[8];        \/\/ Can fit any data up to ImGuiDataType_COUNT$/;"	m	struct:ImGuiDataTypeTempStorage	typeref:typename:ImU8[8]
DataFrameCount	interface/imgui.h	/^    int             DataFrameCount;     \/\/ Data timestamp$/;"	m	struct:ImGuiPayload	typeref:typename:int
DataSize	interface/imgui.h	/^    int             DataSize;           \/\/ Data size$/;"	m	struct:ImGuiPayload	typeref:typename:int
DataType	interface/imgui.h	/^    char            DataType[32 + 1];   \/\/ Data type tag (short user-supplied string, 32 chara/;"	m	struct:ImGuiPayload	typeref:typename:char[]
DataTypeApplyOp	interface/imgui_widgets.cpp	/^void ImGui::DataTypeApplyOp(ImGuiDataType data_type, int op, void* output, const void* arg1, con/;"	f	class:ImGui	typeref:typename:void
DataTypeApplyOpFromText	interface/imgui_widgets.cpp	/^bool ImGui::DataTypeApplyOpFromText(const char* buf, const char* initial_value_buf, ImGuiDataTyp/;"	f	class:ImGui	typeref:typename:bool
DataTypeClamp	interface/imgui_widgets.cpp	/^bool ImGui::DataTypeClamp(ImGuiDataType data_type, void* p_data, const void* p_min, const void* /;"	f	class:ImGui	typeref:typename:bool
DataTypeClampT	interface/imgui_widgets.cpp	/^static bool DataTypeClampT(T* v, const T* v_min, const T* v_max)$/;"	f	typeref:typename:bool	file:
DataTypeCompare	interface/imgui_widgets.cpp	/^int ImGui::DataTypeCompare(ImGuiDataType data_type, const void* arg_1, const void* arg_2)$/;"	f	class:ImGui	typeref:typename:int
DataTypeCompareT	interface/imgui_widgets.cpp	/^static int DataTypeCompareT(const T* lhs, const T* rhs)$/;"	f	typeref:typename:int	file:
DataTypeFormatString	interface/imgui_widgets.cpp	/^int ImGui::DataTypeFormatString(char* buf, int buf_size, ImGuiDataType data_type, const void* p_/;"	f	class:ImGui	typeref:typename:int
DataTypeGetInfo	interface/imgui_widgets.cpp	/^const ImGuiDataTypeInfo* ImGui::DataTypeGetInfo(ImGuiDataType data_type)$/;"	f	class:ImGui	typeref:typename:const ImGuiDataTypeInfo *
DeIndexAllBuffers	interface/imgui_draw.cpp	/^void ImDrawData::DeIndexAllBuffers()$/;"	f	class:ImDrawData	typeref:typename:void
DebugCheckVersionAndDataLayout	interface/imgui.cpp	/^bool ImGui::DebugCheckVersionAndDataLayout(const char* version, size_t sz_io, size_t sz_style, s/;"	f	class:ImGui	typeref:typename:bool
DebugDrawItemRect	interface/imgui_internal.h	/^    inline void             DebugDrawItemRect(ImU32 col = IM_COL32(255,0,0,255))    { ImGuiConte/;"	f	namespace:ImGui	typeref:typename:void
DebugItemPickerActive	interface/imgui_internal.h	/^    bool                    DebugItemPickerActive;              \/\/ Item picker is active (star/;"	m	struct:ImGuiContext	typeref:typename:bool
DebugItemPickerBreakId	interface/imgui_internal.h	/^    ImGuiID                 DebugItemPickerBreakId;             \/\/ Will call IM_DEBUG_BREAK() /;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DebugMetricsConfig	interface/imgui_internal.h	/^    ImGuiMetricsConfig      DebugMetricsConfig;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiMetricsConfig
DebugNodeColumns	interface/imgui.cpp	/^void ImGui::DebugNodeColumns(ImGuiColumns* columns)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeColumns	interface/imgui.cpp	/^void ImGui::DebugNodeColumns(ImGuiColumns*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeDrawCmdShowMeshAndBoundingBox	interface/imgui.cpp	/^void ImGui::DebugNodeDrawCmdShowMeshAndBoundingBox(ImGuiWindow* window, const ImDrawList* draw_l/;"	f	class:ImGui	typeref:typename:void
DebugNodeDrawCmdShowMeshAndBoundingBox	interface/imgui.cpp	/^void ImGui::DebugNodeDrawCmdShowMeshAndBoundingBox(ImGuiWindow*, const ImDrawList*, const ImDraw/;"	f	class:ImGui	typeref:typename:void
DebugNodeDrawList	interface/imgui.cpp	/^void ImGui::DebugNodeDrawList(ImGuiWindow* window, const ImDrawList* draw_list, const char* labe/;"	f	class:ImGui	typeref:typename:void
DebugNodeDrawList	interface/imgui.cpp	/^void ImGui::DebugNodeDrawList(ImGuiWindow*, ImDrawList*, const char*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeStorage	interface/imgui.cpp	/^void ImGui::DebugNodeStorage(ImGuiStorage* storage, const char* label)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeStorage	interface/imgui.cpp	/^void ImGui::DebugNodeStorage(ImGuiStorage*, const char*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeTabBar	interface/imgui.cpp	/^void ImGui::DebugNodeTabBar(ImGuiTabBar* tab_bar, const char* label)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeTabBar	interface/imgui.cpp	/^void ImGui::DebugNodeTabBar(ImGuiTabBar*, const char*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeWindow	interface/imgui.cpp	/^void ImGui::DebugNodeWindow(ImGuiWindow* window, const char* label)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeWindow	interface/imgui.cpp	/^void ImGui::DebugNodeWindow(ImGuiWindow*, const char*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeWindowSettings	interface/imgui.cpp	/^void ImGui::DebugNodeWindowSettings(ImGuiWindowSettings* settings)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeWindowSettings	interface/imgui.cpp	/^void ImGui::DebugNodeWindowSettings(ImGuiWindowSettings*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeWindowsList	interface/imgui.cpp	/^void ImGui::DebugNodeWindowsList(ImVector<ImGuiWindow*>* windows, const char* label)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeWindowsList	interface/imgui.cpp	/^void ImGui::DebugNodeWindowsList(ImVector<ImGuiWindow*>*, const char*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugStartItemPicker	interface/imgui_internal.h	/^    inline void             DebugStartItemPicker()                                  { ImGuiConte/;"	f	namespace:ImGui	typeref:typename:void
DeclColumns	interface/imgui_widgets.cpp	/^float ImGuiMenuColumns::DeclColumns(float w0, float w1, float w2) \/\/ not using va_arg because /;"	f	class:ImGuiMenuColumns	typeref:typename:float
Decode85	interface/imgui_draw.cpp	/^static void         Decode85(const unsigned char* src, unsigned char* dst)$/;"	f	typeref:typename:void	file:
Decode85Byte	interface/imgui_draw.cpp	/^static unsigned int Decode85Byte(char c)                                    { return c >= '\\\\'/;"	f	typeref:typename:unsigned int	file:
DeleteChars	interface/imgui_widgets.cpp	/^void ImGuiInputTextCallbackData::DeleteChars(int pos, int bytes_count)$/;"	f	class:ImGuiInputTextCallbackData	typeref:typename:void
Delivery	interface/imgui.h	/^    bool            Delivery;           \/\/ Set when AcceptDragDropPayload() was called and mou/;"	m	struct:ImGuiPayload	typeref:typename:bool
DeltaTime	interface/imgui.h	/^    float       DeltaTime;                      \/\/ = 1.0f\/60.0f     \/\/ Time elapsed since l/;"	m	struct:ImGuiIO	typeref:typename:float
Descent	interface/imgui.h	/^    float                       Ascent, Descent;    \/\/ 4+4   \/\/ out \/\/            \/\/ Asc/;"	m	struct:ImFont	typeref:typename:float
DescriptorPool	interface/imgui_impl_vulkan.h	/^    VkDescriptorPool    DescriptorPool;$/;"	m	struct:ImGui_ImplVulkan_InitInfo	typeref:typename:VkDescriptorPool
DesiredSize	interface/imgui.h	/^    ImVec2  DesiredSize;    \/\/ Read-write.  Desired size, based on user's mouse position. Writ/;"	m	struct:ImGuiSizeCallbackData	typeref:typename:ImVec2
DestroyContext	interface/imgui.cpp	/^void ImGui::DestroyContext(ImGuiContext* ctx)$/;"	f	class:ImGui	typeref:typename:void
Device	interface/imgui_impl_vulkan.h	/^    VkDevice            Device;$/;"	m	struct:ImGui_ImplVulkan_InitInfo	typeref:typename:VkDevice
DimBgRatio	interface/imgui_internal.h	/^    float                   DimBgRatio;                         \/\/ 0.0..1.0 animation when fad/;"	m	struct:ImGuiContext	typeref:typename:float
DirtyLookupTables	interface/imgui.h	/^    bool                        DirtyLookupTables;  \/\/ 1     \/\/ out \/\/$/;"	m	struct:ImFont	typeref:typename:bool
DisplayEnd	interface/imgui.h	/^    int     DisplayEnd;$/;"	m	struct:ImGuiListClipper	typeref:typename:int
DisplayFramebufferScale	interface/imgui.h	/^    ImVec2      DisplayFramebufferScale;        \/\/ = (1, 1)         \/\/ For retina display or/;"	m	struct:ImGuiIO	typeref:typename:ImVec2
DisplayPos	interface/imgui.h	/^    ImVec2          DisplayPos;             \/\/ Upper-left position of the viewport to render (/;"	m	struct:ImDrawData	typeref:typename:ImVec2
DisplaySafeAreaPadding	interface/imgui.h	/^    ImVec2      DisplaySafeAreaPadding;     \/\/ If you cannot see the edges of your screen (e.g/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
DisplaySize	interface/imgui.h	/^    ImVec2          DisplaySize;            \/\/ Size of the viewport to render (== io.DisplaySi/;"	m	struct:ImDrawData	typeref:typename:ImVec2
DisplaySize	interface/imgui.h	/^    ImVec2      DisplaySize;                    \/\/ <unset>          \/\/ Main display size, in/;"	m	struct:ImGuiIO	typeref:typename:ImVec2
DisplayStart	interface/imgui.h	/^    int     DisplayStart;$/;"	m	struct:ImGuiListClipper	typeref:typename:int
DisplayWindowPadding	interface/imgui.h	/^    ImVec2      DisplayWindowPadding;       \/\/ Window position are clamped to be visible withi/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
DistAxial	interface/imgui_internal.h	/^    float           DistAxial;$/;"	m	struct:ImGuiNavMoveResult	typeref:typename:float
DistBox	interface/imgui_internal.h	/^    float           DistBox;            \/\/ Best candidate box distance to current NavId$/;"	m	struct:ImGuiNavMoveResult	typeref:typename:float
DistCenter	interface/imgui_internal.h	/^    float           DistCenter;         \/\/ Best candidate center distance to current NavId$/;"	m	struct:ImGuiNavMoveResult	typeref:typename:float
DragBehavior	interface/imgui_widgets.cpp	/^bool ImGui::DragBehavior(ImGuiID id, ImGuiDataType data_type, void* p_v, float v_speed, const vo/;"	f	class:ImGui	typeref:typename:bool
DragBehaviorT	interface/imgui_widgets.cpp	/^bool ImGui::DragBehaviorT(ImGuiDataType data_type, TYPE* v, float v_speed, const TYPE v_min, con/;"	f	class:ImGui	typeref:typename:bool
DragCurrentAccum	interface/imgui_internal.h	/^    float                   DragCurrentAccum;                   \/\/ Accumulator for dragging mo/;"	m	struct:ImGuiContext	typeref:typename:float
DragCurrentAccumDirty	interface/imgui_internal.h	/^    bool                    DragCurrentAccumDirty;$/;"	m	struct:ImGuiContext	typeref:typename:bool
DragDropAcceptFlags	interface/imgui_internal.h	/^    ImGuiDragDropFlags      DragDropAcceptFlags;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDragDropFlags
DragDropAcceptFrameCount	interface/imgui_internal.h	/^    int                     DragDropAcceptFrameCount;           \/\/ Last time a target expresse/;"	m	struct:ImGuiContext	typeref:typename:int
DragDropAcceptIdCurr	interface/imgui_internal.h	/^    ImGuiID                 DragDropAcceptIdCurr;               \/\/ Target item id (set at the /;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DragDropAcceptIdCurrRectSurface	interface/imgui_internal.h	/^    float                   DragDropAcceptIdCurrRectSurface;    \/\/ Target item surface (we res/;"	m	struct:ImGuiContext	typeref:typename:float
DragDropAcceptIdPrev	interface/imgui_internal.h	/^    ImGuiID                 DragDropAcceptIdPrev;               \/\/ Target item id from previou/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DragDropActive	interface/imgui_internal.h	/^    bool                    DragDropActive;$/;"	m	struct:ImGuiContext	typeref:typename:bool
DragDropHoldJustPressedId	interface/imgui_internal.h	/^    ImGuiID                 DragDropHoldJustPressedId;          \/\/ Set when holding a payload /;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DragDropMouseButton	interface/imgui_internal.h	/^    int                     DragDropMouseButton;$/;"	m	struct:ImGuiContext	typeref:typename:int
DragDropPayload	interface/imgui_internal.h	/^    ImGuiPayload            DragDropPayload;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiPayload
DragDropPayloadBufHeap	interface/imgui_internal.h	/^    ImVector<unsigned char> DragDropPayloadBufHeap;             \/\/ We don't expose the ImVecto/;"	m	struct:ImGuiContext	typeref:typename:ImVector<unsigned char>
DragDropPayloadBufLocal	interface/imgui_internal.h	/^    unsigned char           DragDropPayloadBufLocal[16];        \/\/ Local buffer for small payl/;"	m	struct:ImGuiContext	typeref:typename:unsigned char[16]
DragDropSourceFlags	interface/imgui_internal.h	/^    ImGuiDragDropFlags      DragDropSourceFlags;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDragDropFlags
DragDropSourceFrameCount	interface/imgui_internal.h	/^    int                     DragDropSourceFrameCount;$/;"	m	struct:ImGuiContext	typeref:typename:int
DragDropTargetId	interface/imgui_internal.h	/^    ImGuiID                 DragDropTargetId;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DragDropTargetRect	interface/imgui_internal.h	/^    ImRect                  DragDropTargetRect;                 \/\/ Store rectangle of current /;"	m	struct:ImGuiContext	typeref:typename:ImRect
DragDropWithinSource	interface/imgui_internal.h	/^    bool                    DragDropWithinSource;               \/\/ Set when within a BeginDrag/;"	m	struct:ImGuiContext	typeref:typename:bool
DragDropWithinTarget	interface/imgui_internal.h	/^    bool                    DragDropWithinTarget;               \/\/ Set when within a BeginDrag/;"	m	struct:ImGuiContext	typeref:typename:bool
DragFloat	interface/imgui.h	/^    static inline bool  DragFloat(const char* label, float* v, float v_speed, float v_min, float/;"	f	namespace:ImGui	typeref:typename:bool
DragFloat	interface/imgui_widgets.cpp	/^bool ImGui::DragFloat(const char* label, float* v, float v_speed, float v_min, float v_max, cons/;"	f	class:ImGui	typeref:typename:bool
DragFloat2	interface/imgui.h	/^    static inline bool  DragFloat2(const char* label, float v[2], float v_speed, float v_min, fl/;"	f	namespace:ImGui	typeref:typename:bool
DragFloat2	interface/imgui_widgets.cpp	/^bool ImGui::DragFloat2(const char* label, float v[2], float v_speed, float v_min, float v_max, c/;"	f	class:ImGui	typeref:typename:bool
DragFloat3	interface/imgui.h	/^    static inline bool  DragFloat3(const char* label, float v[3], float v_speed, float v_min, fl/;"	f	namespace:ImGui	typeref:typename:bool
DragFloat3	interface/imgui_widgets.cpp	/^bool ImGui::DragFloat3(const char* label, float v[3], float v_speed, float v_min, float v_max, c/;"	f	class:ImGui	typeref:typename:bool
DragFloat4	interface/imgui.h	/^    static inline bool  DragFloat4(const char* label, float v[4], float v_speed, float v_min, fl/;"	f	namespace:ImGui	typeref:typename:bool
DragFloat4	interface/imgui_widgets.cpp	/^bool ImGui::DragFloat4(const char* label, float v[4], float v_speed, float v_min, float v_max, c/;"	f	class:ImGui	typeref:typename:bool
DragFloatRange2	interface/imgui_widgets.cpp	/^bool ImGui::DragFloatRange2(const char* label, float* v_current_min, float* v_current_max, float/;"	f	class:ImGui	typeref:typename:bool
DragInt	interface/imgui_widgets.cpp	/^bool ImGui::DragInt(const char* label, int* v, float v_speed, int v_min, int v_max, const char* /;"	f	class:ImGui	typeref:typename:bool
DragInt2	interface/imgui_widgets.cpp	/^bool ImGui::DragInt2(const char* label, int v[2], float v_speed, int v_min, int v_max, const cha/;"	f	class:ImGui	typeref:typename:bool
DragInt3	interface/imgui_widgets.cpp	/^bool ImGui::DragInt3(const char* label, int v[3], float v_speed, int v_min, int v_max, const cha/;"	f	class:ImGui	typeref:typename:bool
DragInt4	interface/imgui_widgets.cpp	/^bool ImGui::DragInt4(const char* label, int v[4], float v_speed, int v_min, int v_max, const cha/;"	f	class:ImGui	typeref:typename:bool
DragIntRange2	interface/imgui_widgets.cpp	/^bool ImGui::DragIntRange2(const char* label, int* v_current_min, int* v_current_max, float v_spe/;"	f	class:ImGui	typeref:typename:bool
DragScalar	interface/imgui_widgets.cpp	/^bool ImGui::DragScalar(const char* label, ImGuiDataType data_type, void* p_data, float v_speed, /;"	f	class:ImGui	typeref:typename:bool
DragScalarN	interface/imgui_widgets.cpp	/^bool ImGui::DragScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components/;"	f	class:ImGui	typeref:typename:bool
DragSpeedDefaultRatio	interface/imgui_internal.h	/^    float                   DragSpeedDefaultRatio;              \/\/ If speed == 0.0f, uses (max/;"	m	struct:ImGuiContext	typeref:typename:float
Draw	interface/imgui.cpp	/^bool ImGuiTextFilter::Draw(const char* label, float width)$/;"	f	class:ImGuiTextFilter	typeref:typename:bool
DrawData	interface/imgui_internal.h	/^    ImDrawData              DrawData;                           \/\/ Main ImDrawData instance to/;"	m	struct:ImGuiContext	typeref:typename:ImDrawData
DrawDataBuilder	interface/imgui_internal.h	/^    ImDrawDataBuilder       DrawDataBuilder;$/;"	m	struct:ImGuiContext	typeref:typename:ImDrawDataBuilder
DrawList	interface/imgui_internal.h	/^    ImDrawList*             DrawList;                           \/\/ == &DrawListInst (for backw/;"	m	struct:ImGuiWindow	typeref:typename:ImDrawList *
DrawListInst	interface/imgui_internal.h	/^    ImDrawList              DrawListInst;$/;"	m	struct:ImGuiWindow	typeref:typename:ImDrawList
DrawListSharedData	interface/imgui_internal.h	/^    ImDrawListSharedData    DrawListSharedData;$/;"	m	struct:ImGuiContext	typeref:typename:ImDrawListSharedData
DstFont	interface/imgui.h	/^    ImFont*         DstFont;$/;"	m	struct:ImFontConfig	typeref:typename:ImFont *
DstIndex	interface/imgui_draw.cpp	/^    int                 DstIndex;           \/\/ Index into atlas->Fonts[] and dst_tmp_array[]$/;"	m	struct:ImFontBuildSrcData	typeref:typename:int	file:
Dummy	interface/imgui_widgets.cpp	/^void ImGui::Dummy(const ImVec2& size)$/;"	f	class:ImGui	typeref:typename:void
Edited	interface/imgui_internal.h	/^    bool                    Edited;                 \/\/ edited this frame$/;"	m	struct:ImGuiInputTextState	typeref:typename:bool
ElemCount	interface/imgui.h	/^    unsigned int    ElemCount;          \/\/ 4    \/\/ Number of indices (multiple of 3) to be r/;"	m	struct:ImDrawCmd	typeref:typename:unsigned int
EllipsisChar	interface/imgui.h	/^    ImWchar                     EllipsisChar;       \/\/ 2     \/\/ out \/\/ = -1       \/\/ Cha/;"	m	struct:ImFont	typeref:typename:ImWchar
EllipsisChar	interface/imgui.h	/^    ImWchar         EllipsisChar;           \/\/ -1       \/\/ Explicitly specify unicode codepo/;"	m	struct:ImFontConfig	typeref:typename:ImWchar
EmitItem	interface/imgui_internal.h	/^    bool        EmitItem;$/;"	m	struct:ImGuiGroupData	typeref:typename:bool
EmptyString	interface/imgui.cpp	/^char ImGuiTextBuffer::EmptyString[1] = { 0 };$/;"	m	class:ImGuiTextBuffer	typeref:typename:char[1]
EmptyString	interface/imgui.h	/^    IMGUI_API static char EmptyString[1];$/;"	m	struct:ImGuiTextBuffer	typeref:typename:IMGUI_API char[1]
End	interface/imgui.cpp	/^void ImGui::End()$/;"	f	class:ImGui	typeref:typename:void
End	interface/imgui.cpp	/^void ImGuiListClipper::End()$/;"	f	class:ImGuiListClipper	typeref:typename:void
EndChild	interface/imgui.cpp	/^void ImGui::EndChild()$/;"	f	class:ImGui	typeref:typename:void
EndChildFrame	interface/imgui.cpp	/^void ImGui::EndChildFrame()$/;"	f	class:ImGui	typeref:typename:void
EndColumns	interface/imgui_widgets.cpp	/^void ImGui::EndColumns()$/;"	f	class:ImGui	typeref:typename:void
EndCombo	interface/imgui_widgets.cpp	/^void ImGui::EndCombo()$/;"	f	class:ImGui	typeref:typename:void
EndDragDropSource	interface/imgui.cpp	/^void ImGui::EndDragDropSource()$/;"	f	class:ImGui	typeref:typename:void
EndDragDropTarget	interface/imgui.cpp	/^void ImGui::EndDragDropTarget()$/;"	f	class:ImGui	typeref:typename:void
EndFrame	interface/imgui.cpp	/^void ImGui::EndFrame()$/;"	f	class:ImGui	typeref:typename:void
EndGroup	interface/imgui.cpp	/^void ImGui::EndGroup()$/;"	f	class:ImGui	typeref:typename:void
EndMainMenuBar	interface/imgui_widgets.cpp	/^void ImGui::EndMainMenuBar()$/;"	f	class:ImGui	typeref:typename:void
EndMenu	interface/imgui_widgets.cpp	/^void ImGui::EndMenu()$/;"	f	class:ImGui	typeref:typename:void
EndMenuBar	interface/imgui_widgets.cpp	/^void ImGui::EndMenuBar()$/;"	f	class:ImGui	typeref:typename:void
EndPopup	interface/imgui.cpp	/^void ImGui::EndPopup()$/;"	f	class:ImGui	typeref:typename:void
EndTabBar	interface/imgui_widgets.cpp	/^void    ImGui::EndTabBar()$/;"	f	class:ImGui	typeref:typename:void
EndTabItem	interface/imgui_widgets.cpp	/^void    ImGui::EndTabItem()$/;"	f	class:ImGui	typeref:typename:void
EndTooltip	interface/imgui.cpp	/^void ImGui::EndTooltip()$/;"	f	class:ImGui	typeref:typename:void
ErrorCheckBeginEndCompareStacksSize	interface/imgui.cpp	/^static void ImGui::ErrorCheckBeginEndCompareStacksSize(ImGuiWindow* window, bool write)$/;"	f	class:ImGui	typeref:typename:void	file:
ErrorCheckEndFrameSanityChecks	interface/imgui.cpp	/^static void ImGui::ErrorCheckEndFrameSanityChecks()$/;"	f	class:ImGui	typeref:typename:void	file:
ErrorCheckNewFrameSanityChecks	interface/imgui.cpp	/^static void ImGui::ErrorCheckNewFrameSanityChecks()$/;"	f	class:ImGui	typeref:typename:void	file:
EventChar	interface/imgui.h	/^    ImWchar             EventChar;      \/\/ Character input                      \/\/ Read-writ/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:ImWchar
EventFlag	interface/imgui.h	/^    ImGuiInputTextFlags EventFlag;      \/\/ One ImGuiInputTextFlags_Callback*    \/\/ Read-only$/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:ImGuiInputTextFlags
EventKey	interface/imgui.h	/^    ImGuiKey            EventKey;       \/\/ Key pressed (Up\/Down\/TAB)            \/\/ Read-on/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:ImGuiKey
Expand	interface/imgui_internal.h	/^    void        Expand(const ImVec2& amount)        { Min.x -= amount.x; Min.y -= amount.y; Max./;"	f	struct:ImRect	typeref:typename:void
Expand	interface/imgui_internal.h	/^    void        Expand(const float amount)          { Min.x -= amount;   Min.y -= amount;   Max./;"	f	struct:ImRect	typeref:typename:void
FAST_INTERRUPT	arm.hpp	/^            FAST_INTERRUPT,$/;"	e	enum:Cpu::Interrupt
FIQ	arm.hpp	/^            FIQ,$/;"	e	enum:Cpu::Mode
FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA	interface/imgui_draw.cpp	/^static const ImVec2 FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA[ImGuiMouseCursor_COUNT][3] =$/;"	v	typeref:typename:const ImVec2[][3]	file:
FONT_ATLAS_DEFAULT_TEX_DATA_H	interface/imgui_draw.cpp	/^const int FONT_ATLAS_DEFAULT_TEX_DATA_H = 27;$/;"	v	typeref:typename:const int
FONT_ATLAS_DEFAULT_TEX_DATA_PIXELS	interface/imgui_draw.cpp	/^static const char FONT_ATLAS_DEFAULT_TEX_DATA_PIXELS[FONT_ATLAS_DEFAULT_TEX_DATA_W * FONT_ATLAS_/;"	v	typeref:typename:const char[]	file:
FONT_ATLAS_DEFAULT_TEX_DATA_W	interface/imgui_draw.cpp	/^const int FONT_ATLAS_DEFAULT_TEX_DATA_W = 108; \/\/ Actual texture will be 2 times that + 1 spac/;"	v	typeref:typename:const int
FallbackAdvanceX	interface/imgui.h	/^    float                       FallbackAdvanceX;   \/\/ 4     \/\/ out \/\/ = FallbackGlyph->Ad/;"	m	struct:ImFont	typeref:typename:float
FallbackChar	interface/imgui.h	/^    ImWchar                     FallbackChar;       \/\/ 2     \/\/ in  \/\/ = '?'      \/\/ Rep/;"	m	struct:ImFont	typeref:typename:ImWchar
FallbackGlyph	interface/imgui.h	/^    const ImFontGlyph*          FallbackGlyph;      \/\/ 4-8   \/\/ out \/\/ = FindGlyph(FontFal/;"	m	struct:ImFont	typeref:typename:const ImFontGlyph *
Fence	interface/imgui_impl_vulkan.h	/^    VkFence             Fence;$/;"	m	struct:ImGui_ImplVulkanH_Frame	typeref:typename:VkFence
Filters	interface/imgui.h	/^    ImVector<ImGuiTextRange>Filters;$/;"	m	struct:ImGuiTextFilter	typeref:typename:ImVector<ImGuiTextRange>
FindBestWindowPosForPopup	interface/imgui.cpp	/^ImVec2 ImGui::FindBestWindowPosForPopup(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:ImVec2
FindBestWindowPosForPopupEx	interface/imgui.cpp	/^ImVec2 ImGui::FindBestWindowPosForPopupEx(const ImVec2& ref_pos, const ImVec2& size, ImGuiDir* l/;"	f	class:ImGui	typeref:typename:ImVec2
FindGlyph	interface/imgui_draw.cpp	/^const ImFontGlyph* ImFont::FindGlyph(ImWchar c) const$/;"	f	class:ImFont	typeref:typename:const ImFontGlyph *
FindGlyphNoFallback	interface/imgui_draw.cpp	/^const ImFontGlyph* ImFont::FindGlyphNoFallback(ImWchar c) const$/;"	f	class:ImFont	typeref:typename:const ImFontGlyph *
FindHoveredWindow	interface/imgui.cpp	/^static void FindHoveredWindow()$/;"	f	typeref:typename:void	file:
FindOrCreateColumns	interface/imgui_widgets.cpp	/^ImGuiColumns* ImGui::FindOrCreateColumns(ImGuiWindow* window, ImGuiID id)$/;"	f	class:ImGui	typeref:typename:ImGuiColumns *
FindOrCreateWindowSettings	interface/imgui.cpp	/^ImGuiWindowSettings* ImGui::FindOrCreateWindowSettings(const char* name)$/;"	f	class:ImGui	typeref:typename:ImGuiWindowSettings *
FindRenderedTextEnd	interface/imgui.cpp	/^const char* ImGui::FindRenderedTextEnd(const char* text, const char* text_end)$/;"	f	class:ImGui	typeref:typename:const char *
FindSettingsHandler	interface/imgui.cpp	/^ImGuiSettingsHandler* ImGui::FindSettingsHandler(const char* type_name)$/;"	f	class:ImGui	typeref:typename:ImGuiSettingsHandler *
FindWindowByID	interface/imgui.cpp	/^ImGuiWindow* ImGui::FindWindowByID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:ImGuiWindow *
FindWindowByName	interface/imgui.cpp	/^ImGuiWindow* ImGui::FindWindowByName(const char* name)$/;"	f	class:ImGui	typeref:typename:ImGuiWindow *
FindWindowFocusIndex	interface/imgui.cpp	/^static int ImGui::FindWindowFocusIndex(ImGuiWindow* window) \/\/ FIXME-OPT O(N)$/;"	f	class:ImGui	typeref:typename:int	file:
FindWindowNavFocusable	interface/imgui.cpp	/^static ImGuiWindow* FindWindowNavFocusable(int i_start, int i_stop, int dir) \/\/ FIXME-OPT O(N)$/;"	f	typeref:typename:ImGuiWindow *	file:
FindWindowSettings	interface/imgui.cpp	/^ImGuiWindowSettings* ImGui::FindWindowSettings(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:ImGuiWindowSettings *
Flag	arm.hpp	/^        enum class Flag : u8 {$/;"	g	class:Cpu	typeref:typename:u8
Flags	interface/imgui.h	/^    ImDrawListFlags         Flags;              \/\/ Flags, you may poke into these to adjust an/;"	m	struct:ImDrawList	typeref:typename:ImDrawListFlags
Flags	interface/imgui.h	/^    ImFontAtlasFlags            Flags;              \/\/ Build flags (see ImFontAtlasFlags_)$/;"	m	struct:ImFontAtlas	typeref:typename:ImFontAtlasFlags
Flags	interface/imgui.h	/^    ImGuiInputTextFlags Flags;          \/\/ What user passed to InputText()      \/\/ Read-only$/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:ImGuiInputTextFlags
Flags	interface/imgui_internal.h	/^    ImGuiColumnsFlags   Flags;              \/\/ Not exposed$/;"	m	struct:ImGuiColumnData	typeref:typename:ImGuiColumnsFlags
Flags	interface/imgui_internal.h	/^    ImGuiColumnsFlags   Flags;$/;"	m	struct:ImGuiColumns	typeref:typename:ImGuiColumnsFlags
Flags	interface/imgui_internal.h	/^    ImGuiNextItemDataFlags      Flags;$/;"	m	struct:ImGuiNextItemData	typeref:typename:ImGuiNextItemDataFlags
Flags	interface/imgui_internal.h	/^    ImGuiNextWindowDataFlags    Flags;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImGuiNextWindowDataFlags
Flags	interface/imgui_internal.h	/^    ImGuiTabBarFlags    Flags;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiTabBarFlags
Flags	interface/imgui_internal.h	/^    ImGuiTabItemFlags   Flags;$/;"	m	struct:ImGuiTabItem	typeref:typename:ImGuiTabItemFlags
Flags	interface/imgui_internal.h	/^    ImGuiWindowFlags        Flags;                              \/\/ See enum ImGuiWindowFlags_$/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindowFlags
FlattenIntoSingleLayer	interface/imgui.cpp	/^void ImDrawDataBuilder::FlattenIntoSingleLayer()$/;"	f	class:ImDrawDataBuilder	typeref:typename:void
Floor	interface/imgui_internal.h	/^    void        Floor()                             { Min.x = IM_FLOOR(Min.x); Min.y = IM_FLOOR(/;"	f	struct:ImRect	typeref:typename:void
FocusCounterRegular	interface/imgui_internal.h	/^    int                     FocusCounterRegular;    \/\/ (Legacy Focus\/Tabbing system) Sequenti/;"	m	struct:ImGuiWindowTempData	typeref:typename:int
FocusCounterTabStop	interface/imgui_internal.h	/^    int                     FocusCounterTabStop;    \/\/ (Legacy Focus\/Tabbing system) Same, bu/;"	m	struct:ImGuiWindowTempData	typeref:typename:int
FocusRequestCurrCounterRegular	interface/imgui_internal.h	/^    int                     FocusRequestCurrCounterRegular;     \/\/ Any item being requested fo/;"	m	struct:ImGuiContext	typeref:typename:int
FocusRequestCurrCounterTabStop	interface/imgui_internal.h	/^    int                     FocusRequestCurrCounterTabStop;     \/\/ Tab item being requested fo/;"	m	struct:ImGuiContext	typeref:typename:int
FocusRequestCurrWindow	interface/imgui_internal.h	/^    ImGuiWindow*            FocusRequestCurrWindow;             \/\/$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
FocusRequestNextCounterRegular	interface/imgui_internal.h	/^    int                     FocusRequestNextCounterRegular;     \/\/ Stored for next frame$/;"	m	struct:ImGuiContext	typeref:typename:int
FocusRequestNextCounterTabStop	interface/imgui_internal.h	/^    int                     FocusRequestNextCounterTabStop;     \/\/ "$/;"	m	struct:ImGuiContext	typeref:typename:int
FocusRequestNextWindow	interface/imgui_internal.h	/^    ImGuiWindow*            FocusRequestNextWindow;             \/\/$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
FocusScopeId	interface/imgui_internal.h	/^    ImGuiID                     FocusScopeId;   \/\/ Set by SetNextItemMultiSelectData() (!= 0 s/;"	m	struct:ImGuiNextItemData	typeref:typename:ImGuiID
FocusScopeId	interface/imgui_internal.h	/^    ImGuiID         FocusScopeId;       \/\/ Best candidate focus scope ID$/;"	m	struct:ImGuiNavMoveResult	typeref:typename:ImGuiID
FocusTabPressed	interface/imgui_internal.h	/^    bool                    FocusTabPressed;                    \/\/$/;"	m	struct:ImGuiContext	typeref:typename:bool
FocusTopMostWindowUnderOne	interface/imgui.cpp	/^void ImGui::FocusTopMostWindowUnderOne(ImGuiWindow* under_this_window, ImGuiWindow* ignore_windo/;"	f	class:ImGui	typeref:typename:void
FocusWindow	interface/imgui.cpp	/^void ImGui::FocusWindow(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
FocusableItemRegister	interface/imgui.cpp	/^bool ImGui::FocusableItemRegister(ImGuiWindow* window, ImGuiID id)$/;"	f	class:ImGui	typeref:typename:bool
FocusableItemUnregister	interface/imgui.cpp	/^void ImGui::FocusableItemUnregister(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
Font	interface/imgui.h	/^    ImFont*         Font;           \/\/ Input    \/\/ For custom font glyphs only: target font$/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:ImFont *
Font	interface/imgui_internal.h	/^    ImFont*                 Font;                               \/\/ (Shortcut) == FontStack.emp/;"	m	struct:ImGuiContext	typeref:typename:ImFont *
Font	interface/imgui_internal.h	/^    ImFont*         Font;                       \/\/ Current\/default font (optional, for simpli/;"	m	struct:ImDrawListSharedData	typeref:typename:ImFont *
FontAllowUserScaling	interface/imgui.h	/^    bool        FontAllowUserScaling;           \/\/ = false          \/\/ Allow user scaling te/;"	m	struct:ImGuiIO	typeref:typename:bool
FontAtlasOwnedByContext	interface/imgui_internal.h	/^    bool                    FontAtlasOwnedByContext;            \/\/ IO.Fonts-> is owned by the /;"	m	struct:ImGuiContext	typeref:typename:bool
FontBaseSize	interface/imgui_internal.h	/^    float                   FontBaseSize;                       \/\/ (Shortcut) == IO.FontGlobal/;"	m	struct:ImGuiContext	typeref:typename:float
FontData	interface/imgui.h	/^    void*           FontData;               \/\/          \/\/ TTF\/OTF data$/;"	m	struct:ImFontConfig	typeref:typename:void *
FontDataOwnedByAtlas	interface/imgui.h	/^    bool            FontDataOwnedByAtlas;   \/\/ true     \/\/ TTF\/OTF data ownership taken by /;"	m	struct:ImFontConfig	typeref:typename:bool
FontDataSize	interface/imgui.h	/^    int             FontDataSize;           \/\/          \/\/ TTF\/OTF data size$/;"	m	struct:ImFontConfig	typeref:typename:int
FontDefault	interface/imgui.h	/^    ImFont*     FontDefault;                    \/\/ = NULL           \/\/ Font to use on NewFra/;"	m	struct:ImGuiIO	typeref:typename:ImFont *
FontGlobalScale	interface/imgui.h	/^    float       FontGlobalScale;                \/\/ = 1.0f           \/\/ Global scale all font/;"	m	struct:ImGuiIO	typeref:typename:float
FontInfo	interface/imgui_draw.cpp	/^    stbtt_fontinfo      FontInfo;$/;"	m	struct:ImFontBuildSrcData	typeref:typename:stbtt_fontinfo	file:
FontNo	interface/imgui.h	/^    int             FontNo;                 \/\/ 0        \/\/ Index of font within TTF\/OTF fil/;"	m	struct:ImFontConfig	typeref:typename:int
FontSize	interface/imgui.h	/^    float                       FontSize;           \/\/ 4     \/\/ in  \/\/            \/\/ Hei/;"	m	struct:ImFont	typeref:typename:float
FontSize	interface/imgui_internal.h	/^    float                   FontSize;                           \/\/ (Shortcut) == FontBaseSize /;"	m	struct:ImGuiContext	typeref:typename:float
FontSize	interface/imgui_internal.h	/^    float           FontSize;                   \/\/ Current\/default font size (optional, for s/;"	m	struct:ImDrawListSharedData	typeref:typename:float
FontStack	interface/imgui_internal.h	/^    ImVector<ImFont*>       FontStack;                          \/\/ Stack for PushFont()\/PopFo/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImFont * >
FontWindowScale	interface/imgui_internal.h	/^    float                   FontWindowScale;                    \/\/ User scale multiplier per-w/;"	m	struct:ImGuiWindow	typeref:typename:float
Fonts	interface/imgui.h	/^    ImFontAtlas*Fonts;                          \/\/ <auto>           \/\/ Font atlas: load, ras/;"	m	struct:ImGuiIO	typeref:typename:ImFontAtlas *
Fonts	interface/imgui.h	/^    ImVector<ImFont*>           Fonts;              \/\/ Hold all the fonts returned by AddFont*/;"	m	struct:ImFontAtlas	typeref:typename:ImVector<ImFont * >
ForegroundDrawList	interface/imgui_internal.h	/^    ImDrawList              ForegroundDrawList;                 \/\/ Last draw list to be render/;"	m	struct:ImGuiContext	typeref:typename:ImDrawList
FrameBorderSize	interface/imgui.h	/^    float       FrameBorderSize;            \/\/ Thickness of border around frames. Generally se/;"	m	struct:ImGuiStyle	typeref:typename:float
FrameCount	interface/imgui_internal.h	/^    int                     FrameCount;$/;"	m	struct:ImGuiContext	typeref:typename:int
FrameCountEnded	interface/imgui_internal.h	/^    int                     FrameCountEnded;$/;"	m	struct:ImGuiContext	typeref:typename:int
FrameCountRendered	interface/imgui_internal.h	/^    int                     FrameCountRendered;$/;"	m	struct:ImGuiContext	typeref:typename:int
FrameIndex	interface/imgui_impl_vulkan.h	/^    uint32_t            FrameIndex;             \/\/ Current frame being rendered to (0 <= Frame/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:uint32_t
FramePadding	interface/imgui.h	/^    ImVec2      FramePadding;               \/\/ Padding within a framed rectangle (used by most/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
FramePadding	interface/imgui_internal.h	/^    ImVec2              FramePadding;           \/\/ style.FramePadding locked at the time of Be/;"	m	struct:ImGuiTabBar	typeref:typename:ImVec2
FrameRenderBuffers	interface/imgui_impl_vulkan.cpp	/^    ImGui_ImplVulkanH_FrameRenderBuffers*   FrameRenderBuffers;$/;"	m	struct:ImGui_ImplVulkanH_WindowRenderBuffers	typeref:typename:ImGui_ImplVulkanH_FrameRenderBuffers *	file:
FrameRounding	interface/imgui.h	/^    float       FrameRounding;              \/\/ Radius of frame corners rounding. Set to 0.0f t/;"	m	struct:ImGuiStyle	typeref:typename:float
FrameSemaphores	interface/imgui_impl_vulkan.h	/^    ImGui_ImplVulkanH_FrameSemaphores*  FrameSemaphores;$/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:ImGui_ImplVulkanH_FrameSemaphores *
Framebuffer	interface/imgui_impl_vulkan.h	/^    VkFramebuffer       Framebuffer;$/;"	m	struct:ImGui_ImplVulkanH_Frame	typeref:typename:VkFramebuffer
FramebufferScale	interface/imgui.h	/^    ImVec2          FramebufferScale;       \/\/ Amount of pixels for each unit of DisplaySize. /;"	m	struct:ImDrawData	typeref:typename:ImVec2
Framerate	interface/imgui.h	/^    float       Framerate;                      \/\/ Application framerate estimate, in frame pe/;"	m	struct:ImGuiIO	typeref:typename:float
FramerateSecPerFrame	interface/imgui_internal.h	/^    float                   FramerateSecPerFrame[120];          \/\/ Calculate estimate of frame/;"	m	struct:ImGuiContext	typeref:typename:float[120]
FramerateSecPerFrameAccum	interface/imgui_internal.h	/^    float                   FramerateSecPerFrameAccum;$/;"	m	struct:ImGuiContext	typeref:typename:float
FramerateSecPerFrameIdx	interface/imgui_internal.h	/^    int                     FramerateSecPerFrameIdx;$/;"	m	struct:ImGuiContext	typeref:typename:int
Frames	interface/imgui_impl_vulkan.h	/^    ImGui_ImplVulkanH_Frame*            Frames;$/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:ImGui_ImplVulkanH_Frame *
FreeIdx	interface/imgui_internal.h	/^    ImPoolIdx       FreeIdx;    \/\/ Next free idx to use$/;"	m	struct:ImPool	typeref:typename:ImPoolIdx
FreeWrapper	interface/imgui.cpp	/^static void    FreeWrapper(void* ptr, void* user_data)        { IM_UNUSED(user_data); IM_UNUSED(/;"	f	typeref:typename:void	file:
FreeWrapper	interface/imgui.cpp	/^static void    FreeWrapper(void* ptr, void* user_data)        { IM_UNUSED(user_data); free(ptr);/;"	f	typeref:typename:void	file:
Funcs	interface/imgui.cpp	/^    struct Funcs$/;"	s	function:ImGui::ShowMetricsWindow	file:
GCrc32LookupTable	interface/imgui.cpp	/^static const ImU32 GCrc32LookupTable[256] =$/;"	v	typeref:typename:const ImU32[256]	file:
GDataTypeInfo	interface/imgui_widgets.cpp	/^static const ImGuiDataTypeInfo GDataTypeInfo[] =$/;"	v	typeref:typename:const ImGuiDataTypeInfo[]	file:
GImAllocatorAllocFunc	interface/imgui.cpp	/^static void*  (*GImAllocatorAllocFunc)(size_t size, void* user_data) = MallocWrapper;$/;"	v	typeref:typename:void * (*)(size_t size,void * user_data)	file:
GImAllocatorFreeFunc	interface/imgui.cpp	/^static void   (*GImAllocatorFreeFunc)(void* ptr, void* user_data) = FreeWrapper;$/;"	v	typeref:typename:void (*)(void * ptr,void * user_data)	file:
GImAllocatorUserData	interface/imgui.cpp	/^static void*    GImAllocatorUserData = NULL;$/;"	v	typeref:typename:void *	file:
GImGui	interface/imgui.cpp	/^ImGuiContext*   GImGui = NULL;$/;"	v	typeref:typename:ImGuiContext *
GStyleVarInfo	interface/imgui.cpp	/^static const ImGuiStyleVarInfo GStyleVarInfo[] =$/;"	v	typeref:typename:const ImGuiStyleVarInfo[]	file:
GcAwakeTransientWindowBuffers	interface/imgui.cpp	/^void ImGui::GcAwakeTransientWindowBuffers(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
GcCompactTransientWindowBuffers	interface/imgui.cpp	/^void ImGui::GcCompactTransientWindowBuffers(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
GetActiveID	interface/imgui_internal.h	/^    inline ImGuiID          GetActiveID()   { ImGuiContext& g = *GImGui; return g.ActiveId; }$/;"	f	namespace:ImGui	typeref:typename:ImGuiID
GetBL	interface/imgui_internal.h	/^    ImVec2      GetBL() const                       { return ImVec2(Min.x, Max.y); }  \/\/ Botto/;"	f	struct:ImRect	typeref:typename:ImVec2
GetBR	interface/imgui_internal.h	/^    ImVec2      GetBR() const                       { return Max; }                   \/\/ Botto/;"	f	struct:ImRect	typeref:typename:ImVec2
GetBackgroundDrawList	interface/imgui.cpp	/^ImDrawList* ImGui::GetBackgroundDrawList()$/;"	f	class:ImGui	typeref:typename:ImDrawList *
GetBit	interface/imgui.h	/^    inline bool     GetBit(size_t n) const  { int off = (int)(n >> 5); ImU32 mask = 1u << (n & 3/;"	f	struct:ImFontGlyphRangesBuilder	typeref:typename:bool
GetBool	interface/imgui.cpp	/^bool ImGuiStorage::GetBool(ImGuiID key, bool default_val) const$/;"	f	class:ImGuiStorage	typeref:typename:bool
GetBoolRef	interface/imgui.cpp	/^bool* ImGuiStorage::GetBoolRef(ImGuiID key, bool default_val)$/;"	f	class:ImGuiStorage	typeref:typename:bool *
GetByIndex	interface/imgui_internal.h	/^    T*          GetByIndex(ImPoolIdx n)             { return &Buf[n]; }$/;"	f	struct:ImPool	typeref:typename:T *
GetByKey	interface/imgui_internal.h	/^    T*          GetByKey(ImGuiID key)               { int idx = Map.GetInt(key, -1); return (idx/;"	f	struct:ImPool	typeref:typename:T *
GetCenter	interface/imgui_internal.h	/^    ImVec2      GetCenter() const                   { return ImVec2((Min.x + Max.x) * 0.5f, (Min/;"	f	struct:ImRect	typeref:typename:ImVec2
GetCharAdvance	interface/imgui.h	/^    float                       GetCharAdvance(ImWchar c) const     { return ((int)c < IndexAdva/;"	f	struct:ImFont	typeref:typename:float
GetClipRectMax	interface/imgui.h	/^    inline ImVec2   GetClipRectMax() const { const ImVec4& cr = _ClipRectStack.back(); return Im/;"	f	struct:ImDrawList	typeref:typename:ImVec2
GetClipRectMin	interface/imgui.h	/^    inline ImVec2   GetClipRectMin() const { const ImVec4& cr = _ClipRectStack.back(); return Im/;"	f	struct:ImDrawList	typeref:typename:ImVec2
GetClipboardText	interface/imgui.cpp	/^const char* ImGui::GetClipboardText()$/;"	f	class:ImGui	typeref:typename:const char *
GetClipboardTextFn	interface/imgui.h	/^    const char* (*GetClipboardTextFn)(void* user_data);$/;"	m	struct:ImGuiIO	typeref:typename:const char * (*)(void * user_data)
GetClipboardTextFn_DefaultImpl	interface/imgui.cpp	/^static const char* GetClipboardTextFn_DefaultImpl(void*)$/;"	f	typeref:typename:const char *	file:
GetColorU32	interface/imgui.cpp	/^ImU32 ImGui::GetColorU32(ImGuiCol idx, float alpha_mul)$/;"	f	class:ImGui	typeref:typename:ImU32
GetColorU32	interface/imgui.cpp	/^ImU32 ImGui::GetColorU32(ImU32 col)$/;"	f	class:ImGui	typeref:typename:ImU32
GetColorU32	interface/imgui.cpp	/^ImU32 ImGui::GetColorU32(const ImVec4& col)$/;"	f	class:ImGui	typeref:typename:ImU32
GetColumnIndex	interface/imgui_widgets.cpp	/^int ImGui::GetColumnIndex()$/;"	f	class:ImGui	typeref:typename:int
GetColumnNormFromOffset	interface/imgui_widgets.cpp	/^float ImGui::GetColumnNormFromOffset(const ImGuiColumns* columns, float offset)$/;"	f	class:ImGui	typeref:typename:float
GetColumnOffset	interface/imgui_widgets.cpp	/^float ImGui::GetColumnOffset(int column_index)$/;"	f	class:ImGui	typeref:typename:float
GetColumnOffsetFromNorm	interface/imgui_widgets.cpp	/^float ImGui::GetColumnOffsetFromNorm(const ImGuiColumns* columns, float offset_norm)$/;"	f	class:ImGui	typeref:typename:float
GetColumnWidth	interface/imgui_widgets.cpp	/^float ImGui::GetColumnWidth(int column_index)$/;"	f	class:ImGui	typeref:typename:float
GetColumnWidthEx	interface/imgui_widgets.cpp	/^static float GetColumnWidthEx(ImGuiColumns* columns, int column_index, bool before_resize = fals/;"	f	typeref:typename:float	file:
GetColumnsCount	interface/imgui_widgets.cpp	/^int ImGui::GetColumnsCount()$/;"	f	class:ImGui	typeref:typename:int
GetColumnsID	interface/imgui_widgets.cpp	/^ImGuiID ImGui::GetColumnsID(const char* str_id, int columns_count)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetContentRegionAvail	interface/imgui.cpp	/^ImVec2 ImGui::GetContentRegionAvail()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetContentRegionAvailWidth	interface/imgui.h	/^    static inline float GetContentRegionAvailWidth()          { return GetContentRegionAvail().x/;"	f	namespace:ImGui	typeref:typename:float
GetContentRegionMax	interface/imgui.cpp	/^ImVec2 ImGui::GetContentRegionMax()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetContentRegionMaxAbs	interface/imgui.cpp	/^ImVec2 ImGui::GetContentRegionMaxAbs()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetCurrentContext	interface/imgui.cpp	/^ImGuiContext* ImGui::GetCurrentContext()$/;"	f	class:ImGui	typeref:typename:ImGuiContext *
GetCurrentWindow	interface/imgui_internal.h	/^    inline    ImGuiWindow*  GetCurrentWindow()          { ImGuiContext& g = *GImGui; g.CurrentWi/;"	f	namespace:ImGui	typeref:typename:ImGuiWindow *
GetCurrentWindowRead	interface/imgui_internal.h	/^    inline    ImGuiWindow*  GetCurrentWindowRead()      { ImGuiContext& g = *GImGui; return g.Cu/;"	f	namespace:ImGui	typeref:typename:ImGuiWindow *
GetCursorPos	interface/imgui.cpp	/^ImVec2 ImGui::GetCursorPos()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetCursorPosX	interface/imgui.cpp	/^float ImGui::GetCursorPosX()$/;"	f	class:ImGui	typeref:typename:float
GetCursorPosY	interface/imgui.cpp	/^float ImGui::GetCursorPosY()$/;"	f	class:ImGui	typeref:typename:float
GetCursorScreenPos	interface/imgui.cpp	/^ImVec2 ImGui::GetCursorScreenPos()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetCursorStartPos	interface/imgui.cpp	/^ImVec2 ImGui::GetCursorStartPos()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetCustomRectByIndex	interface/imgui.h	/^    ImFontAtlasCustomRect*      GetCustomRectByIndex(int index) { IM_ASSERT(index >= 0); return /;"	f	struct:ImFontAtlas	typeref:typename:ImFontAtlasCustomRect *
GetDebugName	interface/imgui.h	/^    const char*                 GetDebugName() const                { return ConfigData ? Config/;"	f	struct:ImFont	typeref:typename:const char *
GetDefaultCompressedFontDataTTFBase85	interface/imgui_draw.cpp	/^static const char* GetDefaultCompressedFontDataTTFBase85()$/;"	f	typeref:typename:const char *	file:
GetDefaultFont	interface/imgui_internal.h	/^    inline ImFont*          GetDefaultFont() { ImGuiContext& g = *GImGui; return g.IO.FontDefaul/;"	f	namespace:ImGui	typeref:typename:ImFont *
GetDragDropPayload	interface/imgui.cpp	/^const ImGuiPayload* ImGui::GetDragDropPayload()$/;"	f	class:ImGui	typeref:typename:const ImGuiPayload *
GetDraggedColumnOffset	interface/imgui_widgets.cpp	/^static float GetDraggedColumnOffset(ImGuiColumns* columns, int column_index)$/;"	f	typeref:typename:float	file:
GetDrawData	interface/imgui.cpp	/^ImDrawData* ImGui::GetDrawData()$/;"	f	class:ImGui	typeref:typename:ImDrawData *
GetDrawListSharedData	interface/imgui.cpp	/^ImDrawListSharedData* ImGui::GetDrawListSharedData()$/;"	f	class:ImGui	typeref:typename:ImDrawListSharedData *
GetFallbackWindowNameForWindowingList	interface/imgui.cpp	/^static const char* GetFallbackWindowNameForWindowingList(ImGuiWindow* window)$/;"	f	typeref:typename:const char *	file:
GetFloat	interface/imgui.cpp	/^float ImGuiStorage::GetFloat(ImGuiID key, float default_val) const$/;"	f	class:ImGuiStorage	typeref:typename:float
GetFloatRef	interface/imgui.cpp	/^float* ImGuiStorage::GetFloatRef(ImGuiID key, float default_val)$/;"	f	class:ImGuiStorage	typeref:typename:float *
GetFocusID	interface/imgui_internal.h	/^    inline ImGuiID          GetFocusID()    { ImGuiContext& g = *GImGui; return g.NavId; }$/;"	f	namespace:ImGui	typeref:typename:ImGuiID
GetFocusScopeID	interface/imgui_internal.h	/^    inline ImGuiID          GetFocusScopeID()               { ImGuiContext& g = *GImGui; return /;"	f	namespace:ImGui	typeref:typename:ImGuiID
GetFont	interface/imgui.cpp	/^ImFont* ImGui::GetFont()$/;"	f	class:ImGui	typeref:typename:ImFont *
GetFontSize	interface/imgui.cpp	/^float ImGui::GetFontSize()$/;"	f	class:ImGui	typeref:typename:float
GetFontTexUvWhitePixel	interface/imgui.cpp	/^ImVec2 ImGui::GetFontTexUvWhitePixel()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetForegroundDrawList	interface/imgui.cpp	/^ImDrawList* ImGui::GetForegroundDrawList()$/;"	f	class:ImGui	typeref:typename:ImDrawList *
GetForegroundDrawList	interface/imgui_internal.h	/^    inline ImDrawList*      GetForegroundDrawList(ImGuiWindow* window) { IM_UNUSED(window); ImGu/;"	f	namespace:ImGui	typeref:typename:ImDrawList *
GetFrameCount	interface/imgui.cpp	/^int ImGui::GetFrameCount()$/;"	f	class:ImGui	typeref:typename:int
GetFrameHeight	interface/imgui.cpp	/^float ImGui::GetFrameHeight()$/;"	f	class:ImGui	typeref:typename:float
GetFrameHeightWithSpacing	interface/imgui.cpp	/^float ImGui::GetFrameHeightWithSpacing()$/;"	f	class:ImGui	typeref:typename:float
GetGlyphRangesChineseFull	interface/imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesChineseFull()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesChineseSimplifiedCommon	interface/imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesChineseSimplifiedCommon()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesCyrillic	interface/imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesCyrillic()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesDefault	interface/imgui_draw.cpp	/^const ImWchar*   ImFontAtlas::GetGlyphRangesDefault()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesJapanese	interface/imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesJapanese()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesKorean	interface/imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesKorean()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesThai	interface/imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesThai()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesVietnamese	interface/imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesVietnamese()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetHeight	interface/imgui_internal.h	/^    float       GetHeight() const                   { return Max.y - Min.y; }$/;"	f	struct:ImRect	typeref:typename:float
GetHoveredID	interface/imgui.cpp	/^ImGuiID ImGui::GetHoveredID()$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetID	interface/imgui.cpp	/^ImGuiID ImGui::GetID(const char* str_id)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetID	interface/imgui.cpp	/^ImGuiID ImGui::GetID(const char* str_id_begin, const char* str_id_end)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetID	interface/imgui.cpp	/^ImGuiID ImGui::GetID(const void* ptr_id)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetID	interface/imgui.cpp	/^ImGuiID ImGuiWindow::GetID(const char* str, const char* str_end)$/;"	f	class:ImGuiWindow	typeref:typename:ImGuiID
GetID	interface/imgui.cpp	/^ImGuiID ImGuiWindow::GetID(const void* ptr)$/;"	f	class:ImGuiWindow	typeref:typename:ImGuiID
GetID	interface/imgui.cpp	/^ImGuiID ImGuiWindow::GetID(int n)$/;"	f	class:ImGuiWindow	typeref:typename:ImGuiID
GetIDFromRectangle	interface/imgui.cpp	/^ImGuiID ImGuiWindow::GetIDFromRectangle(const ImRect& r_abs)$/;"	f	class:ImGuiWindow	typeref:typename:ImGuiID
GetIDNoKeepAlive	interface/imgui.cpp	/^ImGuiID ImGuiWindow::GetIDNoKeepAlive(const char* str, const char* str_end)$/;"	f	class:ImGuiWindow	typeref:typename:ImGuiID
GetIDNoKeepAlive	interface/imgui.cpp	/^ImGuiID ImGuiWindow::GetIDNoKeepAlive(const void* ptr)$/;"	f	class:ImGuiWindow	typeref:typename:ImGuiID
GetIDNoKeepAlive	interface/imgui.cpp	/^ImGuiID ImGuiWindow::GetIDNoKeepAlive(int n)$/;"	f	class:ImGuiWindow	typeref:typename:ImGuiID
GetIDWithSeed	interface/imgui.cpp	/^ImGuiID ImGui::GetIDWithSeed(const char* str, const char* str_end, ImGuiID seed)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetIO	interface/imgui.cpp	/^ImGuiIO& ImGui::GetIO()$/;"	f	class:ImGui	typeref:typename:ImGuiIO &
GetIndex	interface/imgui_internal.h	/^    ImPoolIdx   GetIndex(const T* p) const          { IM_ASSERT(p >= Buf.Data && p < Buf.Data + /;"	f	struct:ImPool	typeref:typename:ImPoolIdx
GetInputTextState	interface/imgui_internal.h	/^    inline ImGuiInputTextState* GetInputTextState(ImGuiID id)   { ImGuiContext& g = *GImGui; ret/;"	f	namespace:ImGui	typeref:typename:ImGuiInputTextState *
GetInt	interface/imgui.cpp	/^int ImGuiStorage::GetInt(ImGuiID key, int default_val) const$/;"	f	class:ImGuiStorage	typeref:typename:int
GetIntRef	interface/imgui.cpp	/^int* ImGuiStorage::GetIntRef(ImGuiID key, int default_val)$/;"	f	class:ImGuiStorage	typeref:typename:int *
GetItemID	interface/imgui_internal.h	/^    inline ImGuiID          GetItemID()     { ImGuiContext& g = *GImGui; return g.CurrentWindow-/;"	f	namespace:ImGui	typeref:typename:ImGuiID
GetItemRectMax	interface/imgui.cpp	/^ImVec2 ImGui::GetItemRectMax()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetItemRectMin	interface/imgui.cpp	/^ImVec2 ImGui::GetItemRectMin()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetItemRectSize	interface/imgui.cpp	/^ImVec2 ImGui::GetItemRectSize()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetItemStatusFlags	interface/imgui_internal.h	/^    inline ImGuiItemStatusFlags GetItemStatusFlags() { ImGuiContext& g = *GImGui; return g.Curre/;"	f	namespace:ImGui	typeref:typename:ImGuiItemStatusFlags
GetKeyIndex	interface/imgui.cpp	/^int ImGui::GetKeyIndex(ImGuiKey imgui_key)$/;"	f	class:ImGui	typeref:typename:int
GetKeyPressedAmount	interface/imgui.cpp	/^int ImGui::GetKeyPressedAmount(int key_index, float repeat_delay, float repeat_rate)$/;"	f	class:ImGui	typeref:typename:int
GetMergedKeyModFlags	interface/imgui.cpp	/^ImGuiKeyModFlags ImGui::GetMergedKeyModFlags()$/;"	f	class:ImGui	typeref:typename:ImGuiKeyModFlags
GetMinimumStepAtDecimalPrecision	interface/imgui_widgets.cpp	/^static float GetMinimumStepAtDecimalPrecision(int decimal_precision)$/;"	f	typeref:typename:float	file:
GetMouseCursor	interface/imgui.cpp	/^ImGuiMouseCursor ImGui::GetMouseCursor()$/;"	f	class:ImGui	typeref:typename:ImGuiMouseCursor
GetMouseCursorTexData	interface/imgui_draw.cpp	/^bool ImFontAtlas::GetMouseCursorTexData(ImGuiMouseCursor cursor_type, ImVec2* out_offset, ImVec2/;"	f	class:ImFontAtlas	typeref:typename:bool
GetMouseDragDelta	interface/imgui.cpp	/^ImVec2 ImGui::GetMouseDragDelta(ImGuiMouseButton button, float lock_threshold)$/;"	f	class:ImGui	typeref:typename:ImVec2
GetMousePos	interface/imgui.cpp	/^ImVec2 ImGui::GetMousePos()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetMousePosOnOpeningCurrentPopup	interface/imgui.cpp	/^ImVec2 ImGui::GetMousePosOnOpeningCurrentPopup()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetName	interface/imgui_internal.h	/^    char* GetName()             { return (char*)(this + 1); }$/;"	f	struct:ImGuiWindowSettings	typeref:typename:char *
GetNavInputAmount	interface/imgui.cpp	/^float ImGui::GetNavInputAmount(ImGuiNavInput n, ImGuiInputReadMode mode)$/;"	f	class:ImGui	typeref:typename:float
GetNavInputAmount2d	interface/imgui.cpp	/^ImVec2 ImGui::GetNavInputAmount2d(ImGuiNavDirSourceFlags dir_sources, ImGuiInputReadMode mode, f/;"	f	class:ImGui	typeref:typename:ImVec2
GetOrAddByKey	interface/imgui_internal.h	/^    T*          GetOrAddByKey(ImGuiID key)          { int* p_idx = Map.GetIntRef(key, -1); if (*/;"	f	struct:ImPool	typeref:typename:T *
GetOverlayDrawList	interface/imgui.h	/^    static inline ImDrawList* GetOverlayDrawList()            { return GetForegroundDrawList(); /;"	f	namespace:ImGui	typeref:typename:ImDrawList *
GetRedoAvailCount	interface/imgui_internal.h	/^    int         GetRedoAvailCount() const   { return STB_TEXTEDIT_UNDOSTATECOUNT - Stb.undostate/;"	f	struct:ImGuiInputTextState	typeref:typename:int
GetResizeBorderRect	interface/imgui.cpp	/^static ImRect GetResizeBorderRect(ImGuiWindow* window, int border_n, float perp_padding, float t/;"	f	typeref:typename:ImRect	file:
GetScrollMaxX	interface/imgui.cpp	/^float ImGui::GetScrollMaxX()$/;"	f	class:ImGui	typeref:typename:float
GetScrollMaxY	interface/imgui.cpp	/^float ImGui::GetScrollMaxY()$/;"	f	class:ImGui	typeref:typename:float
GetScrollX	interface/imgui.cpp	/^float ImGui::GetScrollX()$/;"	f	class:ImGui	typeref:typename:float
GetScrollY	interface/imgui.cpp	/^float ImGui::GetScrollY()$/;"	f	class:ImGui	typeref:typename:float
GetSize	interface/imgui_internal.h	/^    ImVec2      GetSize() const                     { return ImVec2(Max.x - Min.x, Max.y - Min.y/;"	f	struct:ImRect	typeref:typename:ImVec2
GetSize	interface/imgui_internal.h	/^    int         GetSize() const                     { return Buf.Size; }$/;"	f	struct:ImPool	typeref:typename:int
GetStateStorage	interface/imgui.cpp	/^ImGuiStorage* ImGui::GetStateStorage()$/;"	f	class:ImGui	typeref:typename:ImGuiStorage *
GetStyle	interface/imgui.cpp	/^ImGuiStyle& ImGui::GetStyle()$/;"	f	class:ImGui	typeref:typename:ImGuiStyle &
GetStyleColorName	interface/imgui.cpp	/^const char* ImGui::GetStyleColorName(ImGuiCol idx)$/;"	f	class:ImGui	typeref:typename:const char *
GetStyleColorVec4	interface/imgui.cpp	/^const ImVec4& ImGui::GetStyleColorVec4(ImGuiCol idx)$/;"	f	class:ImGui	typeref:typename:const ImVec4 &
GetStyleVarInfo	interface/imgui.cpp	/^static const ImGuiStyleVarInfo* GetStyleVarInfo(ImGuiStyleVar idx)$/;"	f	typeref:typename:const ImGuiStyleVarInfo *	file:
GetTL	interface/imgui_internal.h	/^    ImVec2      GetTL() const                       { return Min; }                   \/\/ Top-l/;"	f	struct:ImRect	typeref:typename:ImVec2
GetTR	interface/imgui_internal.h	/^    ImVec2      GetTR() const                       { return ImVec2(Max.x, Min.y); }  \/\/ Top-r/;"	f	struct:ImRect	typeref:typename:ImVec2
GetTabBarFromTabBarRef	interface/imgui_widgets.cpp	/^static ImGuiTabBar* GetTabBarFromTabBarRef(const ImGuiPtrOrIndex& ref)$/;"	f	typeref:typename:ImGuiTabBar *	file:
GetTabBarRefFromTabBar	interface/imgui_widgets.cpp	/^static ImGuiPtrOrIndex GetTabBarRefFromTabBar(ImGuiTabBar* tab_bar)$/;"	f	typeref:typename:ImGuiPtrOrIndex	file:
GetTabName	interface/imgui_internal.h	/^    const char*         GetTabName(const ImGuiTabItem* tab) const$/;"	f	struct:ImGuiTabBar	typeref:typename:const char *
GetTabOrder	interface/imgui_internal.h	/^    int                 GetTabOrder(const ImGuiTabItem* tab) const  { return Tabs.index_from_ptr/;"	f	struct:ImGuiTabBar	typeref:typename:int
GetTexDataAsAlpha8	interface/imgui_draw.cpp	/^void    ImFontAtlas::GetTexDataAsAlpha8(unsigned char** out_pixels, int* out_width, int* out_hei/;"	f	class:ImFontAtlas	typeref:typename:void
GetTexDataAsRGBA32	interface/imgui_draw.cpp	/^void    ImFontAtlas::GetTexDataAsRGBA32(unsigned char** out_pixels, int* out_width, int* out_hei/;"	f	class:ImFontAtlas	typeref:typename:void
GetTextLineHeight	interface/imgui.cpp	/^float ImGui::GetTextLineHeight()$/;"	f	class:ImGui	typeref:typename:float
GetTextLineHeightWithSpacing	interface/imgui.cpp	/^float ImGui::GetTextLineHeightWithSpacing()$/;"	f	class:ImGui	typeref:typename:float
GetTime	interface/imgui.cpp	/^double ImGui::GetTime()$/;"	f	class:ImGui	typeref:typename:double
GetTopMostPopupModal	interface/imgui.cpp	/^ImGuiWindow* ImGui::GetTopMostPopupModal()$/;"	f	class:ImGui	typeref:typename:ImGuiWindow *
GetTreeNodeToLabelSpacing	interface/imgui_widgets.cpp	/^float ImGui::GetTreeNodeToLabelSpacing()$/;"	f	class:ImGui	typeref:typename:float
GetUndoAvailCount	interface/imgui_internal.h	/^    int         GetUndoAvailCount() const   { return Stb.undostate.undo_point; }$/;"	f	struct:ImGuiInputTextState	typeref:typename:int
GetVarPtr	interface/imgui.cpp	/^    void*           GetVarPtr(ImGuiStyle* style) const { return (void*)((unsigned char*)style + /;"	f	struct:ImGuiStyleVarInfo	typeref:typename:void *	file:
GetVersion	interface/imgui.cpp	/^const char* ImGui::GetVersion()$/;"	f	class:ImGui	typeref:typename:const char *
GetViewportRect	interface/imgui.cpp	/^static ImRect GetViewportRect()$/;"	f	typeref:typename:ImRect	file:
GetVoidPtr	interface/imgui.cpp	/^void* ImGuiStorage::GetVoidPtr(ImGuiID key) const$/;"	f	class:ImGuiStorage	typeref:typename:void *
GetVoidPtrRef	interface/imgui.cpp	/^void** ImGuiStorage::GetVoidPtrRef(ImGuiID key, void* default_val)$/;"	f	class:ImGuiStorage	typeref:typename:void **
GetWidth	interface/imgui_internal.h	/^    float       GetWidth() const                    { return Max.x - Min.x; }$/;"	f	struct:ImRect	typeref:typename:float
GetWindowAllowedExtentRect	interface/imgui.cpp	/^ImRect ImGui::GetWindowAllowedExtentRect(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:ImRect
GetWindowBgColorIdxFromFlags	interface/imgui.cpp	/^static ImGuiCol GetWindowBgColorIdxFromFlags(ImGuiWindowFlags flags)$/;"	f	typeref:typename:ImGuiCol	file:
GetWindowContentRegionMax	interface/imgui.cpp	/^ImVec2 ImGui::GetWindowContentRegionMax()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetWindowContentRegionMin	interface/imgui.cpp	/^ImVec2 ImGui::GetWindowContentRegionMin()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetWindowContentRegionWidth	interface/imgui.cpp	/^float ImGui::GetWindowContentRegionWidth()$/;"	f	class:ImGui	typeref:typename:float
GetWindowDrawList	interface/imgui.cpp	/^ImDrawList* ImGui::GetWindowDrawList()$/;"	f	class:ImGui	typeref:typename:ImDrawList *
GetWindowHeight	interface/imgui.cpp	/^float ImGui::GetWindowHeight()$/;"	f	class:ImGui	typeref:typename:float
GetWindowPos	interface/imgui.cpp	/^ImVec2 ImGui::GetWindowPos()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetWindowRect	interface/imgui.cpp	/^        static ImRect GetWindowRect(ImGuiWindow* window, int rect_type)$/;"	f	struct:ImGui::ShowMetricsWindow::Funcs	typeref:typename:ImRect	file:
GetWindowResizeID	interface/imgui.cpp	/^ImGuiID ImGui::GetWindowResizeID(ImGuiWindow* window, int n)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetWindowScrollbarID	interface/imgui_widgets.cpp	/^ImGuiID ImGui::GetWindowScrollbarID(ImGuiWindow* window, ImGuiAxis axis)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetWindowScrollbarRect	interface/imgui_widgets.cpp	/^ImRect ImGui::GetWindowScrollbarRect(ImGuiWindow* window, ImGuiAxis axis)$/;"	f	class:ImGui	typeref:typename:ImRect
GetWindowSize	interface/imgui.cpp	/^ImVec2 ImGui::GetWindowSize()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetWindowWidth	interface/imgui.cpp	/^float ImGui::GetWindowWidth()$/;"	f	class:ImGui	typeref:typename:float
GlyphAdvanceX	interface/imgui.h	/^    float           GlyphAdvanceX;  \/\/ Input    \/\/ For custom font glyphs only: glyph xadvan/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:float
GlyphExtraSpacing	interface/imgui.h	/^    ImVec2          GlyphExtraSpacing;      \/\/ 0, 0     \/\/ Extra spacing (in pixels) between/;"	m	struct:ImFontConfig	typeref:typename:ImVec2
GlyphID	interface/imgui.h	/^    unsigned int    GlyphID;        \/\/ Input    \/\/ For custom font glyphs only (ID < 0x11000/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:unsigned int
GlyphMaxAdvanceX	interface/imgui.h	/^    float           GlyphMaxAdvanceX;       \/\/ FLT_MAX  \/\/ Maximum AdvanceX for glyphs$/;"	m	struct:ImFontConfig	typeref:typename:float
GlyphMinAdvanceX	interface/imgui.h	/^    float           GlyphMinAdvanceX;       \/\/ 0        \/\/ Minimum AdvanceX for glyphs, set /;"	m	struct:ImFontConfig	typeref:typename:float
GlyphOffset	interface/imgui.h	/^    ImVec2          GlyphOffset;            \/\/ 0, 0     \/\/ Offset all glyphs from this font /;"	m	struct:ImFontConfig	typeref:typename:ImVec2
GlyphOffset	interface/imgui.h	/^    ImVec2          GlyphOffset;    \/\/ Input    \/\/ For custom font glyphs only: glyph displa/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:ImVec2
GlyphRanges	interface/imgui.h	/^    const ImWchar*  GlyphRanges;            \/\/ NULL     \/\/ Pointer to a user-provided list o/;"	m	struct:ImFontConfig	typeref:typename:const ImWchar *
GlyphRangesBuilder	interface/imgui.h	/^    typedef ImFontGlyphRangesBuilder GlyphRangesBuilder; \/\/ OBSOLETED in 1.67+$/;"	t	struct:ImFontAtlas	typeref:typename:ImFontGlyphRangesBuilder
Glyphs	interface/imgui.h	/^    ImVector<ImFontGlyph>       Glyphs;             \/\/ 12-16 \/\/ out \/\/            \/\/ All/;"	m	struct:ImFont	typeref:typename:ImVector<ImFontGlyph>
GlyphsCount	interface/imgui_draw.cpp	/^    int                 GlyphsCount;        \/\/ Glyph count (excluding missing glyphs and glyph/;"	m	struct:ImFontBuildSrcData	typeref:typename:int	file:
GlyphsCount	interface/imgui_draw.cpp	/^    int                 GlyphsCount;$/;"	m	struct:ImFontBuildDstData	typeref:typename:int	file:
GlyphsHighest	interface/imgui_draw.cpp	/^    int                 GlyphsHighest;      \/\/ Highest requested codepoint$/;"	m	struct:ImFontBuildSrcData	typeref:typename:int	file:
GlyphsHighest	interface/imgui_draw.cpp	/^    int                 GlyphsHighest;$/;"	m	struct:ImFontBuildDstData	typeref:typename:int	file:
GlyphsList	interface/imgui_draw.cpp	/^    ImVector<int>       GlyphsList;         \/\/ Glyph codepoints list (flattened version of Gly/;"	m	struct:ImFontBuildSrcData	typeref:typename:ImVector<int>	file:
GlyphsSet	interface/imgui_draw.cpp	/^    ImBitVector         GlyphsSet;          \/\/ Glyph bit map (random access, 1-bit per codepoi/;"	m	struct:ImFontBuildSrcData	typeref:typename:ImBitVector	file:
GlyphsSet	interface/imgui_draw.cpp	/^    ImBitVector         GlyphsSet;          \/\/ This is used to resolve collision when multiple/;"	m	struct:ImFontBuildDstData	typeref:typename:ImBitVector	file:
GrabMinSize	interface/imgui.h	/^    float       GrabMinSize;                \/\/ Minimum width\/height of a grab box for slider\//;"	m	struct:ImGuiStyle	typeref:typename:float
GrabRounding	interface/imgui.h	/^    float       GrabRounding;               \/\/ Radius of grabs corners rounding. Set to 0.0f t/;"	m	struct:ImGuiStyle	typeref:typename:float
GroupOffset	interface/imgui_internal.h	/^    ImVec1                  GroupOffset;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec1
GroupStack	interface/imgui_internal.h	/^    ImVector<ImGuiGroupData>GroupStack;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVector<ImGuiGroupData>
GrowIndex	interface/imgui_draw.cpp	/^void ImFont::GrowIndex(int new_size)$/;"	f	class:ImFont	typeref:typename:void
HALFWORD	arm.hpp	/^    HALFWORD,$/;"	e	enum:Width
HSV	interface/imgui.h	/^    static ImColor HSV(float h, float s, float v, float a = 1.0f)   { float r, g, b; ImGui::Colo/;"	f	struct:ImColor	typeref:typename:ImColor
HasCloseButton	interface/imgui_internal.h	/^    bool                    HasCloseButton;                     \/\/ Set when the window has a c/;"	m	struct:ImGuiWindow	typeref:typename:bool
HasSelection	interface/imgui.h	/^    bool                HasSelection() const    { return SelectionStart != SelectionEnd; }$/;"	f	struct:ImGuiInputTextCallbackData	typeref:typename:bool
HasSelection	interface/imgui_internal.h	/^    bool        HasSelection() const        { return Stb.select_start != Stb.select_end; }$/;"	f	struct:ImGuiInputTextState	typeref:typename:bool
Height	interface/imgui.h	/^    unsigned short  Width, Height;  \/\/ Input    \/\/ Desired rectangle dimension$/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:unsigned short
Height	interface/imgui_impl_vulkan.h	/^    int                 Height;$/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:int
Hidden	interface/imgui_internal.h	/^    bool                    Hidden;                             \/\/ Do not display (== HiddenFr/;"	m	struct:ImGuiWindow	typeref:typename:bool
HiddenFramesCanSkipItems	interface/imgui_internal.h	/^    int                     HiddenFramesCanSkipItems;           \/\/ Hide the window for N frame/;"	m	struct:ImGuiWindow	typeref:typename:int
HiddenFramesCannotSkipItems	interface/imgui_internal.h	/^    int                     HiddenFramesCannotSkipItems;        \/\/ Hide the window for N frame/;"	m	struct:ImGuiWindow	typeref:typename:int
HitTestHoleOffset	interface/imgui_internal.h	/^    ImVec2ih                HitTestHoleOffset;$/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2ih
HitTestHoleSize	interface/imgui_internal.h	/^    ImVec2ih                HitTestHoleSize;                    \/\/ Define an optional rectangu/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2ih
Hooks	interface/imgui_internal.h	/^    ImVector<ImGuiContextHook>          Hooks;                  \/\/ Hooks for extensions (e.g. /;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiContextHook>
HostBackupClipRect	interface/imgui_internal.h	/^    ImRect              HostBackupClipRect;     \/\/ Backup of ClipRect during PushColumnsBackgr/;"	m	struct:ImGuiColumns	typeref:typename:ImRect
HostBackupParentWorkRect	interface/imgui_internal.h	/^    ImRect              HostBackupParentWorkRect;\/\/Backup of WorkRect at the time of BeginColu/;"	m	struct:ImGuiColumns	typeref:typename:ImRect
HostCursorMaxPosX	interface/imgui_internal.h	/^    float               HostCursorMaxPosX;      \/\/ Backup of CursorMaxPos at the time of Begin/;"	m	struct:ImGuiColumns	typeref:typename:float
HostCursorPosY	interface/imgui_internal.h	/^    float               HostCursorPosY;         \/\/ Backup of CursorPos at the time of BeginCol/;"	m	struct:ImGuiColumns	typeref:typename:float
HostInitialClipRect	interface/imgui_internal.h	/^    ImRect              HostInitialClipRect;    \/\/ Backup of ClipRect at the time of BeginColu/;"	m	struct:ImGuiColumns	typeref:typename:ImRect
HoveredId	interface/imgui_internal.h	/^    ImGuiID                 HoveredId;                          \/\/ Hovered widget$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
HoveredIdAllowOverlap	interface/imgui_internal.h	/^    bool                    HoveredIdAllowOverlap;$/;"	m	struct:ImGuiContext	typeref:typename:bool
HoveredIdDisabled	interface/imgui_internal.h	/^    bool                    HoveredIdDisabled;                  \/\/ At least one widget passed /;"	m	struct:ImGuiContext	typeref:typename:bool
HoveredIdNotActiveTimer	interface/imgui_internal.h	/^    float                   HoveredIdNotActiveTimer;            \/\/ Measure contiguous hovering/;"	m	struct:ImGuiContext	typeref:typename:float
HoveredIdPreviousFrame	interface/imgui_internal.h	/^    ImGuiID                 HoveredIdPreviousFrame;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
HoveredIdTimer	interface/imgui_internal.h	/^    float                   HoveredIdTimer;                     \/\/ Measure contiguous hovering/;"	m	struct:ImGuiContext	typeref:typename:float
HoveredRootWindow	interface/imgui_internal.h	/^    ImGuiWindow*            HoveredRootWindow;                  \/\/ == HoveredWindow ? HoveredW/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
HoveredWindow	interface/imgui_internal.h	/^    ImGuiWindow*            HoveredWindow;                      \/\/ Window the mouse is hoverin/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
HoveredWindowUnderMovingWindow	interface/imgui_internal.h	/^    ImGuiWindow*            HoveredWindowUnderMovingWindow;     \/\/ Hovered window ignoring Mov/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
ID	interface/imgui_internal.h	/^    ImGuiID                 ID;                                 \/\/ == ImHashStr(Name)$/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiID
ID	interface/imgui_internal.h	/^    ImGuiID                 ID;                     \/\/ widget id owning the text state$/;"	m	struct:ImGuiInputTextState	typeref:typename:ImGuiID
ID	interface/imgui_internal.h	/^    ImGuiID             ID;                     \/\/ Zero for tab-bars used by docking$/;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiID
ID	interface/imgui_internal.h	/^    ImGuiID             ID;$/;"	m	struct:ImGuiColumns	typeref:typename:ImGuiID
ID	interface/imgui_internal.h	/^    ImGuiID             ID;$/;"	m	struct:ImGuiTabItem	typeref:typename:ImGuiID
ID	interface/imgui_internal.h	/^    ImGuiID         ID;                 \/\/ Best candidate ID$/;"	m	struct:ImGuiNavMoveResult	typeref:typename:ImGuiID
ID	interface/imgui_internal.h	/^    ImGuiID     ID;$/;"	m	struct:ImGuiWindowSettings	typeref:typename:ImGuiID
IDStack	interface/imgui_internal.h	/^    ImVector<ImGuiID>       IDStack;                            \/\/ ID stack. ID are hashes see/;"	m	struct:ImGuiWindow	typeref:typename:ImVector<ImGuiID>
IMGUI_API	interface/imgui.h	/^#define IMGUI_API$/;"	d
IMGUI_CDECL	interface/imgui_internal.h	/^#define IMGUI_CDECL /;"	d
IMGUI_CDECL	interface/imgui_internal.h	/^#define IMGUI_CDECL$/;"	d
IMGUI_CHECKVERSION	interface/imgui.h	/^#define IMGUI_CHECKVERSION(/;"	d
IMGUI_DEBUG_INI_SETTINGS	interface/imgui.cpp	/^#define IMGUI_DEBUG_INI_SETTINGS /;"	d	file:
IMGUI_DEBUG_LOG	interface/imgui_internal.h	/^#define IMGUI_DEBUG_LOG(/;"	d
IMGUI_DEBUG_LOG_NAV	interface/imgui_internal.h	/^#define IMGUI_DEBUG_LOG_NAV(/;"	d
IMGUI_DEBUG_LOG_POPUP	interface/imgui_internal.h	/^#define IMGUI_DEBUG_LOG_POPUP(/;"	d
IMGUI_DEBUG_NAV_RECTS	interface/imgui.cpp	/^#define IMGUI_DEBUG_NAV_RECTS /;"	d	file:
IMGUI_DEBUG_NAV_SCORING	interface/imgui.cpp	/^#define IMGUI_DEBUG_NAV_SCORING /;"	d	file:
IMGUI_DEFINE_MATH_OPERATORS	interface/imgui.cpp	/^#define IMGUI_DEFINE_MATH_OPERATORS$/;"	d	file:
IMGUI_DEFINE_MATH_OPERATORS	interface/imgui_draw.cpp	/^#define IMGUI_DEFINE_MATH_OPERATORS$/;"	d	file:
IMGUI_DEFINE_MATH_OPERATORS	interface/imgui_widgets.cpp	/^#define IMGUI_DEFINE_MATH_OPERATORS$/;"	d	file:
IMGUI_DISABLE_DEFAULT_FILE_FUNCTIONS	interface/imgui_internal.h	/^#define IMGUI_DISABLE_DEFAULT_FILE_FUNCTIONS$/;"	d
IMGUI_DISABLE_TTY_FUNCTIONS	interface/imgui_internal.h	/^#define IMGUI_DISABLE_TTY_FUNCTIONS /;"	d
IMGUI_DISABLE_WIN32_DEFAULT_CLIPBOARD_FUNCTIONS	interface/imgui.cpp	/^#define IMGUI_DISABLE_WIN32_DEFAULT_CLIPBOARD_FUNCTIONS$/;"	d	file:
IMGUI_DISABLE_WIN32_DEFAULT_IME_FUNCTIONS	interface/imgui.cpp	/^#define IMGUI_DISABLE_WIN32_DEFAULT_IME_FUNCTIONS$/;"	d	file:
IMGUI_DISABLE_WIN32_FUNCTIONS	interface/imgui.cpp	/^#define IMGUI_DISABLE_WIN32_FUNCTIONS$/;"	d	file:
IMGUI_IMPL_API	interface/imgui.h	/^#define IMGUI_IMPL_API /;"	d
IMGUI_PAYLOAD_TYPE_COLOR_3F	interface/imgui.h	/^#define IMGUI_PAYLOAD_TYPE_COLOR_3F /;"	d
IMGUI_PAYLOAD_TYPE_COLOR_4F	interface/imgui.h	/^#define IMGUI_PAYLOAD_TYPE_COLOR_4F /;"	d
IMGUI_STB_NAMESPACE	interface/imgui_draw.cpp	/^namespace IMGUI_STB_NAMESPACE$/;"	n	file:
IMGUI_TEST_ENGINE_ID_INFO	interface/imgui_internal.h	/^#define IMGUI_TEST_ENGINE_ID_INFO(/;"	d
IMGUI_TEST_ENGINE_ID_INFO2	interface/imgui_internal.h	/^#define IMGUI_TEST_ENGINE_ID_INFO2(/;"	d
IMGUI_TEST_ENGINE_ITEM_ADD	interface/imgui_internal.h	/^#define IMGUI_TEST_ENGINE_ITEM_ADD(/;"	d
IMGUI_TEST_ENGINE_ITEM_INFO	interface/imgui_internal.h	/^#define IMGUI_TEST_ENGINE_ITEM_INFO(/;"	d
IMGUI_TEST_ENGINE_LOG	interface/imgui_internal.h	/^#define IMGUI_TEST_ENGINE_LOG(/;"	d
IMGUI_VERSION	interface/imgui.h	/^#define IMGUI_VERSION /;"	d
IMGUI_VERSION_NUM	interface/imgui.h	/^#define IMGUI_VERSION_NUM /;"	d
IM_ALLOC	interface/imgui.h	/^#define IM_ALLOC(/;"	d
IM_ARRAYSIZE	interface/imgui.h	/^#define IM_ARRAYSIZE(/;"	d
IM_ASSERT	interface/imgui.h	/^#define IM_ASSERT(/;"	d
IM_ASSERT_PARANOID	interface/imgui_internal.h	/^#define IM_ASSERT_PARANOID(/;"	d
IM_ASSERT_USER_ERROR	interface/imgui_internal.h	/^#define IM_ASSERT_USER_ERROR(/;"	d
IM_COL32	interface/imgui.h	/^#define IM_COL32(/;"	d
IM_COL32_A_MASK	interface/imgui.h	/^#define IM_COL32_A_MASK /;"	d
IM_COL32_A_SHIFT	interface/imgui.h	/^#define IM_COL32_A_SHIFT /;"	d
IM_COL32_BLACK	interface/imgui.h	/^#define IM_COL32_BLACK /;"	d
IM_COL32_BLACK_TRANS	interface/imgui.h	/^#define IM_COL32_BLACK_TRANS /;"	d
IM_COL32_B_SHIFT	interface/imgui.h	/^#define IM_COL32_B_SHIFT /;"	d
IM_COL32_G_SHIFT	interface/imgui.h	/^#define IM_COL32_G_SHIFT /;"	d
IM_COL32_R_SHIFT	interface/imgui.h	/^#define IM_COL32_R_SHIFT /;"	d
IM_COL32_WHITE	interface/imgui.h	/^#define IM_COL32_WHITE /;"	d
IM_DEBUG_BREAK	interface/imgui_internal.h	/^#define IM_DEBUG_BREAK(/;"	d
IM_DELETE	interface/imgui.h	/^template<typename T> void IM_DELETE(T* p)   { if (p) { p->~T(); ImGui::MemFree(p); } }$/;"	f	typeref:typename:void
IM_DRAWLIST_ARCFAST_TESSELLATION_MULTIPLIER	interface/imgui_internal.h	/^#define IM_DRAWLIST_ARCFAST_TESSELLATION_MULTIPLIER /;"	d
IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_CALC	interface/imgui_internal.h	/^#define IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_CALC(/;"	d
IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_MAX	interface/imgui_internal.h	/^#define IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_MAX /;"	d
IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_MIN	interface/imgui_internal.h	/^#define IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_MIN /;"	d
IM_DRAWLIST_TEX_LINES_WIDTH_MAX	interface/imgui.h	/^#define IM_DRAWLIST_TEX_LINES_WIDTH_MAX /;"	d
IM_F32_TO_INT8_SAT	interface/imgui_internal.h	/^#define IM_F32_TO_INT8_SAT(/;"	d
IM_F32_TO_INT8_UNBOUND	interface/imgui_internal.h	/^#define IM_F32_TO_INT8_UNBOUND(/;"	d
IM_FIXNORMAL2F	interface/imgui_draw.cpp	/^#define IM_FIXNORMAL2F(/;"	d	file:
IM_FLOOR	interface/imgui_internal.h	/^#define IM_FLOOR(/;"	d
IM_FMTARGS	interface/imgui.h	/^#define IM_FMTARGS(/;"	d
IM_FMTLIST	interface/imgui.h	/^#define IM_FMTLIST(/;"	d
IM_FREE	interface/imgui.h	/^#define IM_FREE(/;"	d
IM_NEW	interface/imgui.h	/^#define IM_NEW(/;"	d
IM_NEWLINE	interface/imgui_internal.h	/^#define IM_NEWLINE /;"	d
IM_NORMALIZE2F_OVER_ZERO	interface/imgui_draw.cpp	/^#define IM_NORMALIZE2F_OVER_ZERO(/;"	d	file:
IM_OFFSETOF	interface/imgui.h	/^#define IM_OFFSETOF(/;"	d
IM_PI	interface/imgui_internal.h	/^#define IM_PI /;"	d
IM_PLACEMENT_NEW	interface/imgui.h	/^#define IM_PLACEMENT_NEW(/;"	d
IM_ROUND	interface/imgui_internal.h	/^#define IM_ROUND(/;"	d
IM_S16_MAX	interface/imgui_widgets.cpp	/^static const signed short   IM_S16_MAX = 32767;$/;"	v	typeref:typename:const signed short	file:
IM_S16_MIN	interface/imgui_widgets.cpp	/^static const signed short   IM_S16_MIN = -32768;$/;"	v	typeref:typename:const signed short	file:
IM_S32_MAX	interface/imgui_widgets.cpp	/^static const ImS32          IM_S32_MAX = INT_MAX;    \/\/ (2147483647), (0x7FFFFFFF)$/;"	v	typeref:typename:const ImS32	file:
IM_S32_MIN	interface/imgui_widgets.cpp	/^static const ImS32          IM_S32_MIN = INT_MIN;    \/\/ (-2147483647 - 1), (0x80000000);$/;"	v	typeref:typename:const ImS32	file:
IM_S64_MAX	interface/imgui_widgets.cpp	/^static const ImS64          IM_S64_MAX = 9223372036854775807LL;$/;"	v	typeref:typename:const ImS64	file:
IM_S64_MAX	interface/imgui_widgets.cpp	/^static const ImS64          IM_S64_MAX = LLONG_MAX;  \/\/ (9223372036854775807ll);$/;"	v	typeref:typename:const ImS64	file:
IM_S64_MIN	interface/imgui_widgets.cpp	/^static const ImS64          IM_S64_MIN = -9223372036854775807LL - 1;$/;"	v	typeref:typename:const ImS64	file:
IM_S64_MIN	interface/imgui_widgets.cpp	/^static const ImS64          IM_S64_MIN = LLONG_MIN;  \/\/ (-9223372036854775807ll - 1ll);$/;"	v	typeref:typename:const ImS64	file:
IM_S8_MAX	interface/imgui_widgets.cpp	/^static const signed char    IM_S8_MAX  = 127;$/;"	v	typeref:typename:const signed char	file:
IM_S8_MIN	interface/imgui_widgets.cpp	/^static const signed char    IM_S8_MIN  = -128;$/;"	v	typeref:typename:const signed char	file:
IM_STATIC_ASSERT	interface/imgui_internal.h	/^#define IM_STATIC_ASSERT(/;"	d
IM_TABSIZE	interface/imgui_internal.h	/^#define IM_TABSIZE /;"	d
IM_U16_MAX	interface/imgui_widgets.cpp	/^static const unsigned short IM_U16_MAX = 0xFFFF;$/;"	v	typeref:typename:const unsigned short	file:
IM_U16_MIN	interface/imgui_widgets.cpp	/^static const unsigned short IM_U16_MIN = 0;$/;"	v	typeref:typename:const unsigned short	file:
IM_U32_MAX	interface/imgui_widgets.cpp	/^static const ImU32          IM_U32_MAX = UINT_MAX;   \/\/ (0xFFFFFFFF)$/;"	v	typeref:typename:const ImU32	file:
IM_U32_MIN	interface/imgui_widgets.cpp	/^static const ImU32          IM_U32_MIN = 0;$/;"	v	typeref:typename:const ImU32	file:
IM_U64_MAX	interface/imgui_widgets.cpp	/^static const ImU64          IM_U64_MAX = (2ULL * 9223372036854775807LL + 1);$/;"	v	typeref:typename:const ImU64	file:
IM_U64_MAX	interface/imgui_widgets.cpp	/^static const ImU64          IM_U64_MAX = ULLONG_MAX; \/\/ (0xFFFFFFFFFFFFFFFFull);$/;"	v	typeref:typename:const ImU64	file:
IM_U64_MIN	interface/imgui_widgets.cpp	/^static const ImU64          IM_U64_MIN = 0;$/;"	v	typeref:typename:const ImU64	file:
IM_U8_MAX	interface/imgui_widgets.cpp	/^static const unsigned char  IM_U8_MAX  = 0xFF;$/;"	v	typeref:typename:const unsigned char	file:
IM_U8_MIN	interface/imgui_widgets.cpp	/^static const unsigned char  IM_U8_MIN  = 0;$/;"	v	typeref:typename:const unsigned char	file:
IM_UNICODE_CODEPOINT_INVALID	interface/imgui.h	/^#define IM_UNICODE_CODEPOINT_INVALID /;"	d
IM_UNICODE_CODEPOINT_MAX	interface/imgui.h	/^#define IM_UNICODE_CODEPOINT_MAX /;"	d
IM_UNUSED	interface/imgui.h	/^#define IM_UNUSED(/;"	d
INCLUDE_STB_TEXTEDIT_H	interface/imstb_textedit.h	/^#define INCLUDE_STB_TEXTEDIT_H$/;"	d
INTERRUPT	arm.hpp	/^            INTERRUPT,$/;"	e	enum:Cpu::Interrupt
IO	interface/imgui_internal.h	/^    ImGuiIO                 IO;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiIO
IRQ	arm.hpp	/^            IRQ,$/;"	e	enum:Cpu::Mode
IdxBuffer	interface/imgui.h	/^    ImVector<ImDrawIdx>     IdxBuffer;          \/\/ Index buffer. Each command consume ImDrawCm/;"	m	struct:ImDrawList	typeref:typename:ImVector<ImDrawIdx>
IdxOffset	interface/imgui.h	/^    unsigned int    IdxOffset;          \/\/ 4    \/\/ Start offset in index buffer. Always equa/;"	m	struct:ImDrawCmd	typeref:typename:unsigned int
ImAbs	interface/imgui_internal.h	/^static inline double ImAbs(double x)            { return fabs(x); }$/;"	f	typeref:typename:double
ImAbs	interface/imgui_internal.h	/^static inline float  ImAbs(float x)             { return fabsf(x); }$/;"	f	typeref:typename:float
ImAcos	interface/imgui_internal.h	/^#define ImAcos(/;"	d
ImAcos01	interface/imgui_draw.cpp	/^static inline float ImAcos01(float x)$/;"	f	typeref:typename:float	file:
ImAddClampOverflow	interface/imgui_internal.h	/^template<typename T> static inline T ImAddClampOverflow(T a, T b, T mn, T mx)   { if (b < 0 && (/;"	f	typeref:typename:T
ImAlphaBlendColors	interface/imgui.cpp	/^IMGUI_API ImU32 ImAlphaBlendColors(ImU32 col_a, ImU32 col_b)$/;"	f	typeref:typename:IMGUI_API ImU32
ImAtan2	interface/imgui_internal.h	/^#define ImAtan2(/;"	d
ImAtof	interface/imgui_internal.h	/^#define ImAtof(/;"	d
ImAtoi	interface/imgui_widgets.cpp	/^static const char* ImAtoi(const char* src, TYPE* output)$/;"	f	typeref:typename:const char *	file:
ImBezierCalc	interface/imgui_draw.cpp	/^ImVec2 ImBezierCalc(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, floa/;"	f	typeref:typename:ImVec2
ImBezierClosestPoint	interface/imgui.cpp	/^ImVec2 ImBezierClosestPoint(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec2& /;"	f	typeref:typename:ImVec2
ImBezierClosestPointCasteljau	interface/imgui.cpp	/^ImVec2 ImBezierClosestPointCasteljau(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const/;"	f	typeref:typename:ImVec2
ImBitArrayClearBit	interface/imgui_internal.h	/^inline void          ImBitArrayClearBit(ImU32* arr, int n)              { ImU32 mask = (ImU32)1 /;"	f	typeref:typename:void
ImBitArraySetBit	interface/imgui_internal.h	/^inline void          ImBitArraySetBit(ImU32* arr, int n)                { ImU32 mask = (ImU32)1 /;"	f	typeref:typename:void
ImBitArraySetBitRange	interface/imgui_internal.h	/^inline void          ImBitArraySetBitRange(ImU32* arr, int n, int n2)$/;"	f	typeref:typename:void
ImBitArrayTestBit	interface/imgui_internal.h	/^inline bool          ImBitArrayTestBit(const ImU32* arr, int n)         { ImU32 mask = (ImU32)1 /;"	f	typeref:typename:bool
ImBitVector	interface/imgui_internal.h	/^struct IMGUI_API ImBitVector$/;"	s
ImCeil	interface/imgui_internal.h	/^#define ImCeil(/;"	d
ImCharIsBlankA	interface/imgui_internal.h	/^static inline bool      ImCharIsBlankA(char c)          { return c == ' ' || c == '\\t'; }$/;"	f	typeref:typename:bool
ImCharIsBlankW	interface/imgui_internal.h	/^static inline bool      ImCharIsBlankW(unsigned int c)  { return c == ' ' || c == '\\t' || c == /;"	f	typeref:typename:bool
ImChunkStream	interface/imgui_internal.h	/^struct IMGUI_API ImChunkStream$/;"	s
ImClamp	interface/imgui_internal.h	/^static inline ImVec2 ImClamp(const ImVec2& v, const ImVec2& mn, ImVec2 mx)      { return ImVec2(/;"	f	typeref:typename:ImVec2
ImClamp	interface/imgui_internal.h	/^template<typename T> static inline T ImClamp(T v, T mn, T mx)                   { return (v < mn/;"	f	typeref:typename:T
ImColor	interface/imgui.h	/^    ImColor()                                                       { Value.x = Value.y = Value./;"	f	struct:ImColor
ImColor	interface/imgui.h	/^    ImColor(ImU32 rgba)                                             { float sc = 1.0f \/ 255.0f;/;"	f	struct:ImColor
ImColor	interface/imgui.h	/^    ImColor(const ImVec4& col)                                      { Value = col; }$/;"	f	struct:ImColor
ImColor	interface/imgui.h	/^    ImColor(float r, float g, float b, float a = 1.0f)              { Value.x = r; Value.y = g; /;"	f	struct:ImColor
ImColor	interface/imgui.h	/^    ImColor(int r, int g, int b, int a = 255)                       { float sc = 1.0f \/ 255.0f;/;"	f	struct:ImColor
ImColor	interface/imgui.h	/^struct ImColor$/;"	s
ImCos	interface/imgui_internal.h	/^#define ImCos(/;"	d
ImDot	interface/imgui_internal.h	/^static inline float  ImDot(const ImVec2& a, const ImVec2& b)                    { return a.x * b/;"	f	typeref:typename:float
ImDrawCallback	interface/imgui.h	/^typedef void (*ImDrawCallback)(const ImDrawList* parent_list, const ImDrawCmd* cmd);$/;"	t	typeref:typename:void (*)(const ImDrawList * parent_list,const ImDrawCmd * cmd)
ImDrawCallback_ResetRenderState	interface/imgui.h	/^#define ImDrawCallback_ResetRenderState /;"	d
ImDrawChannel	interface/imgui.h	/^struct ImDrawChannel$/;"	s
ImDrawCmd	interface/imgui.h	/^    ImDrawCmd() { memset(this, 0, sizeof(*this)); } \/\/ Also ensure our padding fields are zero/;"	f	struct:ImDrawCmd
ImDrawCmd	interface/imgui.h	/^struct ImDrawCmd$/;"	s
ImDrawCmd_HeaderCompare	interface/imgui_draw.cpp	/^#define ImDrawCmd_HeaderCompare(/;"	d	file:
ImDrawCmd_HeaderCopy	interface/imgui_draw.cpp	/^#define ImDrawCmd_HeaderCopy(/;"	d	file:
ImDrawCmd_HeaderSize	interface/imgui_draw.cpp	/^#define ImDrawCmd_HeaderSize /;"	d	file:
ImDrawCornerFlags	interface/imgui.h	/^typedef int ImDrawCornerFlags;      \/\/ -> enum ImDrawCornerFlags_    \/\/ Flags: for ImDrawLis/;"	t	typeref:typename:int
ImDrawCornerFlags_	interface/imgui.h	/^enum ImDrawCornerFlags_$/;"	g
ImDrawCornerFlags_All	interface/imgui.h	/^    ImDrawCornerFlags_All       = 0xF     \/\/ In your function calls you may use ~0 (= all bits/;"	e	enum:ImDrawCornerFlags_
ImDrawCornerFlags_Bot	interface/imgui.h	/^    ImDrawCornerFlags_Bot       = ImDrawCornerFlags_BotLeft | ImDrawCornerFlags_BotRight,   \/\//;"	e	enum:ImDrawCornerFlags_
ImDrawCornerFlags_BotLeft	interface/imgui.h	/^    ImDrawCornerFlags_BotLeft   = 1 << 2, \/\/ 0x4$/;"	e	enum:ImDrawCornerFlags_
ImDrawCornerFlags_BotRight	interface/imgui.h	/^    ImDrawCornerFlags_BotRight  = 1 << 3, \/\/ 0x8$/;"	e	enum:ImDrawCornerFlags_
ImDrawCornerFlags_Left	interface/imgui.h	/^    ImDrawCornerFlags_Left      = ImDrawCornerFlags_TopLeft | ImDrawCornerFlags_BotLeft,    \/\//;"	e	enum:ImDrawCornerFlags_
ImDrawCornerFlags_None	interface/imgui.h	/^    ImDrawCornerFlags_None      = 0,$/;"	e	enum:ImDrawCornerFlags_
ImDrawCornerFlags_Right	interface/imgui.h	/^    ImDrawCornerFlags_Right     = ImDrawCornerFlags_TopRight | ImDrawCornerFlags_BotRight,  \/\//;"	e	enum:ImDrawCornerFlags_
ImDrawCornerFlags_Top	interface/imgui.h	/^    ImDrawCornerFlags_Top       = ImDrawCornerFlags_TopLeft | ImDrawCornerFlags_TopRight,   \/\//;"	e	enum:ImDrawCornerFlags_
ImDrawCornerFlags_TopLeft	interface/imgui.h	/^    ImDrawCornerFlags_TopLeft   = 1 << 0, \/\/ 0x1$/;"	e	enum:ImDrawCornerFlags_
ImDrawCornerFlags_TopRight	interface/imgui.h	/^    ImDrawCornerFlags_TopRight  = 1 << 1, \/\/ 0x2$/;"	e	enum:ImDrawCornerFlags_
ImDrawData	interface/imgui.h	/^    ImDrawData()    { Valid = false; Clear(); }$/;"	f	struct:ImDrawData
ImDrawData	interface/imgui.h	/^struct ImDrawData$/;"	s
ImDrawDataBuilder	interface/imgui_internal.h	/^struct ImDrawDataBuilder$/;"	s
ImDrawIdx	interface/imgui.h	/^typedef unsigned short ImDrawIdx;$/;"	t	typeref:typename:unsigned short
ImDrawList	interface/imgui.h	/^    ImDrawList(const ImDrawListSharedData* shared_data) { _Data = shared_data; Flags = ImDrawLis/;"	f	struct:ImDrawList
ImDrawList	interface/imgui.h	/^struct ImDrawList$/;"	s
ImDrawListFlags	interface/imgui.h	/^typedef int ImDrawListFlags;        \/\/ -> enum ImDrawListFlags_      \/\/ Flags: for ImDrawLis/;"	t	typeref:typename:int
ImDrawListFlags_	interface/imgui.h	/^enum ImDrawListFlags_$/;"	g
ImDrawListFlags_AllowVtxOffset	interface/imgui.h	/^    ImDrawListFlags_AllowVtxOffset          = 1 << 3   \/\/ Can emit 'VtxOffset > 0' to allow la/;"	e	enum:ImDrawListFlags_
ImDrawListFlags_AntiAliasedFill	interface/imgui.h	/^    ImDrawListFlags_AntiAliasedFill         = 1 << 2,  \/\/ Enable anti-aliased edge around fill/;"	e	enum:ImDrawListFlags_
ImDrawListFlags_AntiAliasedLines	interface/imgui.h	/^    ImDrawListFlags_AntiAliasedLines        = 1 << 0,  \/\/ Enable anti-aliased lines\/borders (/;"	e	enum:ImDrawListFlags_
ImDrawListFlags_AntiAliasedLinesUseTex	interface/imgui.h	/^    ImDrawListFlags_AntiAliasedLinesUseTex  = 1 << 1,  \/\/ Enable anti-aliased lines\/borders u/;"	e	enum:ImDrawListFlags_
ImDrawListFlags_None	interface/imgui.h	/^    ImDrawListFlags_None                    = 0,$/;"	e	enum:ImDrawListFlags_
ImDrawListSharedData	interface/imgui_draw.cpp	/^ImDrawListSharedData::ImDrawListSharedData()$/;"	f	class:ImDrawListSharedData
ImDrawListSharedData	interface/imgui_internal.h	/^struct IMGUI_API ImDrawListSharedData$/;"	s
ImDrawListSplitter	interface/imgui.h	/^    inline ImDrawListSplitter()  { Clear(); }$/;"	f	struct:ImDrawListSplitter
ImDrawListSplitter	interface/imgui.h	/^struct ImDrawListSplitter$/;"	s
ImDrawVert	interface/imgui.h	/^struct ImDrawVert$/;"	s
ImFabs	interface/imgui_internal.h	/^#define ImFabs(/;"	d
ImFileClose	interface/imgui.cpp	/^bool    ImFileClose(ImFileHandle f)     { return fclose(f) == 0; }$/;"	f	typeref:typename:bool
ImFileClose	interface/imgui_internal.h	/^static inline bool          ImFileClose(ImFileHandle)                               { return fal/;"	f	typeref:typename:bool
ImFileGetSize	interface/imgui.cpp	/^ImU64   ImFileGetSize(ImFileHandle f)   { long off = 0, sz = 0; return ((off = ftell(f)) != -1 &/;"	f	typeref:typename:ImU64
ImFileGetSize	interface/imgui_internal.h	/^static inline ImU64         ImFileGetSize(ImFileHandle)                             { return (Im/;"	f	typeref:typename:ImU64
ImFileHandle	interface/imgui_internal.h	/^typedef FILE* ImFileHandle;$/;"	t	typeref:typename:FILE *
ImFileHandle	interface/imgui_internal.h	/^typedef void* ImFileHandle;$/;"	t	typeref:typename:void *
ImFileLoadToMemory	interface/imgui.cpp	/^void*   ImFileLoadToMemory(const char* filename, const char* mode, size_t* out_file_size, int pa/;"	f	typeref:typename:void *
ImFileOpen	interface/imgui.cpp	/^ImFileHandle ImFileOpen(const char* filename, const char* mode)$/;"	f	typeref:typename:ImFileHandle
ImFileOpen	interface/imgui_internal.h	/^static inline ImFileHandle  ImFileOpen(const char*, const char*)                    { return NUL/;"	f	typeref:typename:ImFileHandle
ImFileRead	interface/imgui.cpp	/^ImU64   ImFileRead(void* data, ImU64 sz, ImU64 count, ImFileHandle f)           { return fread(d/;"	f	typeref:typename:ImU64
ImFileRead	interface/imgui_internal.h	/^static inline ImU64         ImFileRead(void*, ImU64, ImU64, ImFileHandle)           { return 0; /;"	f	typeref:typename:ImU64
ImFileWrite	interface/imgui.cpp	/^ImU64   ImFileWrite(const void* data, ImU64 sz, ImU64 count, ImFileHandle f)    { return fwrite(/;"	f	typeref:typename:ImU64
ImFileWrite	interface/imgui_internal.h	/^static inline ImU64         ImFileWrite(const void*, ImU64, ImU64, ImFileHandle)    { return 0; /;"	f	typeref:typename:ImU64
ImFloor	interface/imgui_internal.h	/^static inline ImVec2 ImFloor(const ImVec2& v)                                   { return ImVec2(/;"	f	typeref:typename:ImVec2
ImFloor	interface/imgui_internal.h	/^static inline float  ImFloor(float f)                                           { return (float)/;"	f	typeref:typename:float
ImFloorStd	interface/imgui_internal.h	/^#define ImFloorStd(/;"	d
ImFmod	interface/imgui_internal.h	/^#define ImFmod(/;"	d
ImFont	interface/imgui.h	/^struct ImFont$/;"	s
ImFont	interface/imgui_draw.cpp	/^ImFont::ImFont()$/;"	f	class:ImFont
ImFontAtlas	interface/imgui.h	/^struct ImFontAtlas$/;"	s
ImFontAtlas	interface/imgui_draw.cpp	/^ImFontAtlas::ImFontAtlas()$/;"	f	class:ImFontAtlas
ImFontAtlasBuildFinish	interface/imgui_draw.cpp	/^void ImFontAtlasBuildFinish(ImFontAtlas* atlas)$/;"	f	typeref:typename:void
ImFontAtlasBuildInit	interface/imgui_draw.cpp	/^void ImFontAtlasBuildInit(ImFontAtlas* atlas)$/;"	f	typeref:typename:void
ImFontAtlasBuildMultiplyCalcLookupTable	interface/imgui_draw.cpp	/^void    ImFontAtlasBuildMultiplyCalcLookupTable(unsigned char out_table[256], float in_brighten_/;"	f	typeref:typename:void
ImFontAtlasBuildMultiplyRectAlpha8	interface/imgui_draw.cpp	/^void    ImFontAtlasBuildMultiplyRectAlpha8(const unsigned char table[256], unsigned char* pixels/;"	f	typeref:typename:void
ImFontAtlasBuildPackCustomRects	interface/imgui_draw.cpp	/^void ImFontAtlasBuildPackCustomRects(ImFontAtlas* atlas, void* stbrp_context_opaque)$/;"	f	typeref:typename:void
ImFontAtlasBuildRender1bppRectFromString	interface/imgui_draw.cpp	/^void ImFontAtlasBuildRender1bppRectFromString(ImFontAtlas* atlas, int x, int y, int w, int h, co/;"	f	typeref:typename:void
ImFontAtlasBuildRenderDefaultTexData	interface/imgui_draw.cpp	/^static void ImFontAtlasBuildRenderDefaultTexData(ImFontAtlas* atlas)$/;"	f	typeref:typename:void	file:
ImFontAtlasBuildRenderLinesTexData	interface/imgui_draw.cpp	/^static void ImFontAtlasBuildRenderLinesTexData(ImFontAtlas* atlas)$/;"	f	typeref:typename:void	file:
ImFontAtlasBuildSetupFont	interface/imgui_draw.cpp	/^void ImFontAtlasBuildSetupFont(ImFontAtlas* atlas, ImFont* font, ImFontConfig* font_config, floa/;"	f	typeref:typename:void
ImFontAtlasBuildWithStbTruetype	interface/imgui_draw.cpp	/^bool    ImFontAtlasBuildWithStbTruetype(ImFontAtlas* atlas)$/;"	f	typeref:typename:bool
ImFontAtlasCustomRect	interface/imgui.h	/^    ImFontAtlasCustomRect()         { Width = Height = 0; X = Y = 0xFFFF; GlyphID = 0; GlyphAdva/;"	f	struct:ImFontAtlasCustomRect
ImFontAtlasCustomRect	interface/imgui.h	/^struct ImFontAtlasCustomRect$/;"	s
ImFontAtlasFlags	interface/imgui.h	/^typedef int ImFontAtlasFlags;       \/\/ -> enum ImFontAtlasFlags_     \/\/ Flags: for ImFontAtl/;"	t	typeref:typename:int
ImFontAtlasFlags_	interface/imgui.h	/^enum ImFontAtlasFlags_$/;"	g
ImFontAtlasFlags_NoBakedLines	interface/imgui.h	/^    ImFontAtlasFlags_NoBakedLines       = 1 << 2    \/\/ Don't build thick line textures into th/;"	e	enum:ImFontAtlasFlags_
ImFontAtlasFlags_NoMouseCursors	interface/imgui.h	/^    ImFontAtlasFlags_NoMouseCursors     = 1 << 1,   \/\/ Don't build software mouse cursors into/;"	e	enum:ImFontAtlasFlags_
ImFontAtlasFlags_NoPowerOfTwoHeight	interface/imgui.h	/^    ImFontAtlasFlags_NoPowerOfTwoHeight = 1 << 0,   \/\/ Don't round the height to next power of/;"	e	enum:ImFontAtlasFlags_
ImFontAtlasFlags_None	interface/imgui.h	/^    ImFontAtlasFlags_None               = 0,$/;"	e	enum:ImFontAtlasFlags_
ImFontBuildDstData	interface/imgui_draw.cpp	/^struct ImFontBuildDstData$/;"	s	file:
ImFontBuildSrcData	interface/imgui_draw.cpp	/^struct ImFontBuildSrcData$/;"	s	file:
ImFontConfig	interface/imgui.h	/^struct ImFontConfig$/;"	s
ImFontConfig	interface/imgui_draw.cpp	/^ImFontConfig::ImFontConfig()$/;"	f	class:ImFontConfig
ImFontGlyph	interface/imgui.h	/^struct ImFontGlyph$/;"	s
ImFontGlyphRangesBuilder	interface/imgui.h	/^    ImFontGlyphRangesBuilder()              { Clear(); }$/;"	f	struct:ImFontGlyphRangesBuilder
ImFontGlyphRangesBuilder	interface/imgui.h	/^struct ImFontGlyphRangesBuilder$/;"	s
ImFormatString	interface/imgui.cpp	/^int ImFormatString(char* buf, size_t buf_size, const char* fmt, ...)$/;"	f	typeref:typename:int
ImFormatStringV	interface/imgui.cpp	/^int ImFormatStringV(char* buf, size_t buf_size, const char* fmt, va_list args)$/;"	f	typeref:typename:int
ImGetDirQuadrantFromDelta	interface/imgui.cpp	/^ImGuiDir ImGetDirQuadrantFromDelta(float dx, float dy)$/;"	f	typeref:typename:ImGuiDir
ImGui	interface/imgui.cpp	/^namespace ImGui$/;"	n	file:
ImGui	interface/imgui.h	/^namespace ImGui$/;"	n
ImGui	interface/imgui_internal.h	/^namespace ImGui$/;"	n
ImGui	interface/imgui_widgets.cpp	/^namespace ImGui$/;"	n	file:
ImGuiAxis	interface/imgui_internal.h	/^enum ImGuiAxis$/;"	g
ImGuiAxis_None	interface/imgui_internal.h	/^    ImGuiAxis_None = -1,$/;"	e	enum:ImGuiAxis
ImGuiAxis_X	interface/imgui_internal.h	/^    ImGuiAxis_X = 0,$/;"	e	enum:ImGuiAxis
ImGuiAxis_Y	interface/imgui_internal.h	/^    ImGuiAxis_Y = 1$/;"	e	enum:ImGuiAxis
ImGuiBackendFlags	interface/imgui.h	/^typedef int ImGuiBackendFlags;      \/\/ -> enum ImGuiBackendFlags_    \/\/ Flags: for io.Backen/;"	t	typeref:typename:int
ImGuiBackendFlags_	interface/imgui.h	/^enum ImGuiBackendFlags_$/;"	g
ImGuiBackendFlags_HasGamepad	interface/imgui.h	/^    ImGuiBackendFlags_HasGamepad            = 1 << 0,   \/\/ Backend Platform supports gamepad a/;"	e	enum:ImGuiBackendFlags_
ImGuiBackendFlags_HasMouseCursors	interface/imgui.h	/^    ImGuiBackendFlags_HasMouseCursors       = 1 << 1,   \/\/ Backend Platform supports honoring /;"	e	enum:ImGuiBackendFlags_
ImGuiBackendFlags_HasSetMousePos	interface/imgui.h	/^    ImGuiBackendFlags_HasSetMousePos        = 1 << 2,   \/\/ Backend Platform supports io.WantSe/;"	e	enum:ImGuiBackendFlags_
ImGuiBackendFlags_None	interface/imgui.h	/^    ImGuiBackendFlags_None                  = 0,$/;"	e	enum:ImGuiBackendFlags_
ImGuiBackendFlags_RendererHasVtxOffset	interface/imgui.h	/^    ImGuiBackendFlags_RendererHasVtxOffset  = 1 << 3    \/\/ Backend Renderer supports ImDrawCmd/;"	e	enum:ImGuiBackendFlags_
ImGuiButtonFlags	interface/imgui.h	/^typedef int ImGuiButtonFlags;       \/\/ -> enum ImGuiButtonFlags_     \/\/ Flags: for Invisible/;"	t	typeref:typename:int
ImGuiButtonFlags	interface/imgui_internal.h	/^typedef int ImGuiButtonFlags;           \/\/ -> enum ImGuiButtonFlags_        \/\/ Flags: for Bu/;"	t	typeref:typename:int
ImGuiButtonFlagsPrivate_	interface/imgui_internal.h	/^enum ImGuiButtonFlagsPrivate_$/;"	g
ImGuiButtonFlags_	interface/imgui.h	/^enum ImGuiButtonFlags_$/;"	g
ImGuiButtonFlags_AlignTextBaseLine	interface/imgui_internal.h	/^    ImGuiButtonFlags_AlignTextBaseLine      = 1 << 15,  \/\/ vertically align button to match te/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_AllowItemOverlap	interface/imgui_internal.h	/^    ImGuiButtonFlags_AllowItemOverlap       = 1 << 12,  \/\/ require previous frame HoveredId to/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_Disabled	interface/imgui_internal.h	/^    ImGuiButtonFlags_Disabled               = 1 << 14,  \/\/ disable interactions$/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_DontClosePopups	interface/imgui_internal.h	/^    ImGuiButtonFlags_DontClosePopups        = 1 << 13,  \/\/ disable automatically closing paren/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_FlattenChildren	interface/imgui_internal.h	/^    ImGuiButtonFlags_FlattenChildren        = 1 << 11,  \/\/ allow interactions even if a child /;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_MouseButtonDefault_	interface/imgui.h	/^    ImGuiButtonFlags_MouseButtonDefault_    = ImGuiButtonFlags_MouseButtonLeft$/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_MouseButtonLeft	interface/imgui.h	/^    ImGuiButtonFlags_MouseButtonLeft        = 1 << 0,   \/\/ React on left mouse button (default/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_MouseButtonMask_	interface/imgui.h	/^    ImGuiButtonFlags_MouseButtonMask_       = ImGuiButtonFlags_MouseButtonLeft | ImGuiButtonFlag/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_MouseButtonMiddle	interface/imgui.h	/^    ImGuiButtonFlags_MouseButtonMiddle      = 1 << 2,   \/\/ React on center mouse button$/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_MouseButtonRight	interface/imgui.h	/^    ImGuiButtonFlags_MouseButtonRight       = 1 << 1,   \/\/ React on right mouse button$/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_NoHoldingActiveId	interface/imgui_internal.h	/^    ImGuiButtonFlags_NoHoldingActiveId      = 1 << 17,  \/\/ don't set ActiveId while holding th/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_NoHoveredOnFocus	interface/imgui_internal.h	/^    ImGuiButtonFlags_NoHoveredOnFocus       = 1 << 19,  \/\/ don't report as hovered when nav fo/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_NoKeyModifiers	interface/imgui_internal.h	/^    ImGuiButtonFlags_NoKeyModifiers         = 1 << 16,  \/\/ disable mouse interaction if a key /;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_NoNavFocus	interface/imgui_internal.h	/^    ImGuiButtonFlags_NoNavFocus             = 1 << 18,  \/\/ don't override navigation focus whe/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_None	interface/imgui.h	/^    ImGuiButtonFlags_None                   = 0,$/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_PressedOnClick	interface/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnClick         = 1 << 4,   \/\/ return true on click (mouse down ev/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_PressedOnClickRelease	interface/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnClickRelease  = 1 << 5,   \/\/ [Default] return true on click + re/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_PressedOnClickReleaseAnywhere	interface/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnClickReleaseAnywhere = 1 << 6, \/\/ return true on click + release/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_PressedOnDefault_	interface/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnDefault_      = ImGuiButtonFlags_PressedOnClickRelease$/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_PressedOnDoubleClick	interface/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnDoubleClick   = 1 << 8,   \/\/ return true on double-click (defaul/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_PressedOnDragDropHold	interface/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnDragDropHold  = 1 << 9,   \/\/ return true when held into while we/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_PressedOnMask_	interface/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnMask_         = ImGuiButtonFlags_PressedOnClick | ImGuiButtonFlags/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_PressedOnRelease	interface/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnRelease       = 1 << 7,   \/\/ return true on release (default req/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_Repeat	interface/imgui_internal.h	/^    ImGuiButtonFlags_Repeat                 = 1 << 10,  \/\/ hold to repeat$/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiCol	interface/imgui.h	/^typedef int ImGuiCol;               \/\/ -> enum ImGuiCol_             \/\/ Enum: A color identi/;"	t	typeref:typename:int
ImGuiCol_	interface/imgui.h	/^enum ImGuiCol_$/;"	g
ImGuiCol_Border	interface/imgui.h	/^    ImGuiCol_Border,$/;"	e	enum:ImGuiCol_
ImGuiCol_BorderShadow	interface/imgui.h	/^    ImGuiCol_BorderShadow,$/;"	e	enum:ImGuiCol_
ImGuiCol_Button	interface/imgui.h	/^    ImGuiCol_Button,$/;"	e	enum:ImGuiCol_
ImGuiCol_ButtonActive	interface/imgui.h	/^    ImGuiCol_ButtonActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_ButtonHovered	interface/imgui.h	/^    ImGuiCol_ButtonHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_COUNT	interface/imgui.h	/^    ImGuiCol_COUNT$/;"	e	enum:ImGuiCol_
ImGuiCol_CheckMark	interface/imgui.h	/^    ImGuiCol_CheckMark,$/;"	e	enum:ImGuiCol_
ImGuiCol_ChildBg	interface/imgui.h	/^    ImGuiCol_ChildBg,               \/\/ Background of child windows$/;"	e	enum:ImGuiCol_
ImGuiCol_DragDropTarget	interface/imgui.h	/^    ImGuiCol_DragDropTarget,$/;"	e	enum:ImGuiCol_
ImGuiCol_FrameBg	interface/imgui.h	/^    ImGuiCol_FrameBg,               \/\/ Background of checkbox, radio button, plot, slider, tex/;"	e	enum:ImGuiCol_
ImGuiCol_FrameBgActive	interface/imgui.h	/^    ImGuiCol_FrameBgActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_FrameBgHovered	interface/imgui.h	/^    ImGuiCol_FrameBgHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_Header	interface/imgui.h	/^    ImGuiCol_Header,                \/\/ Header* colors are used for CollapsingHeader, TreeNode,/;"	e	enum:ImGuiCol_
ImGuiCol_HeaderActive	interface/imgui.h	/^    ImGuiCol_HeaderActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_HeaderHovered	interface/imgui.h	/^    ImGuiCol_HeaderHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_MenuBarBg	interface/imgui.h	/^    ImGuiCol_MenuBarBg,$/;"	e	enum:ImGuiCol_
ImGuiCol_ModalWindowDarkening	interface/imgui.h	/^    , ImGuiCol_ModalWindowDarkening = ImGuiCol_ModalWindowDimBg                      \/\/ [renam/;"	e	enum:ImGuiCol_
ImGuiCol_ModalWindowDimBg	interface/imgui.h	/^    ImGuiCol_ModalWindowDimBg,      \/\/ Darken\/colorize entire screen behind a modal window, w/;"	e	enum:ImGuiCol_
ImGuiCol_NavHighlight	interface/imgui.h	/^    ImGuiCol_NavHighlight,          \/\/ Gamepad\/keyboard: current highlighted item$/;"	e	enum:ImGuiCol_
ImGuiCol_NavWindowingDimBg	interface/imgui.h	/^    ImGuiCol_NavWindowingDimBg,     \/\/ Darken\/colorize entire screen behind the CTRL+TAB wind/;"	e	enum:ImGuiCol_
ImGuiCol_NavWindowingHighlight	interface/imgui.h	/^    ImGuiCol_NavWindowingHighlight, \/\/ Highlight window when using CTRL+TAB$/;"	e	enum:ImGuiCol_
ImGuiCol_PlotHistogram	interface/imgui.h	/^    ImGuiCol_PlotHistogram,$/;"	e	enum:ImGuiCol_
ImGuiCol_PlotHistogramHovered	interface/imgui.h	/^    ImGuiCol_PlotHistogramHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_PlotLines	interface/imgui.h	/^    ImGuiCol_PlotLines,$/;"	e	enum:ImGuiCol_
ImGuiCol_PlotLinesHovered	interface/imgui.h	/^    ImGuiCol_PlotLinesHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_PopupBg	interface/imgui.h	/^    ImGuiCol_PopupBg,               \/\/ Background of popups, menus, tooltips windows$/;"	e	enum:ImGuiCol_
ImGuiCol_ResizeGrip	interface/imgui.h	/^    ImGuiCol_ResizeGrip,$/;"	e	enum:ImGuiCol_
ImGuiCol_ResizeGripActive	interface/imgui.h	/^    ImGuiCol_ResizeGripActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_ResizeGripHovered	interface/imgui.h	/^    ImGuiCol_ResizeGripHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_ScrollbarBg	interface/imgui.h	/^    ImGuiCol_ScrollbarBg,$/;"	e	enum:ImGuiCol_
ImGuiCol_ScrollbarGrab	interface/imgui.h	/^    ImGuiCol_ScrollbarGrab,$/;"	e	enum:ImGuiCol_
ImGuiCol_ScrollbarGrabActive	interface/imgui.h	/^    ImGuiCol_ScrollbarGrabActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_ScrollbarGrabHovered	interface/imgui.h	/^    ImGuiCol_ScrollbarGrabHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_Separator	interface/imgui.h	/^    ImGuiCol_Separator,$/;"	e	enum:ImGuiCol_
ImGuiCol_SeparatorActive	interface/imgui.h	/^    ImGuiCol_SeparatorActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_SeparatorHovered	interface/imgui.h	/^    ImGuiCol_SeparatorHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_SliderGrab	interface/imgui.h	/^    ImGuiCol_SliderGrab,$/;"	e	enum:ImGuiCol_
ImGuiCol_SliderGrabActive	interface/imgui.h	/^    ImGuiCol_SliderGrabActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_Tab	interface/imgui.h	/^    ImGuiCol_Tab,$/;"	e	enum:ImGuiCol_
ImGuiCol_TabActive	interface/imgui.h	/^    ImGuiCol_TabActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_TabHovered	interface/imgui.h	/^    ImGuiCol_TabHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_TabUnfocused	interface/imgui.h	/^    ImGuiCol_TabUnfocused,$/;"	e	enum:ImGuiCol_
ImGuiCol_TabUnfocusedActive	interface/imgui.h	/^    ImGuiCol_TabUnfocusedActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_Text	interface/imgui.h	/^    ImGuiCol_Text,$/;"	e	enum:ImGuiCol_
ImGuiCol_TextDisabled	interface/imgui.h	/^    ImGuiCol_TextDisabled,$/;"	e	enum:ImGuiCol_
ImGuiCol_TextSelectedBg	interface/imgui.h	/^    ImGuiCol_TextSelectedBg,$/;"	e	enum:ImGuiCol_
ImGuiCol_TitleBg	interface/imgui.h	/^    ImGuiCol_TitleBg,$/;"	e	enum:ImGuiCol_
ImGuiCol_TitleBgActive	interface/imgui.h	/^    ImGuiCol_TitleBgActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_TitleBgCollapsed	interface/imgui.h	/^    ImGuiCol_TitleBgCollapsed,$/;"	e	enum:ImGuiCol_
ImGuiCol_WindowBg	interface/imgui.h	/^    ImGuiCol_WindowBg,              \/\/ Background of normal windows$/;"	e	enum:ImGuiCol_
ImGuiColorEditFlags	interface/imgui.h	/^typedef int ImGuiColorEditFlags;    \/\/ -> enum ImGuiColorEditFlags_  \/\/ Flags: for ColorEdit/;"	t	typeref:typename:int
ImGuiColorEditFlags_	interface/imgui.h	/^enum ImGuiColorEditFlags_$/;"	g
ImGuiColorEditFlags_AlphaBar	interface/imgui.h	/^    ImGuiColorEditFlags_AlphaBar        = 1 << 16,  \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_AlphaPreview	interface/imgui.h	/^    ImGuiColorEditFlags_AlphaPreview    = 1 << 17,  \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_AlphaPreviewHalf	interface/imgui.h	/^    ImGuiColorEditFlags_AlphaPreviewHalf= 1 << 18,  \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_DisplayHSV	interface/imgui.h	/^    ImGuiColorEditFlags_DisplayHSV      = 1 << 21,  \/\/ [Display]    \/\/ "$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_DisplayHex	interface/imgui.h	/^    ImGuiColorEditFlags_DisplayHex      = 1 << 22,  \/\/ [Display]    \/\/ "$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_DisplayRGB	interface/imgui.h	/^    ImGuiColorEditFlags_DisplayRGB      = 1 << 20,  \/\/ [Display]    \/\/ ColorEdit: override _/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_Float	interface/imgui.h	/^    ImGuiColorEditFlags_Float           = 1 << 24,  \/\/ [DataType]   \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_HDR	interface/imgui.h	/^    ImGuiColorEditFlags_HDR             = 1 << 19,  \/\/              \/\/ (WIP) ColorEdit: Curr/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_HEX	interface/imgui.h	/^    , ImGuiColorEditFlags_RGB = ImGuiColorEditFlags_DisplayRGB, ImGuiColorEditFlags_HSV = ImGuiC/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_HSV	interface/imgui.h	/^    , ImGuiColorEditFlags_RGB = ImGuiColorEditFlags_DisplayRGB, ImGuiColorEditFlags_HSV = ImGuiC/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_InputHSV	interface/imgui.h	/^    ImGuiColorEditFlags_InputHSV        = 1 << 28,  \/\/ [Input]      \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_InputRGB	interface/imgui.h	/^    ImGuiColorEditFlags_InputRGB        = 1 << 27,  \/\/ [Input]      \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoAlpha	interface/imgui.h	/^    ImGuiColorEditFlags_NoAlpha         = 1 << 1,   \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoBorder	interface/imgui.h	/^    ImGuiColorEditFlags_NoBorder        = 1 << 10,  \/\/              \/\/ ColorButton: disable /;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoDragDrop	interface/imgui.h	/^    ImGuiColorEditFlags_NoDragDrop      = 1 << 9,   \/\/              \/\/ ColorEdit: disable dr/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoInputs	interface/imgui.h	/^    ImGuiColorEditFlags_NoInputs        = 1 << 5,   \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoLabel	interface/imgui.h	/^    ImGuiColorEditFlags_NoLabel         = 1 << 7,   \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoOptions	interface/imgui.h	/^    ImGuiColorEditFlags_NoOptions       = 1 << 3,   \/\/              \/\/ ColorEdit: disable to/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoPicker	interface/imgui.h	/^    ImGuiColorEditFlags_NoPicker        = 1 << 2,   \/\/              \/\/ ColorEdit: disable pi/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoSidePreview	interface/imgui.h	/^    ImGuiColorEditFlags_NoSidePreview   = 1 << 8,   \/\/              \/\/ ColorPicker: disable /;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoSmallPreview	interface/imgui.h	/^    ImGuiColorEditFlags_NoSmallPreview  = 1 << 4,   \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoTooltip	interface/imgui.h	/^    ImGuiColorEditFlags_NoTooltip       = 1 << 6,   \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_None	interface/imgui.h	/^    ImGuiColorEditFlags_None            = 0,$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_PickerHueBar	interface/imgui.h	/^    ImGuiColorEditFlags_PickerHueBar    = 1 << 25,  \/\/ [Picker]     \/\/ ColorPicker: bar for /;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_PickerHueWheel	interface/imgui.h	/^    ImGuiColorEditFlags_PickerHueWheel  = 1 << 26,  \/\/ [Picker]     \/\/ ColorPicker: wheel fo/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_RGB	interface/imgui.h	/^    , ImGuiColorEditFlags_RGB = ImGuiColorEditFlags_DisplayRGB, ImGuiColorEditFlags_HSV = ImGuiC/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_Uint8	interface/imgui.h	/^    ImGuiColorEditFlags_Uint8           = 1 << 23,  \/\/ [DataType]   \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags__DataTypeMask	interface/imgui.h	/^    ImGuiColorEditFlags__DataTypeMask   = ImGuiColorEditFlags_Uint8 | ImGuiColorEditFlags_Float,$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags__DisplayMask	interface/imgui.h	/^    ImGuiColorEditFlags__DisplayMask    = ImGuiColorEditFlags_DisplayRGB | ImGuiColorEditFlags_D/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags__InputMask	interface/imgui.h	/^    ImGuiColorEditFlags__InputMask      = ImGuiColorEditFlags_InputRGB | ImGuiColorEditFlags_Inp/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags__OptionsDefault	interface/imgui.h	/^    ImGuiColorEditFlags__OptionsDefault = ImGuiColorEditFlags_Uint8 | ImGuiColorEditFlags_Displa/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags__PickerMask	interface/imgui.h	/^    ImGuiColorEditFlags__PickerMask     = ImGuiColorEditFlags_PickerHueWheel | ImGuiColorEditFla/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorMod	interface/imgui_internal.h	/^struct ImGuiColorMod$/;"	s
ImGuiColumnData	interface/imgui_internal.h	/^    ImGuiColumnData()   { OffsetNorm = OffsetNormBeforeResize = 0.0f; Flags = ImGuiColumnsFlags_/;"	f	struct:ImGuiColumnData
ImGuiColumnData	interface/imgui_internal.h	/^struct ImGuiColumnData$/;"	s
ImGuiColumns	interface/imgui_internal.h	/^    ImGuiColumns()      { Clear(); }$/;"	f	struct:ImGuiColumns
ImGuiColumns	interface/imgui_internal.h	/^struct ImGuiColumns$/;"	s
ImGuiColumnsFlags	interface/imgui_internal.h	/^typedef int ImGuiColumnsFlags;          \/\/ -> enum ImGuiColumnsFlags_       \/\/ Flags: BeginC/;"	t	typeref:typename:int
ImGuiColumnsFlags_	interface/imgui_internal.h	/^enum ImGuiColumnsFlags_$/;"	g
ImGuiColumnsFlags_GrowParentContentsSize	interface/imgui_internal.h	/^    ImGuiColumnsFlags_GrowParentContentsSize= 1 << 4    \/\/ (WIP) Restore pre-1.51 behavior of /;"	e	enum:ImGuiColumnsFlags_
ImGuiColumnsFlags_NoBorder	interface/imgui_internal.h	/^    ImGuiColumnsFlags_NoBorder              = 1 << 0,   \/\/ Disable column dividers$/;"	e	enum:ImGuiColumnsFlags_
ImGuiColumnsFlags_NoForceWithinWindow	interface/imgui_internal.h	/^    ImGuiColumnsFlags_NoForceWithinWindow   = 1 << 3,   \/\/ Disable forcing columns to fit with/;"	e	enum:ImGuiColumnsFlags_
ImGuiColumnsFlags_NoPreserveWidths	interface/imgui_internal.h	/^    ImGuiColumnsFlags_NoPreserveWidths      = 1 << 2,   \/\/ Disable column width preservation w/;"	e	enum:ImGuiColumnsFlags_
ImGuiColumnsFlags_NoResize	interface/imgui_internal.h	/^    ImGuiColumnsFlags_NoResize              = 1 << 1,   \/\/ Disable resizing columns when click/;"	e	enum:ImGuiColumnsFlags_
ImGuiColumnsFlags_None	interface/imgui_internal.h	/^    ImGuiColumnsFlags_None                  = 0,$/;"	e	enum:ImGuiColumnsFlags_
ImGuiComboFlags	interface/imgui.h	/^typedef int ImGuiComboFlags;        \/\/ -> enum ImGuiComboFlags_      \/\/ Flags: for BeginComb/;"	t	typeref:typename:int
ImGuiComboFlags_	interface/imgui.h	/^enum ImGuiComboFlags_$/;"	g
ImGuiComboFlags_HeightLarge	interface/imgui.h	/^    ImGuiComboFlags_HeightLarge             = 1 << 3,   \/\/ Max ~20 items visible$/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_HeightLargest	interface/imgui.h	/^    ImGuiComboFlags_HeightLargest           = 1 << 4,   \/\/ As many fitting items as possible$/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_HeightMask_	interface/imgui.h	/^    ImGuiComboFlags_HeightMask_             = ImGuiComboFlags_HeightSmall | ImGuiComboFlags_Heig/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_HeightRegular	interface/imgui.h	/^    ImGuiComboFlags_HeightRegular           = 1 << 2,   \/\/ Max ~8 items visible (default)$/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_HeightSmall	interface/imgui.h	/^    ImGuiComboFlags_HeightSmall             = 1 << 1,   \/\/ Max ~4 items visible. Tip: If you w/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_NoArrowButton	interface/imgui.h	/^    ImGuiComboFlags_NoArrowButton           = 1 << 5,   \/\/ Display on the preview box without /;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_NoPreview	interface/imgui.h	/^    ImGuiComboFlags_NoPreview               = 1 << 6,   \/\/ Display only a square arrow button$/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_None	interface/imgui.h	/^    ImGuiComboFlags_None                    = 0,$/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_PopupAlignLeft	interface/imgui.h	/^    ImGuiComboFlags_PopupAlignLeft          = 1 << 0,   \/\/ Align the popup toward the left by /;"	e	enum:ImGuiComboFlags_
ImGuiCond	interface/imgui.h	/^typedef int ImGuiCond;              \/\/ -> enum ImGuiCond_            \/\/ Enum: A condition fo/;"	t	typeref:typename:int
ImGuiCond_	interface/imgui.h	/^enum ImGuiCond_$/;"	g
ImGuiCond_Always	interface/imgui.h	/^    ImGuiCond_Always        = 1 << 0,   \/\/ No condition (always set the variable)$/;"	e	enum:ImGuiCond_
ImGuiCond_Appearing	interface/imgui.h	/^    ImGuiCond_Appearing     = 1 << 3    \/\/ Set the variable if the object\/window is appearing/;"	e	enum:ImGuiCond_
ImGuiCond_FirstUseEver	interface/imgui.h	/^    ImGuiCond_FirstUseEver  = 1 << 2,   \/\/ Set the variable if the object\/window has no persi/;"	e	enum:ImGuiCond_
ImGuiCond_None	interface/imgui.h	/^    ImGuiCond_None          = 0,        \/\/ No condition (always set the variable), same as _Al/;"	e	enum:ImGuiCond_
ImGuiCond_Once	interface/imgui.h	/^    ImGuiCond_Once          = 1 << 1,   \/\/ Set the variable once per runtime session (only the/;"	e	enum:ImGuiCond_
ImGuiConfigFlags	interface/imgui.h	/^typedef int ImGuiConfigFlags;       \/\/ -> enum ImGuiConfigFlags_     \/\/ Flags: for io.Config/;"	t	typeref:typename:int
ImGuiConfigFlags_	interface/imgui.h	/^enum ImGuiConfigFlags_$/;"	g
ImGuiConfigFlags_IsSRGB	interface/imgui.h	/^    ImGuiConfigFlags_IsSRGB                 = 1 << 20,  \/\/ Application is SRGB-aware.$/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_IsTouchScreen	interface/imgui.h	/^    ImGuiConfigFlags_IsTouchScreen          = 1 << 21   \/\/ Application is using a touch screen/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NavEnableGamepad	interface/imgui.h	/^    ImGuiConfigFlags_NavEnableGamepad       = 1 << 1,   \/\/ Master gamepad navigation enable fl/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NavEnableKeyboard	interface/imgui.h	/^    ImGuiConfigFlags_NavEnableKeyboard      = 1 << 0,   \/\/ Master keyboard navigation enable f/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NavEnableSetMousePos	interface/imgui.h	/^    ImGuiConfigFlags_NavEnableSetMousePos   = 1 << 2,   \/\/ Instruct navigation to move the mou/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NavNoCaptureKeyboard	interface/imgui.h	/^    ImGuiConfigFlags_NavNoCaptureKeyboard   = 1 << 3,   \/\/ Instruct navigation to not set the /;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NoMouse	interface/imgui.h	/^    ImGuiConfigFlags_NoMouse                = 1 << 4,   \/\/ Instruct imgui to clear mouse posit/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NoMouseCursorChange	interface/imgui.h	/^    ImGuiConfigFlags_NoMouseCursorChange    = 1 << 5,   \/\/ Instruct backend to not alter mouse/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_None	interface/imgui.h	/^    ImGuiConfigFlags_None                   = 0,$/;"	e	enum:ImGuiConfigFlags_
ImGuiContext	interface/imgui_internal.h	/^    ImGuiContext(ImFontAtlas* shared_font_atlas) : BackgroundDrawList(&DrawListSharedData), Fore/;"	f	struct:ImGuiContext
ImGuiContext	interface/imgui_internal.h	/^struct ImGuiContext$/;"	s
ImGuiContextHook	interface/imgui_internal.h	/^    ImGuiContextHook()          { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiContextHook
ImGuiContextHook	interface/imgui_internal.h	/^struct ImGuiContextHook$/;"	s
ImGuiContextHookCallback	interface/imgui_internal.h	/^typedef void (*ImGuiContextHookCallback)(ImGuiContext* ctx, ImGuiContextHook* hook);$/;"	t	typeref:typename:void (*)(ImGuiContext * ctx,ImGuiContextHook * hook)
ImGuiContextHookType	interface/imgui_internal.h	/^enum ImGuiContextHookType { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost,/;"	g
ImGuiContextHookType_EndFramePost	interface/imgui_internal.h	/^enum ImGuiContextHookType { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost,/;"	e	enum:ImGuiContextHookType
ImGuiContextHookType_EndFramePre	interface/imgui_internal.h	/^enum ImGuiContextHookType { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost,/;"	e	enum:ImGuiContextHookType
ImGuiContextHookType_NewFramePost	interface/imgui_internal.h	/^enum ImGuiContextHookType { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost,/;"	e	enum:ImGuiContextHookType
ImGuiContextHookType_NewFramePre	interface/imgui_internal.h	/^enum ImGuiContextHookType { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost,/;"	e	enum:ImGuiContextHookType
ImGuiContextHookType_RenderPost	interface/imgui_internal.h	/^enum ImGuiContextHookType { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost,/;"	e	enum:ImGuiContextHookType
ImGuiContextHookType_RenderPre	interface/imgui_internal.h	/^enum ImGuiContextHookType { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost,/;"	e	enum:ImGuiContextHookType
ImGuiContextHookType_Shutdown	interface/imgui_internal.h	/^enum ImGuiContextHookType { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost,/;"	e	enum:ImGuiContextHookType
ImGuiDataType	interface/imgui.h	/^typedef int ImGuiDataType;          \/\/ -> enum ImGuiDataType_        \/\/ Enum: A primary data/;"	t	typeref:typename:int
ImGuiDataTypeInfo	interface/imgui_internal.h	/^struct ImGuiDataTypeInfo$/;"	s
ImGuiDataTypePrivate_	interface/imgui_internal.h	/^enum ImGuiDataTypePrivate_$/;"	g
ImGuiDataTypeTempStorage	interface/imgui_internal.h	/^struct ImGuiDataTypeTempStorage$/;"	s
ImGuiDataType_	interface/imgui.h	/^enum ImGuiDataType_$/;"	g
ImGuiDataType_COUNT	interface/imgui.h	/^    ImGuiDataType_COUNT$/;"	e	enum:ImGuiDataType_
ImGuiDataType_Double	interface/imgui.h	/^    ImGuiDataType_Double,   \/\/ double$/;"	e	enum:ImGuiDataType_
ImGuiDataType_Float	interface/imgui.h	/^    ImGuiDataType_Float,    \/\/ float$/;"	e	enum:ImGuiDataType_
ImGuiDataType_ID	interface/imgui_internal.h	/^    ImGuiDataType_ID$/;"	e	enum:ImGuiDataTypePrivate_
ImGuiDataType_Pointer	interface/imgui_internal.h	/^    ImGuiDataType_Pointer,$/;"	e	enum:ImGuiDataTypePrivate_
ImGuiDataType_S16	interface/imgui.h	/^    ImGuiDataType_S16,      \/\/ short$/;"	e	enum:ImGuiDataType_
ImGuiDataType_S32	interface/imgui.h	/^    ImGuiDataType_S32,      \/\/ int$/;"	e	enum:ImGuiDataType_
ImGuiDataType_S64	interface/imgui.h	/^    ImGuiDataType_S64,      \/\/ long long \/ __int64$/;"	e	enum:ImGuiDataType_
ImGuiDataType_S8	interface/imgui.h	/^    ImGuiDataType_S8,       \/\/ signed char \/ char (with sensible compilers)$/;"	e	enum:ImGuiDataType_
ImGuiDataType_String	interface/imgui_internal.h	/^    ImGuiDataType_String = ImGuiDataType_COUNT + 1,$/;"	e	enum:ImGuiDataTypePrivate_
ImGuiDataType_U16	interface/imgui.h	/^    ImGuiDataType_U16,      \/\/ unsigned short$/;"	e	enum:ImGuiDataType_
ImGuiDataType_U32	interface/imgui.h	/^    ImGuiDataType_U32,      \/\/ unsigned int$/;"	e	enum:ImGuiDataType_
ImGuiDataType_U64	interface/imgui.h	/^    ImGuiDataType_U64,      \/\/ unsigned long long \/ unsigned __int64$/;"	e	enum:ImGuiDataType_
ImGuiDataType_U8	interface/imgui.h	/^    ImGuiDataType_U8,       \/\/ unsigned char$/;"	e	enum:ImGuiDataType_
ImGuiDir	interface/imgui.h	/^typedef int ImGuiDir;               \/\/ -> enum ImGuiDir_             \/\/ Enum: A cardinal dir/;"	t	typeref:typename:int
ImGuiDir_	interface/imgui.h	/^enum ImGuiDir_$/;"	g
ImGuiDir_COUNT	interface/imgui.h	/^    ImGuiDir_COUNT$/;"	e	enum:ImGuiDir_
ImGuiDir_Down	interface/imgui.h	/^    ImGuiDir_Down    = 3,$/;"	e	enum:ImGuiDir_
ImGuiDir_Left	interface/imgui.h	/^    ImGuiDir_Left    = 0,$/;"	e	enum:ImGuiDir_
ImGuiDir_None	interface/imgui.h	/^    ImGuiDir_None    = -1,$/;"	e	enum:ImGuiDir_
ImGuiDir_Right	interface/imgui.h	/^    ImGuiDir_Right   = 1,$/;"	e	enum:ImGuiDir_
ImGuiDir_Up	interface/imgui.h	/^    ImGuiDir_Up      = 2,$/;"	e	enum:ImGuiDir_
ImGuiDragDropFlags	interface/imgui.h	/^typedef int ImGuiDragDropFlags;     \/\/ -> enum ImGuiDragDropFlags_   \/\/ Flags: for BeginDrag/;"	t	typeref:typename:int
ImGuiDragDropFlags_	interface/imgui.h	/^enum ImGuiDragDropFlags_$/;"	g
ImGuiDragDropFlags_AcceptBeforeDelivery	interface/imgui.h	/^    ImGuiDragDropFlags_AcceptBeforeDelivery         = 1 << 10,  \/\/ AcceptDragDropPayload() wil/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_AcceptNoDrawDefaultRect	interface/imgui.h	/^    ImGuiDragDropFlags_AcceptNoDrawDefaultRect      = 1 << 11,  \/\/ Do not draw the default hig/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_AcceptNoPreviewTooltip	interface/imgui.h	/^    ImGuiDragDropFlags_AcceptNoPreviewTooltip       = 1 << 12,  \/\/ Request hiding the BeginDra/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_AcceptPeekOnly	interface/imgui.h	/^    ImGuiDragDropFlags_AcceptPeekOnly               = ImGuiDragDropFlags_AcceptBeforeDelivery | /;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_None	interface/imgui.h	/^    ImGuiDragDropFlags_None                         = 0,$/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceAllowNullID	interface/imgui.h	/^    ImGuiDragDropFlags_SourceAllowNullID            = 1 << 3,   \/\/ Allow items such as Text(),/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceAutoExpirePayload	interface/imgui.h	/^    ImGuiDragDropFlags_SourceAutoExpirePayload      = 1 << 5,   \/\/ Automatically expire the pa/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceExtern	interface/imgui.h	/^    ImGuiDragDropFlags_SourceExtern                 = 1 << 4,   \/\/ External source (from outsi/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceNoDisableHover	interface/imgui.h	/^    ImGuiDragDropFlags_SourceNoDisableHover         = 1 << 1,   \/\/ By default, when dragging w/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceNoHoldToOpenOthers	interface/imgui.h	/^    ImGuiDragDropFlags_SourceNoHoldToOpenOthers     = 1 << 2,   \/\/ Disable the behavior that a/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceNoPreviewTooltip	interface/imgui.h	/^    ImGuiDragDropFlags_SourceNoPreviewTooltip       = 1 << 0,   \/\/ By default, a successful ca/;"	e	enum:ImGuiDragDropFlags_
ImGuiFocusedFlags	interface/imgui.h	/^typedef int ImGuiFocusedFlags;      \/\/ -> enum ImGuiFocusedFlags_    \/\/ Flags: for IsWindowF/;"	t	typeref:typename:int
ImGuiFocusedFlags_	interface/imgui.h	/^enum ImGuiFocusedFlags_$/;"	g
ImGuiFocusedFlags_AnyWindow	interface/imgui.h	/^    ImGuiFocusedFlags_AnyWindow                     = 1 << 2,   \/\/ IsWindowFocused(): Return t/;"	e	enum:ImGuiFocusedFlags_
ImGuiFocusedFlags_ChildWindows	interface/imgui.h	/^    ImGuiFocusedFlags_ChildWindows                  = 1 << 0,   \/\/ IsWindowFocused(): Return t/;"	e	enum:ImGuiFocusedFlags_
ImGuiFocusedFlags_None	interface/imgui.h	/^    ImGuiFocusedFlags_None                          = 0,$/;"	e	enum:ImGuiFocusedFlags_
ImGuiFocusedFlags_RootAndChildWindows	interface/imgui.h	/^    ImGuiFocusedFlags_RootAndChildWindows           = ImGuiFocusedFlags_RootWindow | ImGuiFocuse/;"	e	enum:ImGuiFocusedFlags_
ImGuiFocusedFlags_RootWindow	interface/imgui.h	/^    ImGuiFocusedFlags_RootWindow                    = 1 << 1,   \/\/ IsWindowFocused(): Test fro/;"	e	enum:ImGuiFocusedFlags_
ImGuiGroupData	interface/imgui_internal.h	/^struct ImGuiGroupData$/;"	s
ImGuiHoveredFlags	interface/imgui.h	/^typedef int ImGuiHoveredFlags;      \/\/ -> enum ImGuiHoveredFlags_    \/\/ Flags: for IsItemHov/;"	t	typeref:typename:int
ImGuiHoveredFlags_	interface/imgui.h	/^enum ImGuiHoveredFlags_$/;"	g
ImGuiHoveredFlags_AllowWhenBlockedByActiveItem	interface/imgui.h	/^    ImGuiHoveredFlags_AllowWhenBlockedByActiveItem  = 1 << 5,   \/\/ Return true even if an acti/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_AllowWhenBlockedByPopup	interface/imgui.h	/^    ImGuiHoveredFlags_AllowWhenBlockedByPopup       = 1 << 3,   \/\/ Return true even if a popup/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_AllowWhenDisabled	interface/imgui.h	/^    ImGuiHoveredFlags_AllowWhenDisabled             = 1 << 7,   \/\/ Return true even if the ite/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_AllowWhenOverlapped	interface/imgui.h	/^    ImGuiHoveredFlags_AllowWhenOverlapped           = 1 << 6,   \/\/ Return true even if the pos/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_AnyWindow	interface/imgui.h	/^    ImGuiHoveredFlags_AnyWindow                     = 1 << 2,   \/\/ IsWindowHovered() only: Ret/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_ChildWindows	interface/imgui.h	/^    ImGuiHoveredFlags_ChildWindows                  = 1 << 0,   \/\/ IsWindowHovered() only: Ret/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_None	interface/imgui.h	/^    ImGuiHoveredFlags_None                          = 0,        \/\/ Return true if directly ove/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_RectOnly	interface/imgui.h	/^    ImGuiHoveredFlags_RectOnly                      = ImGuiHoveredFlags_AllowWhenBlockedByPopup /;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_RootAndChildWindows	interface/imgui.h	/^    ImGuiHoveredFlags_RootAndChildWindows           = ImGuiHoveredFlags_RootWindow | ImGuiHovere/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_RootWindow	interface/imgui.h	/^    ImGuiHoveredFlags_RootWindow                    = 1 << 1,   \/\/ IsWindowHovered() only: Tes/;"	e	enum:ImGuiHoveredFlags_
ImGuiID	interface/imgui.h	/^typedef unsigned int ImGuiID;       \/\/ A unique ID used by widgets, typically hashed from a st/;"	t	typeref:typename:unsigned int
ImGuiIO	interface/imgui.cpp	/^ImGuiIO::ImGuiIO()$/;"	f	class:ImGuiIO
ImGuiIO	interface/imgui.h	/^struct ImGuiIO$/;"	s
ImGuiInputReadMode	interface/imgui_internal.h	/^enum ImGuiInputReadMode$/;"	g
ImGuiInputReadMode_Down	interface/imgui_internal.h	/^    ImGuiInputReadMode_Down,$/;"	e	enum:ImGuiInputReadMode
ImGuiInputReadMode_Pressed	interface/imgui_internal.h	/^    ImGuiInputReadMode_Pressed,$/;"	e	enum:ImGuiInputReadMode
ImGuiInputReadMode_Released	interface/imgui_internal.h	/^    ImGuiInputReadMode_Released,$/;"	e	enum:ImGuiInputReadMode
ImGuiInputReadMode_Repeat	interface/imgui_internal.h	/^    ImGuiInputReadMode_Repeat,$/;"	e	enum:ImGuiInputReadMode
ImGuiInputReadMode_RepeatFast	interface/imgui_internal.h	/^    ImGuiInputReadMode_RepeatFast$/;"	e	enum:ImGuiInputReadMode
ImGuiInputReadMode_RepeatSlow	interface/imgui_internal.h	/^    ImGuiInputReadMode_RepeatSlow,$/;"	e	enum:ImGuiInputReadMode
ImGuiInputSource	interface/imgui_internal.h	/^enum ImGuiInputSource$/;"	g
ImGuiInputSource_COUNT	interface/imgui_internal.h	/^    ImGuiInputSource_COUNT$/;"	e	enum:ImGuiInputSource
ImGuiInputSource_Mouse	interface/imgui_internal.h	/^    ImGuiInputSource_Mouse,$/;"	e	enum:ImGuiInputSource
ImGuiInputSource_Nav	interface/imgui_internal.h	/^    ImGuiInputSource_Nav,$/;"	e	enum:ImGuiInputSource
ImGuiInputSource_NavGamepad	interface/imgui_internal.h	/^    ImGuiInputSource_NavGamepad,    \/\/ "$/;"	e	enum:ImGuiInputSource
ImGuiInputSource_NavKeyboard	interface/imgui_internal.h	/^    ImGuiInputSource_NavKeyboard,   \/\/ Only used occasionally for storage, not tested\/handled/;"	e	enum:ImGuiInputSource
ImGuiInputSource_None	interface/imgui_internal.h	/^    ImGuiInputSource_None = 0,$/;"	e	enum:ImGuiInputSource
ImGuiInputTextCallback	interface/imgui.h	/^typedef int (*ImGuiInputTextCallback)(ImGuiInputTextCallbackData* data);$/;"	t	typeref:typename:int (*)(ImGuiInputTextCallbackData * data)
ImGuiInputTextCallbackData	interface/imgui.h	/^struct ImGuiInputTextCallbackData$/;"	s
ImGuiInputTextCallbackData	interface/imgui_widgets.cpp	/^ImGuiInputTextCallbackData::ImGuiInputTextCallbackData()$/;"	f	class:ImGuiInputTextCallbackData
ImGuiInputTextFlags	interface/imgui.h	/^typedef int ImGuiInputTextFlags;    \/\/ -> enum ImGuiInputTextFlags_  \/\/ Flags: for InputText/;"	t	typeref:typename:int
ImGuiInputTextFlags_	interface/imgui.h	/^enum ImGuiInputTextFlags_$/;"	g
ImGuiInputTextFlags_AllowTabInput	interface/imgui.h	/^    ImGuiInputTextFlags_AllowTabInput       = 1 << 10,  \/\/ Pressing TAB input a '\\t' characte/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_AlwaysInsertMode	interface/imgui.h	/^    ImGuiInputTextFlags_AlwaysInsertMode    = 1 << 13,  \/\/ Insert mode$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_AutoSelectAll	interface/imgui.h	/^    ImGuiInputTextFlags_AutoSelectAll       = 1 << 4,   \/\/ Select entire text when first takin/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CallbackAlways	interface/imgui.h	/^    ImGuiInputTextFlags_CallbackAlways      = 1 << 8,   \/\/ Callback on each iteration. User co/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CallbackCharFilter	interface/imgui.h	/^    ImGuiInputTextFlags_CallbackCharFilter  = 1 << 9,   \/\/ Callback on character inputs to rep/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CallbackCompletion	interface/imgui.h	/^    ImGuiInputTextFlags_CallbackCompletion  = 1 << 6,   \/\/ Callback on pressing TAB (for compl/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CallbackEdit	interface/imgui.h	/^    ImGuiInputTextFlags_CallbackEdit        = 1 << 19,  \/\/ Callback on any edit (note that Inp/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CallbackHistory	interface/imgui.h	/^    ImGuiInputTextFlags_CallbackHistory     = 1 << 7,   \/\/ Callback on pressing Up\/Down arrow/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CallbackResize	interface/imgui.h	/^    ImGuiInputTextFlags_CallbackResize      = 1 << 18,  \/\/ Callback on buffer capacity changes/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CharsDecimal	interface/imgui.h	/^    ImGuiInputTextFlags_CharsDecimal        = 1 << 0,   \/\/ Allow 0123456789.+-*\/$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CharsHexadecimal	interface/imgui.h	/^    ImGuiInputTextFlags_CharsHexadecimal    = 1 << 1,   \/\/ Allow 0123456789ABCDEFabcdef$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CharsNoBlank	interface/imgui.h	/^    ImGuiInputTextFlags_CharsNoBlank        = 1 << 3,   \/\/ Filter out spaces, tabs$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CharsScientific	interface/imgui.h	/^    ImGuiInputTextFlags_CharsScientific     = 1 << 17,  \/\/ Allow 0123456789.+-*\/eE (Scientifi/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CharsUppercase	interface/imgui.h	/^    ImGuiInputTextFlags_CharsUppercase      = 1 << 2,   \/\/ Turn a..z into A..Z$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CtrlEnterForNewLine	interface/imgui.h	/^    ImGuiInputTextFlags_CtrlEnterForNewLine = 1 << 11,  \/\/ In multi-line mode, unfocus with En/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_EnterReturnsTrue	interface/imgui.h	/^    ImGuiInputTextFlags_EnterReturnsTrue    = 1 << 5,   \/\/ Return 'true' when Enter is pressed/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_Multiline	interface/imgui.h	/^    ImGuiInputTextFlags_Multiline           = 1 << 20,  \/\/ For internal use by InputTextMultil/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_NoHorizontalScroll	interface/imgui.h	/^    ImGuiInputTextFlags_NoHorizontalScroll  = 1 << 12,  \/\/ Disable following the cursor horizo/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_NoMarkEdited	interface/imgui.h	/^    ImGuiInputTextFlags_NoMarkEdited        = 1 << 21   \/\/ For internal use by functions using/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_NoUndoRedo	interface/imgui.h	/^    ImGuiInputTextFlags_NoUndoRedo          = 1 << 16,  \/\/ Disable undo\/redo. Note that input/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_None	interface/imgui.h	/^    ImGuiInputTextFlags_None                = 0,$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_Password	interface/imgui.h	/^    ImGuiInputTextFlags_Password            = 1 << 15,  \/\/ Password mode, display all characte/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_ReadOnly	interface/imgui.h	/^    ImGuiInputTextFlags_ReadOnly            = 1 << 14,  \/\/ Read-only mode$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextState	interface/imgui_internal.h	/^    ImGuiInputTextState()                   { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiInputTextState
ImGuiInputTextState	interface/imgui_internal.h	/^struct IMGUI_API ImGuiInputTextState$/;"	s
ImGuiItemFlags	interface/imgui_internal.h	/^typedef int ImGuiItemFlags;             \/\/ -> enum ImGuiItemFlags_          \/\/ Flags: for Pu/;"	t	typeref:typename:int
ImGuiItemFlags_	interface/imgui_internal.h	/^enum ImGuiItemFlags_$/;"	g
ImGuiItemFlags_ButtonRepeat	interface/imgui_internal.h	/^    ImGuiItemFlags_ButtonRepeat             = 1 << 1,  \/\/ false    \/\/ Button() will return t/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_Default_	interface/imgui_internal.h	/^    ImGuiItemFlags_Default_                 = 0$/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_Disabled	interface/imgui_internal.h	/^    ImGuiItemFlags_Disabled                 = 1 << 2,  \/\/ false    \/\/ [BETA] Disable interac/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_MixedValue	interface/imgui_internal.h	/^    ImGuiItemFlags_MixedValue               = 1 << 6,  \/\/ false    \/\/ [BETA] Represent a mix/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_NoNav	interface/imgui_internal.h	/^    ImGuiItemFlags_NoNav                    = 1 << 3,  \/\/ false$/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_NoNavDefaultFocus	interface/imgui_internal.h	/^    ImGuiItemFlags_NoNavDefaultFocus        = 1 << 4,  \/\/ false$/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_NoTabStop	interface/imgui_internal.h	/^    ImGuiItemFlags_NoTabStop                = 1 << 0,  \/\/ false$/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_None	interface/imgui_internal.h	/^    ImGuiItemFlags_None                     = 0,$/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_ReadOnly	interface/imgui_internal.h	/^    ImGuiItemFlags_ReadOnly                 = 1 << 7,  \/\/ false    \/\/ [ALPHA] Allow hovering/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_SelectableDontClosePopup	interface/imgui_internal.h	/^    ImGuiItemFlags_SelectableDontClosePopup = 1 << 5,  \/\/ false    \/\/ MenuItem\/Selectable()/;"	e	enum:ImGuiItemFlags_
ImGuiItemStatusFlags	interface/imgui_internal.h	/^typedef int ImGuiItemStatusFlags;       \/\/ -> enum ImGuiItemStatusFlags_    \/\/ Flags: for DC/;"	t	typeref:typename:int
ImGuiItemStatusFlags_	interface/imgui_internal.h	/^enum ImGuiItemStatusFlags_$/;"	g
ImGuiItemStatusFlags_Checkable	interface/imgui_internal.h	/^    ImGuiItemStatusFlags_Checkable          = 1 << 12,  \/\/$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Checked	interface/imgui_internal.h	/^    ImGuiItemStatusFlags_Checked            = 1 << 13   \/\/$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Deactivated	interface/imgui_internal.h	/^    ImGuiItemStatusFlags_Deactivated        = 1 << 6    \/\/ Only valid if ImGuiItemStatusFlags_/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Edited	interface/imgui_internal.h	/^    ImGuiItemStatusFlags_Edited             = 1 << 2,   \/\/ Value exposed by item was edited in/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_HasDeactivated	interface/imgui_internal.h	/^    ImGuiItemStatusFlags_HasDeactivated     = 1 << 5,   \/\/ Set if the widget\/group is able to/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_HasDisplayRect	interface/imgui_internal.h	/^    ImGuiItemStatusFlags_HasDisplayRect     = 1 << 1,$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_HoveredRect	interface/imgui_internal.h	/^    ImGuiItemStatusFlags_HoveredRect        = 1 << 0,$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_None	interface/imgui_internal.h	/^    ImGuiItemStatusFlags_None               = 0,$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Openable	interface/imgui_internal.h	/^    ImGuiItemStatusFlags_Openable           = 1 << 10,  \/\/$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Opened	interface/imgui_internal.h	/^    ImGuiItemStatusFlags_Opened             = 1 << 11,  \/\/$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_ToggledOpen	interface/imgui_internal.h	/^    ImGuiItemStatusFlags_ToggledOpen        = 1 << 4,   \/\/ Set when TreeNode() reports togglin/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_ToggledSelection	interface/imgui_internal.h	/^    ImGuiItemStatusFlags_ToggledSelection   = 1 << 3,   \/\/ Set when Selectable(), TreeNode() r/;"	e	enum:ImGuiItemStatusFlags_
ImGuiKey	interface/imgui.h	/^typedef int ImGuiKey;               \/\/ -> enum ImGuiKey_             \/\/ Enum: A key identifi/;"	t	typeref:typename:int
ImGuiKeyModFlags	interface/imgui.h	/^typedef int ImGuiKeyModFlags;       \/\/ -> enum ImGuiKeyModFlags_     \/\/ Flags: for io.KeyMod/;"	t	typeref:typename:int
ImGuiKeyModFlags_	interface/imgui.h	/^enum ImGuiKeyModFlags_$/;"	g
ImGuiKeyModFlags_Alt	interface/imgui.h	/^    ImGuiKeyModFlags_Alt        = 1 << 2,$/;"	e	enum:ImGuiKeyModFlags_
ImGuiKeyModFlags_Ctrl	interface/imgui.h	/^    ImGuiKeyModFlags_Ctrl       = 1 << 0,$/;"	e	enum:ImGuiKeyModFlags_
ImGuiKeyModFlags_None	interface/imgui.h	/^    ImGuiKeyModFlags_None       = 0,$/;"	e	enum:ImGuiKeyModFlags_
ImGuiKeyModFlags_Shift	interface/imgui.h	/^    ImGuiKeyModFlags_Shift      = 1 << 1,$/;"	e	enum:ImGuiKeyModFlags_
ImGuiKeyModFlags_Super	interface/imgui.h	/^    ImGuiKeyModFlags_Super      = 1 << 3$/;"	e	enum:ImGuiKeyModFlags_
ImGuiKey_	interface/imgui.h	/^enum ImGuiKey_$/;"	g
ImGuiKey_A	interface/imgui.h	/^    ImGuiKey_A,                 \/\/ for text edit CTRL+A: select all$/;"	e	enum:ImGuiKey_
ImGuiKey_Backspace	interface/imgui.h	/^    ImGuiKey_Backspace,$/;"	e	enum:ImGuiKey_
ImGuiKey_C	interface/imgui.h	/^    ImGuiKey_C,                 \/\/ for text edit CTRL+C: copy$/;"	e	enum:ImGuiKey_
ImGuiKey_COUNT	interface/imgui.h	/^    ImGuiKey_COUNT$/;"	e	enum:ImGuiKey_
ImGuiKey_Delete	interface/imgui.h	/^    ImGuiKey_Delete,$/;"	e	enum:ImGuiKey_
ImGuiKey_DownArrow	interface/imgui.h	/^    ImGuiKey_DownArrow,$/;"	e	enum:ImGuiKey_
ImGuiKey_End	interface/imgui.h	/^    ImGuiKey_End,$/;"	e	enum:ImGuiKey_
ImGuiKey_Enter	interface/imgui.h	/^    ImGuiKey_Enter,$/;"	e	enum:ImGuiKey_
ImGuiKey_Escape	interface/imgui.h	/^    ImGuiKey_Escape,$/;"	e	enum:ImGuiKey_
ImGuiKey_Home	interface/imgui.h	/^    ImGuiKey_Home,$/;"	e	enum:ImGuiKey_
ImGuiKey_Insert	interface/imgui.h	/^    ImGuiKey_Insert,$/;"	e	enum:ImGuiKey_
ImGuiKey_KeyPadEnter	interface/imgui.h	/^    ImGuiKey_KeyPadEnter,$/;"	e	enum:ImGuiKey_
ImGuiKey_LeftArrow	interface/imgui.h	/^    ImGuiKey_LeftArrow,$/;"	e	enum:ImGuiKey_
ImGuiKey_PageDown	interface/imgui.h	/^    ImGuiKey_PageDown,$/;"	e	enum:ImGuiKey_
ImGuiKey_PageUp	interface/imgui.h	/^    ImGuiKey_PageUp,$/;"	e	enum:ImGuiKey_
ImGuiKey_RightArrow	interface/imgui.h	/^    ImGuiKey_RightArrow,$/;"	e	enum:ImGuiKey_
ImGuiKey_Space	interface/imgui.h	/^    ImGuiKey_Space,$/;"	e	enum:ImGuiKey_
ImGuiKey_Tab	interface/imgui.h	/^    ImGuiKey_Tab,$/;"	e	enum:ImGuiKey_
ImGuiKey_UpArrow	interface/imgui.h	/^    ImGuiKey_UpArrow,$/;"	e	enum:ImGuiKey_
ImGuiKey_V	interface/imgui.h	/^    ImGuiKey_V,                 \/\/ for text edit CTRL+V: paste$/;"	e	enum:ImGuiKey_
ImGuiKey_X	interface/imgui.h	/^    ImGuiKey_X,                 \/\/ for text edit CTRL+X: cut$/;"	e	enum:ImGuiKey_
ImGuiKey_Y	interface/imgui.h	/^    ImGuiKey_Y,                 \/\/ for text edit CTRL+Y: redo$/;"	e	enum:ImGuiKey_
ImGuiKey_Z	interface/imgui.h	/^    ImGuiKey_Z,                 \/\/ for text edit CTRL+Z: undo$/;"	e	enum:ImGuiKey_
ImGuiLastItemDataBackup	interface/imgui_internal.h	/^    ImGuiLastItemDataBackup() { Backup(); }$/;"	f	struct:ImGuiLastItemDataBackup
ImGuiLastItemDataBackup	interface/imgui_internal.h	/^struct ImGuiLastItemDataBackup$/;"	s
ImGuiLayoutType	interface/imgui_internal.h	/^typedef int ImGuiLayoutType;            \/\/ -> enum ImGuiLayoutType_         \/\/ Enum: Horizon/;"	t	typeref:typename:int
ImGuiLayoutType_	interface/imgui_internal.h	/^enum ImGuiLayoutType_$/;"	g
ImGuiLayoutType_Horizontal	interface/imgui_internal.h	/^    ImGuiLayoutType_Horizontal = 0,$/;"	e	enum:ImGuiLayoutType_
ImGuiLayoutType_Vertical	interface/imgui_internal.h	/^    ImGuiLayoutType_Vertical = 1$/;"	e	enum:ImGuiLayoutType_
ImGuiListClipper	interface/imgui.cpp	/^ImGuiListClipper::ImGuiListClipper()$/;"	f	class:ImGuiListClipper
ImGuiListClipper	interface/imgui.h	/^    inline ImGuiListClipper(int items_count, float items_height = -1.0f) { memset(this, 0, sizeo/;"	f	struct:ImGuiListClipper
ImGuiListClipper	interface/imgui.h	/^struct ImGuiListClipper$/;"	s
ImGuiLogType	interface/imgui_internal.h	/^enum ImGuiLogType$/;"	g
ImGuiLogType_Buffer	interface/imgui_internal.h	/^    ImGuiLogType_Buffer,$/;"	e	enum:ImGuiLogType
ImGuiLogType_Clipboard	interface/imgui_internal.h	/^    ImGuiLogType_Clipboard$/;"	e	enum:ImGuiLogType
ImGuiLogType_File	interface/imgui_internal.h	/^    ImGuiLogType_File,$/;"	e	enum:ImGuiLogType
ImGuiLogType_None	interface/imgui_internal.h	/^    ImGuiLogType_None = 0,$/;"	e	enum:ImGuiLogType
ImGuiLogType_TTY	interface/imgui_internal.h	/^    ImGuiLogType_TTY,$/;"	e	enum:ImGuiLogType
ImGuiMenuColumns	interface/imgui_internal.h	/^struct IMGUI_API ImGuiMenuColumns$/;"	s
ImGuiMenuColumns	interface/imgui_widgets.cpp	/^ImGuiMenuColumns::ImGuiMenuColumns()$/;"	f	class:ImGuiMenuColumns
ImGuiMetricsConfig	interface/imgui_internal.h	/^    ImGuiMetricsConfig()$/;"	f	struct:ImGuiMetricsConfig
ImGuiMetricsConfig	interface/imgui_internal.h	/^struct ImGuiMetricsConfig$/;"	s
ImGuiMouseButton	interface/imgui.h	/^typedef int ImGuiMouseButton;       \/\/ -> enum ImGuiMouseButton_     \/\/ Enum: A mouse button/;"	t	typeref:typename:int
ImGuiMouseButton_	interface/imgui.h	/^enum ImGuiMouseButton_$/;"	g
ImGuiMouseButton_COUNT	interface/imgui.h	/^    ImGuiMouseButton_COUNT = 5$/;"	e	enum:ImGuiMouseButton_
ImGuiMouseButton_Left	interface/imgui.h	/^    ImGuiMouseButton_Left = 0,$/;"	e	enum:ImGuiMouseButton_
ImGuiMouseButton_Middle	interface/imgui.h	/^    ImGuiMouseButton_Middle = 2,$/;"	e	enum:ImGuiMouseButton_
ImGuiMouseButton_Right	interface/imgui.h	/^    ImGuiMouseButton_Right = 1,$/;"	e	enum:ImGuiMouseButton_
ImGuiMouseCursor	interface/imgui.h	/^typedef int ImGuiMouseCursor;       \/\/ -> enum ImGuiMouseCursor_     \/\/ Enum: A mouse cursor/;"	t	typeref:typename:int
ImGuiMouseCursor_	interface/imgui.h	/^enum ImGuiMouseCursor_$/;"	g
ImGuiMouseCursor_Arrow	interface/imgui.h	/^    ImGuiMouseCursor_Arrow = 0,$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_COUNT	interface/imgui.h	/^    ImGuiMouseCursor_COUNT$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_Hand	interface/imgui.h	/^    ImGuiMouseCursor_Hand,              \/\/ (Unused by Dear ImGui functions. Use for e.g. hyper/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_None	interface/imgui.h	/^    ImGuiMouseCursor_None = -1,$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_NotAllowed	interface/imgui.h	/^    ImGuiMouseCursor_NotAllowed,        \/\/ When hovering something with disallowed interaction/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_ResizeAll	interface/imgui.h	/^    ImGuiMouseCursor_ResizeAll,         \/\/ (Unused by Dear ImGui functions)$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_ResizeEW	interface/imgui.h	/^    ImGuiMouseCursor_ResizeEW,          \/\/ When hovering over a vertical border or a column$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_ResizeNESW	interface/imgui.h	/^    ImGuiMouseCursor_ResizeNESW,        \/\/ When hovering over the bottom-left corner of a wind/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_ResizeNS	interface/imgui.h	/^    ImGuiMouseCursor_ResizeNS,          \/\/ When hovering over an horizontal border$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_ResizeNWSE	interface/imgui.h	/^    ImGuiMouseCursor_ResizeNWSE,        \/\/ When hovering over the bottom-right corner of a win/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_TextInput	interface/imgui.h	/^    ImGuiMouseCursor_TextInput,         \/\/ When hovering over InputText, etc.$/;"	e	enum:ImGuiMouseCursor_
ImGuiNavDirSourceFlags	interface/imgui_internal.h	/^typedef int ImGuiNavDirSourceFlags;     \/\/ -> enum ImGuiNavDirSourceFlags_  \/\/ Flags: for Ge/;"	t	typeref:typename:int
ImGuiNavDirSourceFlags_	interface/imgui_internal.h	/^enum ImGuiNavDirSourceFlags_$/;"	g
ImGuiNavDirSourceFlags_Keyboard	interface/imgui_internal.h	/^    ImGuiNavDirSourceFlags_Keyboard     = 1 << 0,$/;"	e	enum:ImGuiNavDirSourceFlags_
ImGuiNavDirSourceFlags_None	interface/imgui_internal.h	/^    ImGuiNavDirSourceFlags_None         = 0,$/;"	e	enum:ImGuiNavDirSourceFlags_
ImGuiNavDirSourceFlags_PadDPad	interface/imgui_internal.h	/^    ImGuiNavDirSourceFlags_PadDPad      = 1 << 1,$/;"	e	enum:ImGuiNavDirSourceFlags_
ImGuiNavDirSourceFlags_PadLStick	interface/imgui_internal.h	/^    ImGuiNavDirSourceFlags_PadLStick    = 1 << 2$/;"	e	enum:ImGuiNavDirSourceFlags_
ImGuiNavForward	interface/imgui_internal.h	/^enum ImGuiNavForward$/;"	g
ImGuiNavForward_ForwardActive	interface/imgui_internal.h	/^    ImGuiNavForward_ForwardActive$/;"	e	enum:ImGuiNavForward
ImGuiNavForward_ForwardQueued	interface/imgui_internal.h	/^    ImGuiNavForward_ForwardQueued,$/;"	e	enum:ImGuiNavForward
ImGuiNavForward_None	interface/imgui_internal.h	/^    ImGuiNavForward_None,$/;"	e	enum:ImGuiNavForward
ImGuiNavHighlightFlags	interface/imgui_internal.h	/^typedef int ImGuiNavHighlightFlags;     \/\/ -> enum ImGuiNavHighlightFlags_  \/\/ Flags: for Re/;"	t	typeref:typename:int
ImGuiNavHighlightFlags_	interface/imgui_internal.h	/^enum ImGuiNavHighlightFlags_$/;"	g
ImGuiNavHighlightFlags_AlwaysDraw	interface/imgui_internal.h	/^    ImGuiNavHighlightFlags_AlwaysDraw   = 1 << 2,       \/\/ Draw rectangular highlight if (g.Na/;"	e	enum:ImGuiNavHighlightFlags_
ImGuiNavHighlightFlags_NoRounding	interface/imgui_internal.h	/^    ImGuiNavHighlightFlags_NoRounding   = 1 << 3$/;"	e	enum:ImGuiNavHighlightFlags_
ImGuiNavHighlightFlags_None	interface/imgui_internal.h	/^    ImGuiNavHighlightFlags_None         = 0,$/;"	e	enum:ImGuiNavHighlightFlags_
ImGuiNavHighlightFlags_TypeDefault	interface/imgui_internal.h	/^    ImGuiNavHighlightFlags_TypeDefault  = 1 << 0,$/;"	e	enum:ImGuiNavHighlightFlags_
ImGuiNavHighlightFlags_TypeThin	interface/imgui_internal.h	/^    ImGuiNavHighlightFlags_TypeThin     = 1 << 1,$/;"	e	enum:ImGuiNavHighlightFlags_
ImGuiNavInput	interface/imgui.h	/^typedef int ImGuiNavInput;          \/\/ -> enum ImGuiNavInput_        \/\/ Enum: An input ident/;"	t	typeref:typename:int
ImGuiNavInput_	interface/imgui.h	/^enum ImGuiNavInput_$/;"	g
ImGuiNavInput_Activate	interface/imgui.h	/^    ImGuiNavInput_Activate,      \/\/ activate \/ open \/ toggle \/ tweak value       \/\/ e.g. /;"	e	enum:ImGuiNavInput_
ImGuiNavInput_COUNT	interface/imgui.h	/^    ImGuiNavInput_COUNT,$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_Cancel	interface/imgui.h	/^    ImGuiNavInput_Cancel,        \/\/ cancel \/ close \/ exit                        \/\/ e.g. C/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_DpadDown	interface/imgui.h	/^    ImGuiNavInput_DpadDown,      \/\/$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_DpadLeft	interface/imgui.h	/^    ImGuiNavInput_DpadLeft,      \/\/ move \/ tweak \/ resize window (w\/ PadMenu)    \/\/ e.g. /;"	e	enum:ImGuiNavInput_
ImGuiNavInput_DpadRight	interface/imgui.h	/^    ImGuiNavInput_DpadRight,     \/\/$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_DpadUp	interface/imgui.h	/^    ImGuiNavInput_DpadUp,        \/\/$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_FocusNext	interface/imgui.h	/^    ImGuiNavInput_FocusNext,     \/\/ prev window (w\/ PadMenu)                     \/\/ e.g. R1/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_FocusPrev	interface/imgui.h	/^    ImGuiNavInput_FocusPrev,     \/\/ next window (w\/ PadMenu)                     \/\/ e.g. L1/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_Input	interface/imgui.h	/^    ImGuiNavInput_Input,         \/\/ text input \/ on-screen keyboard              \/\/ e.g. Tr/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_InternalStart_	interface/imgui.h	/^    ImGuiNavInput_InternalStart_ = ImGuiNavInput_KeyMenu_$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_KeyDown_	interface/imgui.h	/^    ImGuiNavInput_KeyDown_,      \/\/ move down$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_KeyLeft_	interface/imgui.h	/^    ImGuiNavInput_KeyLeft_,      \/\/ move left                                    \/\/ = Arrow /;"	e	enum:ImGuiNavInput_
ImGuiNavInput_KeyMenu_	interface/imgui.h	/^    ImGuiNavInput_KeyMenu_,      \/\/ toggle menu                                  \/\/ = io.Key/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_KeyRight_	interface/imgui.h	/^    ImGuiNavInput_KeyRight_,     \/\/ move right$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_KeyUp_	interface/imgui.h	/^    ImGuiNavInput_KeyUp_,        \/\/ move up$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_LStickDown	interface/imgui.h	/^    ImGuiNavInput_LStickDown,    \/\/$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_LStickLeft	interface/imgui.h	/^    ImGuiNavInput_LStickLeft,    \/\/ scroll \/ move window (w\/ PadMenu)            \/\/ e.g. L/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_LStickRight	interface/imgui.h	/^    ImGuiNavInput_LStickRight,   \/\/$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_LStickUp	interface/imgui.h	/^    ImGuiNavInput_LStickUp,      \/\/$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_Menu	interface/imgui.h	/^    ImGuiNavInput_Menu,          \/\/ tap: toggle menu \/ hold: focus, move, resize \/\/ e.g. Sq/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_TweakFast	interface/imgui.h	/^    ImGuiNavInput_TweakFast,     \/\/ faster tweaks                                \/\/ e.g. R1 /;"	e	enum:ImGuiNavInput_
ImGuiNavInput_TweakSlow	interface/imgui.h	/^    ImGuiNavInput_TweakSlow,     \/\/ slower tweaks                                \/\/ e.g. L1 /;"	e	enum:ImGuiNavInput_
ImGuiNavLayer	interface/imgui_internal.h	/^enum ImGuiNavLayer$/;"	g
ImGuiNavLayer_COUNT	interface/imgui_internal.h	/^    ImGuiNavLayer_COUNT$/;"	e	enum:ImGuiNavLayer
ImGuiNavLayer_Main	interface/imgui_internal.h	/^    ImGuiNavLayer_Main  = 0,    \/\/ Main scrolling layer$/;"	e	enum:ImGuiNavLayer
ImGuiNavLayer_Menu	interface/imgui_internal.h	/^    ImGuiNavLayer_Menu  = 1,    \/\/ Menu layer (access with Alt\/ImGuiNavInput_Menu)$/;"	e	enum:ImGuiNavLayer
ImGuiNavMoveFlags	interface/imgui_internal.h	/^typedef int ImGuiNavMoveFlags;          \/\/ -> enum ImGuiNavMoveFlags_       \/\/ Flags: for na/;"	t	typeref:typename:int
ImGuiNavMoveFlags_	interface/imgui_internal.h	/^enum ImGuiNavMoveFlags_$/;"	g
ImGuiNavMoveFlags_AllowCurrentNavId	interface/imgui_internal.h	/^    ImGuiNavMoveFlags_AllowCurrentNavId     = 1 << 4,   \/\/ Allow scoring and considering the c/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_AlsoScoreVisibleSet	interface/imgui_internal.h	/^    ImGuiNavMoveFlags_AlsoScoreVisibleSet   = 1 << 5,   \/\/ Store alternate result in NavMoveRe/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_LoopX	interface/imgui_internal.h	/^    ImGuiNavMoveFlags_LoopX                 = 1 << 0,   \/\/ On failed request, restart from opp/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_LoopY	interface/imgui_internal.h	/^    ImGuiNavMoveFlags_LoopY                 = 1 << 1,$/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_None	interface/imgui_internal.h	/^    ImGuiNavMoveFlags_None                  = 0,$/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_ScrollToEdge	interface/imgui_internal.h	/^    ImGuiNavMoveFlags_ScrollToEdge          = 1 << 6$/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_WrapX	interface/imgui_internal.h	/^    ImGuiNavMoveFlags_WrapX                 = 1 << 2,   \/\/ On failed request, request from opp/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_WrapY	interface/imgui_internal.h	/^    ImGuiNavMoveFlags_WrapY                 = 1 << 3,   \/\/ This is not super useful for provid/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveResult	interface/imgui_internal.h	/^    ImGuiNavMoveResult() { Clear(); }$/;"	f	struct:ImGuiNavMoveResult
ImGuiNavMoveResult	interface/imgui_internal.h	/^struct ImGuiNavMoveResult$/;"	s
ImGuiNextItemData	interface/imgui_internal.h	/^    ImGuiNextItemData()         { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiNextItemData
ImGuiNextItemData	interface/imgui_internal.h	/^struct ImGuiNextItemData$/;"	s
ImGuiNextItemDataFlags	interface/imgui_internal.h	/^typedef int ImGuiNextItemDataFlags;     \/\/ -> enum ImGuiNextItemDataFlags_  \/\/ Flags: for Se/;"	t	typeref:typename:int
ImGuiNextItemDataFlags_	interface/imgui_internal.h	/^enum ImGuiNextItemDataFlags_$/;"	g
ImGuiNextItemDataFlags_HasOpen	interface/imgui_internal.h	/^    ImGuiNextItemDataFlags_HasOpen  = 1 << 1$/;"	e	enum:ImGuiNextItemDataFlags_
ImGuiNextItemDataFlags_HasWidth	interface/imgui_internal.h	/^    ImGuiNextItemDataFlags_HasWidth = 1 << 0,$/;"	e	enum:ImGuiNextItemDataFlags_
ImGuiNextItemDataFlags_None	interface/imgui_internal.h	/^    ImGuiNextItemDataFlags_None     = 0,$/;"	e	enum:ImGuiNextItemDataFlags_
ImGuiNextWindowData	interface/imgui_internal.h	/^    ImGuiNextWindowData()       { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiNextWindowData
ImGuiNextWindowData	interface/imgui_internal.h	/^struct ImGuiNextWindowData$/;"	s
ImGuiNextWindowDataFlags	interface/imgui_internal.h	/^typedef int ImGuiNextWindowDataFlags;   \/\/ -> enum ImGuiNextWindowDataFlags_\/\/ Flags: for Se/;"	t	typeref:typename:int
ImGuiNextWindowDataFlags_	interface/imgui_internal.h	/^enum ImGuiNextWindowDataFlags_$/;"	g
ImGuiNextWindowDataFlags_HasBgAlpha	interface/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasBgAlpha         = 1 << 6,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasCollapsed	interface/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasCollapsed       = 1 << 3,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasContentSize	interface/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasContentSize     = 1 << 2,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasFocus	interface/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasFocus           = 1 << 5,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasPos	interface/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasPos             = 1 << 0,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasScroll	interface/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasScroll          = 1 << 7$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasSize	interface/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasSize            = 1 << 1,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasSizeConstraint	interface/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasSizeConstraint  = 1 << 4,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_None	interface/imgui_internal.h	/^    ImGuiNextWindowDataFlags_None               = 0,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiOnceUponAFrame	interface/imgui.h	/^    ImGuiOnceUponAFrame() { RefFrame = -1; }$/;"	f	struct:ImGuiOnceUponAFrame
ImGuiOnceUponAFrame	interface/imgui.h	/^struct ImGuiOnceUponAFrame$/;"	s
ImGuiPayload	interface/imgui.h	/^    ImGuiPayload()  { Clear(); }$/;"	f	struct:ImGuiPayload
ImGuiPayload	interface/imgui.h	/^struct ImGuiPayload$/;"	s
ImGuiPlotArrayGetterData	interface/imgui_widgets.cpp	/^    ImGuiPlotArrayGetterData(const float* values, int stride) { Values = values; Stride = stride/;"	f	struct:ImGuiPlotArrayGetterData	file:
ImGuiPlotArrayGetterData	interface/imgui_widgets.cpp	/^struct ImGuiPlotArrayGetterData$/;"	s	file:
ImGuiPlotType	interface/imgui_internal.h	/^enum ImGuiPlotType$/;"	g
ImGuiPlotType_Histogram	interface/imgui_internal.h	/^    ImGuiPlotType_Histogram$/;"	e	enum:ImGuiPlotType
ImGuiPlotType_Lines	interface/imgui_internal.h	/^    ImGuiPlotType_Lines,$/;"	e	enum:ImGuiPlotType
ImGuiPopupData	interface/imgui_internal.h	/^    ImGuiPopupData() { PopupId = 0; Window = SourceWindow = NULL; OpenFrameCount = -1; OpenParen/;"	f	struct:ImGuiPopupData
ImGuiPopupData	interface/imgui_internal.h	/^struct ImGuiPopupData$/;"	s
ImGuiPopupFlags	interface/imgui.h	/^typedef int ImGuiPopupFlags;        \/\/ -> enum ImGuiPopupFlags_      \/\/ Flags: for OpenPopup/;"	t	typeref:typename:int
ImGuiPopupFlags_	interface/imgui.h	/^enum ImGuiPopupFlags_$/;"	g
ImGuiPopupFlags_AnyPopup	interface/imgui.h	/^    ImGuiPopupFlags_AnyPopup                = ImGuiPopupFlags_AnyPopupId | ImGuiPopupFlags_AnyPo/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_AnyPopupId	interface/imgui.h	/^    ImGuiPopupFlags_AnyPopupId              = 1 << 7,   \/\/ For IsPopupOpen(): ignore the ImGui/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_AnyPopupLevel	interface/imgui.h	/^    ImGuiPopupFlags_AnyPopupLevel           = 1 << 8,   \/\/ For IsPopupOpen(): search\/test at /;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_MouseButtonDefault_	interface/imgui.h	/^    ImGuiPopupFlags_MouseButtonDefault_     = 1,$/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_MouseButtonLeft	interface/imgui.h	/^    ImGuiPopupFlags_MouseButtonLeft         = 0,        \/\/ For BeginPopupContext*(): open on L/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_MouseButtonMask_	interface/imgui.h	/^    ImGuiPopupFlags_MouseButtonMask_        = 0x1F,$/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_MouseButtonMiddle	interface/imgui.h	/^    ImGuiPopupFlags_MouseButtonMiddle       = 2,        \/\/ For BeginPopupContext*(): open on M/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_MouseButtonRight	interface/imgui.h	/^    ImGuiPopupFlags_MouseButtonRight        = 1,        \/\/ For BeginPopupContext*(): open on R/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_NoOpenOverExistingPopup	interface/imgui.h	/^    ImGuiPopupFlags_NoOpenOverExistingPopup = 1 << 5,   \/\/ For OpenPopup*(), BeginPopupContext/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_NoOpenOverItems	interface/imgui.h	/^    ImGuiPopupFlags_NoOpenOverItems         = 1 << 6,   \/\/ For BeginPopupContextWindow(): don'/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_None	interface/imgui.h	/^    ImGuiPopupFlags_None                    = 0,$/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupPositionPolicy	interface/imgui_internal.h	/^enum ImGuiPopupPositionPolicy$/;"	g
ImGuiPopupPositionPolicy_ComboBox	interface/imgui_internal.h	/^    ImGuiPopupPositionPolicy_ComboBox,$/;"	e	enum:ImGuiPopupPositionPolicy
ImGuiPopupPositionPolicy_Default	interface/imgui_internal.h	/^    ImGuiPopupPositionPolicy_Default,$/;"	e	enum:ImGuiPopupPositionPolicy
ImGuiPopupPositionPolicy_Tooltip	interface/imgui_internal.h	/^    ImGuiPopupPositionPolicy_Tooltip$/;"	e	enum:ImGuiPopupPositionPolicy
ImGuiPtrOrIndex	interface/imgui_internal.h	/^    ImGuiPtrOrIndex(int index)  { Ptr = NULL; Index = index; }$/;"	f	struct:ImGuiPtrOrIndex
ImGuiPtrOrIndex	interface/imgui_internal.h	/^    ImGuiPtrOrIndex(void* ptr)  { Ptr = ptr; Index = -1; }$/;"	f	struct:ImGuiPtrOrIndex
ImGuiPtrOrIndex	interface/imgui_internal.h	/^struct ImGuiPtrOrIndex$/;"	s
ImGuiResizeBorderDef	interface/imgui.cpp	/^struct ImGuiResizeBorderDef$/;"	s	file:
ImGuiResizeGripDef	interface/imgui.cpp	/^struct ImGuiResizeGripDef$/;"	s	file:
ImGuiSelectableFlags	interface/imgui.h	/^typedef int ImGuiSelectableFlags;   \/\/ -> enum ImGuiSelectableFlags_ \/\/ Flags: for Selectabl/;"	t	typeref:typename:int
ImGuiSelectableFlagsPrivate_	interface/imgui_internal.h	/^enum ImGuiSelectableFlagsPrivate_$/;"	g
ImGuiSelectableFlags_	interface/imgui.h	/^enum ImGuiSelectableFlags_$/;"	g
ImGuiSelectableFlags_AllowDoubleClick	interface/imgui.h	/^    ImGuiSelectableFlags_AllowDoubleClick   = 1 << 2,   \/\/ Generate press events on double cli/;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_AllowItemOverlap	interface/imgui.h	/^    ImGuiSelectableFlags_AllowItemOverlap   = 1 << 4    \/\/ (WIP) Hit testing to allow subseque/;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_Disabled	interface/imgui.h	/^    ImGuiSelectableFlags_Disabled           = 1 << 3,   \/\/ Cannot be selected, display grayed /;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_DontClosePopups	interface/imgui.h	/^    ImGuiSelectableFlags_DontClosePopups    = 1 << 0,   \/\/ Clicking this don't close parent po/;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_DrawHoveredWhenHeld	interface/imgui_internal.h	/^    ImGuiSelectableFlags_DrawHoveredWhenHeld    = 1 << 24,  \/\/ Always show active when held, e/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_NoHoldingActiveID	interface/imgui_internal.h	/^    ImGuiSelectableFlags_NoHoldingActiveID      = 1 << 20,$/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_NoPadWithHalfSpacing	interface/imgui_internal.h	/^    ImGuiSelectableFlags_NoPadWithHalfSpacing   = 1 << 26   \/\/ Disable padding each side with /;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_None	interface/imgui.h	/^    ImGuiSelectableFlags_None               = 0,$/;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_SelectOnClick	interface/imgui_internal.h	/^    ImGuiSelectableFlags_SelectOnClick          = 1 << 21,  \/\/ Override button behavior to rea/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_SelectOnRelease	interface/imgui_internal.h	/^    ImGuiSelectableFlags_SelectOnRelease        = 1 << 22,  \/\/ Override button behavior to rea/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_SetNavIdOnHover	interface/imgui_internal.h	/^    ImGuiSelectableFlags_SetNavIdOnHover        = 1 << 25,  \/\/ Set Nav\/Focus ID on mouse hove/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_SpanAllColumns	interface/imgui.h	/^    ImGuiSelectableFlags_SpanAllColumns     = 1 << 1,   \/\/ Selectable frame can span all colum/;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_SpanAvailWidth	interface/imgui_internal.h	/^    ImGuiSelectableFlags_SpanAvailWidth         = 1 << 23,  \/\/ Span all avail width even if we/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSeparatorFlags	interface/imgui_internal.h	/^typedef int ImGuiSeparatorFlags;        \/\/ -> enum ImGuiSeparatorFlags_     \/\/ Flags: for Se/;"	t	typeref:typename:int
ImGuiSeparatorFlags_	interface/imgui_internal.h	/^enum ImGuiSeparatorFlags_$/;"	g
ImGuiSeparatorFlags_Horizontal	interface/imgui_internal.h	/^    ImGuiSeparatorFlags_Horizontal          = 1 << 0,   \/\/ Axis default to current layout type/;"	e	enum:ImGuiSeparatorFlags_
ImGuiSeparatorFlags_None	interface/imgui_internal.h	/^    ImGuiSeparatorFlags_None                = 0,$/;"	e	enum:ImGuiSeparatorFlags_
ImGuiSeparatorFlags_SpanAllColumns	interface/imgui_internal.h	/^    ImGuiSeparatorFlags_SpanAllColumns      = 1 << 2$/;"	e	enum:ImGuiSeparatorFlags_
ImGuiSeparatorFlags_Vertical	interface/imgui_internal.h	/^    ImGuiSeparatorFlags_Vertical            = 1 << 1,$/;"	e	enum:ImGuiSeparatorFlags_
ImGuiSettingsHandler	interface/imgui_internal.h	/^    ImGuiSettingsHandler() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiSettingsHandler
ImGuiSettingsHandler	interface/imgui_internal.h	/^struct ImGuiSettingsHandler$/;"	s
ImGuiShrinkWidthItem	interface/imgui_internal.h	/^struct ImGuiShrinkWidthItem$/;"	s
ImGuiSizeCallback	interface/imgui.h	/^typedef void (*ImGuiSizeCallback)(ImGuiSizeCallbackData* data);$/;"	t	typeref:typename:void (*)(ImGuiSizeCallbackData * data)
ImGuiSizeCallbackData	interface/imgui.h	/^struct ImGuiSizeCallbackData$/;"	s
ImGuiSliderFlags	interface/imgui.h	/^typedef int ImGuiSliderFlags;       \/\/ -> enum ImGuiSliderFlags_     \/\/ Flags: for DragFloat/;"	t	typeref:typename:int
ImGuiSliderFlagsPrivate_	interface/imgui_internal.h	/^enum ImGuiSliderFlagsPrivate_$/;"	g
ImGuiSliderFlags_	interface/imgui.h	/^enum ImGuiSliderFlags_$/;"	g
ImGuiSliderFlags_AlwaysClamp	interface/imgui.h	/^    ImGuiSliderFlags_AlwaysClamp            = 1 << 4,       \/\/ Clamp value to min\/max bounds /;"	e	enum:ImGuiSliderFlags_
ImGuiSliderFlags_ClampOnInput	interface/imgui.h	/^    , ImGuiSliderFlags_ClampOnInput = ImGuiSliderFlags_AlwaysClamp \/\/ [renamed in 1.79]$/;"	e	enum:ImGuiSliderFlags_
ImGuiSliderFlags_InvalidMask_	interface/imgui.h	/^    ImGuiSliderFlags_InvalidMask_           = 0x7000000F    \/\/ [Internal] We treat using those/;"	e	enum:ImGuiSliderFlags_
ImGuiSliderFlags_Logarithmic	interface/imgui.h	/^    ImGuiSliderFlags_Logarithmic            = 1 << 5,       \/\/ Make the widget logarithmic (li/;"	e	enum:ImGuiSliderFlags_
ImGuiSliderFlags_NoInput	interface/imgui.h	/^    ImGuiSliderFlags_NoInput                = 1 << 7,       \/\/ Disable CTRL+Click or Enter key/;"	e	enum:ImGuiSliderFlags_
ImGuiSliderFlags_NoRoundToFormat	interface/imgui.h	/^    ImGuiSliderFlags_NoRoundToFormat        = 1 << 6,       \/\/ Disable rounding underlying val/;"	e	enum:ImGuiSliderFlags_
ImGuiSliderFlags_None	interface/imgui.h	/^    ImGuiSliderFlags_None                   = 0,$/;"	e	enum:ImGuiSliderFlags_
ImGuiSliderFlags_ReadOnly	interface/imgui_internal.h	/^    ImGuiSliderFlags_ReadOnly               = 1 << 21$/;"	e	enum:ImGuiSliderFlagsPrivate_
ImGuiSliderFlags_Vertical	interface/imgui_internal.h	/^    ImGuiSliderFlags_Vertical               = 1 << 20,  \/\/ Should this slider be orientated ve/;"	e	enum:ImGuiSliderFlagsPrivate_
ImGuiStorage	interface/imgui.h	/^struct ImGuiStorage$/;"	s
ImGuiStoragePair	interface/imgui.h	/^        ImGuiStoragePair(ImGuiID _key, float _val_f)    { key = _key; val_f = _val_f; }$/;"	f	struct:ImGuiStorage::ImGuiStoragePair
ImGuiStoragePair	interface/imgui.h	/^        ImGuiStoragePair(ImGuiID _key, int _val_i)      { key = _key; val_i = _val_i; }$/;"	f	struct:ImGuiStorage::ImGuiStoragePair
ImGuiStoragePair	interface/imgui.h	/^        ImGuiStoragePair(ImGuiID _key, void* _val_p)    { key = _key; val_p = _val_p; }$/;"	f	struct:ImGuiStorage::ImGuiStoragePair
ImGuiStoragePair	interface/imgui.h	/^    struct ImGuiStoragePair$/;"	s	struct:ImGuiStorage
ImGuiStyle	interface/imgui.cpp	/^ImGuiStyle::ImGuiStyle()$/;"	f	class:ImGuiStyle
ImGuiStyle	interface/imgui.h	/^struct ImGuiStyle$/;"	s
ImGuiStyleMod	interface/imgui_internal.h	/^    ImGuiStyleMod(ImGuiStyleVar idx, ImVec2 v)  { VarIdx = idx; BackupFloat[0] = v.x; BackupFloa/;"	f	struct:ImGuiStyleMod
ImGuiStyleMod	interface/imgui_internal.h	/^    ImGuiStyleMod(ImGuiStyleVar idx, float v)   { VarIdx = idx; BackupFloat[0] = v; }$/;"	f	struct:ImGuiStyleMod
ImGuiStyleMod	interface/imgui_internal.h	/^    ImGuiStyleMod(ImGuiStyleVar idx, int v)     { VarIdx = idx; BackupInt[0] = v; }$/;"	f	struct:ImGuiStyleMod
ImGuiStyleMod	interface/imgui_internal.h	/^struct ImGuiStyleMod$/;"	s
ImGuiStyleVar	interface/imgui.h	/^typedef int ImGuiStyleVar;          \/\/ -> enum ImGuiStyleVar_        \/\/ Enum: A variable ide/;"	t	typeref:typename:int
ImGuiStyleVarInfo	interface/imgui.cpp	/^struct ImGuiStyleVarInfo$/;"	s	file:
ImGuiStyleVar_	interface/imgui.h	/^enum ImGuiStyleVar_$/;"	g
ImGuiStyleVar_Alpha	interface/imgui.h	/^    ImGuiStyleVar_Alpha,               \/\/ float     Alpha$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ButtonTextAlign	interface/imgui.h	/^    ImGuiStyleVar_ButtonTextAlign,     \/\/ ImVec2    ButtonTextAlign$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_COUNT	interface/imgui.h	/^    ImGuiStyleVar_COUNT$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ChildBorderSize	interface/imgui.h	/^    ImGuiStyleVar_ChildBorderSize,     \/\/ float     ChildBorderSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ChildRounding	interface/imgui.h	/^    ImGuiStyleVar_ChildRounding,       \/\/ float     ChildRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_FrameBorderSize	interface/imgui.h	/^    ImGuiStyleVar_FrameBorderSize,     \/\/ float     FrameBorderSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_FramePadding	interface/imgui.h	/^    ImGuiStyleVar_FramePadding,        \/\/ ImVec2    FramePadding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_FrameRounding	interface/imgui.h	/^    ImGuiStyleVar_FrameRounding,       \/\/ float     FrameRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_GrabMinSize	interface/imgui.h	/^    ImGuiStyleVar_GrabMinSize,         \/\/ float     GrabMinSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_GrabRounding	interface/imgui.h	/^    ImGuiStyleVar_GrabRounding,        \/\/ float     GrabRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_IndentSpacing	interface/imgui.h	/^    ImGuiStyleVar_IndentSpacing,       \/\/ float     IndentSpacing$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ItemInnerSpacing	interface/imgui.h	/^    ImGuiStyleVar_ItemInnerSpacing,    \/\/ ImVec2    ItemInnerSpacing$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ItemSpacing	interface/imgui.h	/^    ImGuiStyleVar_ItemSpacing,         \/\/ ImVec2    ItemSpacing$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_PopupBorderSize	interface/imgui.h	/^    ImGuiStyleVar_PopupBorderSize,     \/\/ float     PopupBorderSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_PopupRounding	interface/imgui.h	/^    ImGuiStyleVar_PopupRounding,       \/\/ float     PopupRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ScrollbarRounding	interface/imgui.h	/^    ImGuiStyleVar_ScrollbarRounding,   \/\/ float     ScrollbarRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ScrollbarSize	interface/imgui.h	/^    ImGuiStyleVar_ScrollbarSize,       \/\/ float     ScrollbarSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_SelectableTextAlign	interface/imgui.h	/^    ImGuiStyleVar_SelectableTextAlign, \/\/ ImVec2    SelectableTextAlign$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_TabRounding	interface/imgui.h	/^    ImGuiStyleVar_TabRounding,         \/\/ float     TabRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_WindowBorderSize	interface/imgui.h	/^    ImGuiStyleVar_WindowBorderSize,    \/\/ float     WindowBorderSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_WindowMinSize	interface/imgui.h	/^    ImGuiStyleVar_WindowMinSize,       \/\/ ImVec2    WindowMinSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_WindowPadding	interface/imgui.h	/^    ImGuiStyleVar_WindowPadding,       \/\/ ImVec2    WindowPadding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_WindowRounding	interface/imgui.h	/^    ImGuiStyleVar_WindowRounding,      \/\/ float     WindowRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_WindowTitleAlign	interface/imgui.h	/^    ImGuiStyleVar_WindowTitleAlign,    \/\/ ImVec2    WindowTitleAlign$/;"	e	enum:ImGuiStyleVar_
ImGuiTabBar	interface/imgui_internal.h	/^struct ImGuiTabBar$/;"	s
ImGuiTabBar	interface/imgui_widgets.cpp	/^ImGuiTabBar::ImGuiTabBar()$/;"	f	class:ImGuiTabBar
ImGuiTabBarFlags	interface/imgui.h	/^typedef int ImGuiTabBarFlags;       \/\/ -> enum ImGuiTabBarFlags_     \/\/ Flags: for BeginTabB/;"	t	typeref:typename:int
ImGuiTabBarFlagsPrivate_	interface/imgui_internal.h	/^enum ImGuiTabBarFlagsPrivate_$/;"	g
ImGuiTabBarFlags_	interface/imgui.h	/^enum ImGuiTabBarFlags_$/;"	g
ImGuiTabBarFlags_AutoSelectNewTabs	interface/imgui.h	/^    ImGuiTabBarFlags_AutoSelectNewTabs              = 1 << 1,   \/\/ Automatically select new ta/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_DockNode	interface/imgui_internal.h	/^    ImGuiTabBarFlags_DockNode                   = 1 << 20,  \/\/ Part of a dock node [we don't u/;"	e	enum:ImGuiTabBarFlagsPrivate_
ImGuiTabBarFlags_FittingPolicyDefault_	interface/imgui.h	/^    ImGuiTabBarFlags_FittingPolicyDefault_          = ImGuiTabBarFlags_FittingPolicyResizeDown$/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_FittingPolicyMask_	interface/imgui.h	/^    ImGuiTabBarFlags_FittingPolicyMask_             = ImGuiTabBarFlags_FittingPolicyResizeDown |/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_FittingPolicyResizeDown	interface/imgui.h	/^    ImGuiTabBarFlags_FittingPolicyResizeDown        = 1 << 6,   \/\/ Resize tabs when they don't/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_FittingPolicyScroll	interface/imgui.h	/^    ImGuiTabBarFlags_FittingPolicyScroll            = 1 << 7,   \/\/ Add scroll buttons when tab/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_IsFocused	interface/imgui_internal.h	/^    ImGuiTabBarFlags_IsFocused                  = 1 << 21,$/;"	e	enum:ImGuiTabBarFlagsPrivate_
ImGuiTabBarFlags_NoCloseWithMiddleMouseButton	interface/imgui.h	/^    ImGuiTabBarFlags_NoCloseWithMiddleMouseButton   = 1 << 3,   \/\/ Disable behavior of closing/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_NoTabListScrollingButtons	interface/imgui.h	/^    ImGuiTabBarFlags_NoTabListScrollingButtons      = 1 << 4,   \/\/ Disable scrolling buttons (/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_NoTooltip	interface/imgui.h	/^    ImGuiTabBarFlags_NoTooltip                      = 1 << 5,   \/\/ Disable tooltips when hover/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_None	interface/imgui.h	/^    ImGuiTabBarFlags_None                           = 0,$/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_Reorderable	interface/imgui.h	/^    ImGuiTabBarFlags_Reorderable                    = 1 << 0,   \/\/ Allow manually dragging tab/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_SaveSettings	interface/imgui_internal.h	/^    ImGuiTabBarFlags_SaveSettings               = 1 << 22   \/\/ FIXME: Settings are handled by /;"	e	enum:ImGuiTabBarFlagsPrivate_
ImGuiTabBarFlags_TabListPopupButton	interface/imgui.h	/^    ImGuiTabBarFlags_TabListPopupButton             = 1 << 2,   \/\/ Disable buttons to open the/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarSection	interface/imgui_widgets.cpp	/^    ImGuiTabBarSection() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiTabBarSection	file:
ImGuiTabBarSection	interface/imgui_widgets.cpp	/^struct ImGuiTabBarSection$/;"	s	file:
ImGuiTabItem	interface/imgui_internal.h	/^    ImGuiTabItem()      { memset(this, 0, sizeof(*this)); LastFrameVisible = LastFrameSelected =/;"	f	struct:ImGuiTabItem
ImGuiTabItem	interface/imgui_internal.h	/^struct ImGuiTabItem$/;"	s
ImGuiTabItemFlags	interface/imgui.h	/^typedef int ImGuiTabItemFlags;      \/\/ -> enum ImGuiTabItemFlags_    \/\/ Flags: for BeginTabI/;"	t	typeref:typename:int
ImGuiTabItemFlagsPrivate_	interface/imgui_internal.h	/^enum ImGuiTabItemFlagsPrivate_$/;"	g
ImGuiTabItemFlags_	interface/imgui.h	/^enum ImGuiTabItemFlags_$/;"	g
ImGuiTabItemFlags_Button	interface/imgui_internal.h	/^    ImGuiTabItemFlags_Button                    = 1 << 21   \/\/ Used by TabItemButton, change t/;"	e	enum:ImGuiTabItemFlagsPrivate_
ImGuiTabItemFlags_Leading	interface/imgui.h	/^    ImGuiTabItemFlags_Leading                       = 1 << 6,   \/\/ Enforce the tab position to/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_NoCloseButton	interface/imgui_internal.h	/^    ImGuiTabItemFlags_NoCloseButton             = 1 << 20,  \/\/ Track whether p_open was set or/;"	e	enum:ImGuiTabItemFlagsPrivate_
ImGuiTabItemFlags_NoCloseWithMiddleMouseButton	interface/imgui.h	/^    ImGuiTabItemFlags_NoCloseWithMiddleMouseButton  = 1 << 2,   \/\/ Disable behavior of closing/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_NoPushId	interface/imgui.h	/^    ImGuiTabItemFlags_NoPushId                      = 1 << 3,   \/\/ Don't call PushID(tab->ID)\//;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_NoReorder	interface/imgui.h	/^    ImGuiTabItemFlags_NoReorder                     = 1 << 5,   \/\/ Disable reordering this tab/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_NoTooltip	interface/imgui.h	/^    ImGuiTabItemFlags_NoTooltip                     = 1 << 4,   \/\/ Disable tooltip for the giv/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_None	interface/imgui.h	/^    ImGuiTabItemFlags_None                          = 0,$/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_SetSelected	interface/imgui.h	/^    ImGuiTabItemFlags_SetSelected                   = 1 << 1,   \/\/ Trigger flag to programmati/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_Trailing	interface/imgui.h	/^    ImGuiTabItemFlags_Trailing                      = 1 << 7    \/\/ Enforce the tab position to/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_UnsavedDocument	interface/imgui.h	/^    ImGuiTabItemFlags_UnsavedDocument               = 1 << 0,   \/\/ Append '*' to title without/;"	e	enum:ImGuiTabItemFlags_
ImGuiTextBuffer	interface/imgui.h	/^    ImGuiTextBuffer()   { }$/;"	f	struct:ImGuiTextBuffer
ImGuiTextBuffer	interface/imgui.h	/^struct ImGuiTextBuffer$/;"	s
ImGuiTextEditCallback	interface/imgui.h	/^typedef ImGuiInputTextCallback      ImGuiTextEditCallback;    \/\/ OBSOLETED in 1.63 (from Aug 2/;"	t	typeref:typename:ImGuiInputTextCallback
ImGuiTextEditCallbackData	interface/imgui.h	/^typedef ImGuiInputTextCallbackData  ImGuiTextEditCallbackData;$/;"	t	typeref:typename:ImGuiInputTextCallbackData
ImGuiTextFilter	interface/imgui.cpp	/^ImGuiTextFilter::ImGuiTextFilter(const char* default_filter)$/;"	f	class:ImGuiTextFilter
ImGuiTextFilter	interface/imgui.h	/^struct ImGuiTextFilter$/;"	s
ImGuiTextFlags	interface/imgui_internal.h	/^typedef int ImGuiTextFlags;             \/\/ -> enum ImGuiTextFlags_          \/\/ Flags: for Te/;"	t	typeref:typename:int
ImGuiTextFlags_	interface/imgui_internal.h	/^enum ImGuiTextFlags_$/;"	g
ImGuiTextFlags_NoWidthForLargeClippedText	interface/imgui_internal.h	/^    ImGuiTextFlags_NoWidthForLargeClippedText = 1 << 0$/;"	e	enum:ImGuiTextFlags_
ImGuiTextFlags_None	interface/imgui_internal.h	/^    ImGuiTextFlags_None = 0,$/;"	e	enum:ImGuiTextFlags_
ImGuiTextRange	interface/imgui.h	/^        ImGuiTextRange()                                { b = e = NULL; }$/;"	f	struct:ImGuiTextFilter::ImGuiTextRange
ImGuiTextRange	interface/imgui.h	/^        ImGuiTextRange(const char* _b, const char* _e)  { b = _b; e = _e; }$/;"	f	struct:ImGuiTextFilter::ImGuiTextRange
ImGuiTextRange	interface/imgui.h	/^    struct ImGuiTextRange$/;"	s	struct:ImGuiTextFilter
ImGuiTooltipFlags	interface/imgui_internal.h	/^typedef int ImGuiTooltipFlags;          \/\/ -> enum ImGuiTooltipFlags_       \/\/ Flags: for Be/;"	t	typeref:typename:int
ImGuiTooltipFlags_	interface/imgui_internal.h	/^enum ImGuiTooltipFlags_$/;"	g
ImGuiTooltipFlags_None	interface/imgui_internal.h	/^    ImGuiTooltipFlags_None = 0,$/;"	e	enum:ImGuiTooltipFlags_
ImGuiTooltipFlags_OverridePreviousTooltip	interface/imgui_internal.h	/^    ImGuiTooltipFlags_OverridePreviousTooltip = 1 << 0      \/\/ Override will clear\/ignore pre/;"	e	enum:ImGuiTooltipFlags_
ImGuiTreeNodeFlags	interface/imgui.h	/^typedef int ImGuiTreeNodeFlags;     \/\/ -> enum ImGuiTreeNodeFlags_   \/\/ Flags: for TreeNode(/;"	t	typeref:typename:int
ImGuiTreeNodeFlagsPrivate_	interface/imgui_internal.h	/^enum ImGuiTreeNodeFlagsPrivate_$/;"	g
ImGuiTreeNodeFlags_	interface/imgui.h	/^enum ImGuiTreeNodeFlags_$/;"	g
ImGuiTreeNodeFlags_AllowItemOverlap	interface/imgui.h	/^    ImGuiTreeNodeFlags_AllowItemOverlap     = 1 << 2,   \/\/ Hit testing to allow subsequent wid/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_Bullet	interface/imgui.h	/^    ImGuiTreeNodeFlags_Bullet               = 1 << 9,   \/\/ Display a bullet instead of arrow$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_ClipLabelForTrailingButton	interface/imgui_internal.h	/^    ImGuiTreeNodeFlags_ClipLabelForTrailingButton = 1 << 20$/;"	e	enum:ImGuiTreeNodeFlagsPrivate_
ImGuiTreeNodeFlags_CollapsingHeader	interface/imgui.h	/^    ImGuiTreeNodeFlags_CollapsingHeader     = ImGuiTreeNodeFlags_Framed | ImGuiTreeNodeFlags_NoT/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_DefaultOpen	interface/imgui.h	/^    ImGuiTreeNodeFlags_DefaultOpen          = 1 << 5,   \/\/ Default node to be open$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_FramePadding	interface/imgui.h	/^    ImGuiTreeNodeFlags_FramePadding         = 1 << 10,  \/\/ Use FramePadding (even for an unfra/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_Framed	interface/imgui.h	/^    ImGuiTreeNodeFlags_Framed               = 1 << 1,   \/\/ Draw frame with background (e.g. fo/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_Leaf	interface/imgui.h	/^    ImGuiTreeNodeFlags_Leaf                 = 1 << 8,   \/\/ No collapsing, no arrow (use as a c/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_NavLeftJumpsBackHere	interface/imgui.h	/^    ImGuiTreeNodeFlags_NavLeftJumpsBackHere = 1 << 13,  \/\/ (WIP) Nav: left direction may move /;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_NoAutoOpenOnLog	interface/imgui.h	/^    ImGuiTreeNodeFlags_NoAutoOpenOnLog      = 1 << 4,   \/\/ Don't automatically and temporarily/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_NoTreePushOnOpen	interface/imgui.h	/^    ImGuiTreeNodeFlags_NoTreePushOnOpen     = 1 << 3,   \/\/ Don't do a TreePush() when open (e./;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_None	interface/imgui.h	/^    ImGuiTreeNodeFlags_None                 = 0,$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_OpenOnArrow	interface/imgui.h	/^    ImGuiTreeNodeFlags_OpenOnArrow          = 1 << 7,   \/\/ Only open when clicking on the arro/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_OpenOnDoubleClick	interface/imgui.h	/^    ImGuiTreeNodeFlags_OpenOnDoubleClick    = 1 << 6,   \/\/ Need double-click to open node$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_Selected	interface/imgui.h	/^    ImGuiTreeNodeFlags_Selected             = 1 << 0,   \/\/ Draw as selected$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_SpanAvailWidth	interface/imgui.h	/^    ImGuiTreeNodeFlags_SpanAvailWidth       = 1 << 11,  \/\/ Extend hit box to the right-most ed/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_SpanFullWidth	interface/imgui.h	/^    ImGuiTreeNodeFlags_SpanFullWidth        = 1 << 12,  \/\/ Extend hit box to the left-most and/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiWindow	interface/imgui.cpp	/^ImGuiWindow::ImGuiWindow(ImGuiContext* context, const char* name)$/;"	f	class:ImGuiWindow
ImGuiWindow	interface/imgui_internal.h	/^struct IMGUI_API ImGuiWindow$/;"	s
ImGuiWindowFlags	interface/imgui.h	/^typedef int ImGuiWindowFlags;       \/\/ -> enum ImGuiWindowFlags_     \/\/ Flags: for Begin(), /;"	t	typeref:typename:int
ImGuiWindowFlags_	interface/imgui.h	/^enum ImGuiWindowFlags_$/;"	g
ImGuiWindowFlags_AlwaysAutoResize	interface/imgui.h	/^    ImGuiWindowFlags_AlwaysAutoResize       = 1 << 6,   \/\/ Resize every window to its content /;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_AlwaysHorizontalScrollbar	interface/imgui.h	/^    ImGuiWindowFlags_AlwaysHorizontalScrollbar=1<< 15,  \/\/ Always show horizontal scrollbar (e/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_AlwaysUseWindowPadding	interface/imgui.h	/^    ImGuiWindowFlags_AlwaysUseWindowPadding = 1 << 16,  \/\/ Ensure child windows without border/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_AlwaysVerticalScrollbar	interface/imgui.h	/^    ImGuiWindowFlags_AlwaysVerticalScrollbar= 1 << 14,  \/\/ Always show vertical scrollbar (eve/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_ChildMenu	interface/imgui.h	/^    ImGuiWindowFlags_ChildMenu              = 1 << 28   \/\/ Don't use! For internal use by Begi/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_ChildWindow	interface/imgui.h	/^    ImGuiWindowFlags_ChildWindow            = 1 << 24,  \/\/ Don't use! For internal use by Begi/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_HorizontalScrollbar	interface/imgui.h	/^    ImGuiWindowFlags_HorizontalScrollbar    = 1 << 11,  \/\/ Allow horizontal scrollbar to appea/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_MenuBar	interface/imgui.h	/^    ImGuiWindowFlags_MenuBar                = 1 << 10,  \/\/ Has a menu-bar$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_Modal	interface/imgui.h	/^    ImGuiWindowFlags_Modal                  = 1 << 27,  \/\/ Don't use! For internal use by Begi/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NavFlattened	interface/imgui.h	/^    ImGuiWindowFlags_NavFlattened           = 1 << 23,  \/\/ [BETA] Allow gamepad\/keyboard navi/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoBackground	interface/imgui.h	/^    ImGuiWindowFlags_NoBackground           = 1 << 7,   \/\/ Disable drawing background color (W/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoBringToFrontOnFocus	interface/imgui.h	/^    ImGuiWindowFlags_NoBringToFrontOnFocus  = 1 << 13,  \/\/ Disable bringing window to front wh/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoCollapse	interface/imgui.h	/^    ImGuiWindowFlags_NoCollapse             = 1 << 5,   \/\/ Disable user collapsing window by d/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoDecoration	interface/imgui.h	/^    ImGuiWindowFlags_NoDecoration           = ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoR/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoFocusOnAppearing	interface/imgui.h	/^    ImGuiWindowFlags_NoFocusOnAppearing     = 1 << 12,  \/\/ Disable taking focus when transitio/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoInputs	interface/imgui.h	/^    ImGuiWindowFlags_NoInputs               = ImGuiWindowFlags_NoMouseInputs | ImGuiWindowFlags_/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoMouseInputs	interface/imgui.h	/^    ImGuiWindowFlags_NoMouseInputs          = 1 << 9,   \/\/ Disable catching mouse, hovering te/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoMove	interface/imgui.h	/^    ImGuiWindowFlags_NoMove                 = 1 << 2,   \/\/ Disable user moving the window$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoNav	interface/imgui.h	/^    ImGuiWindowFlags_NoNav                  = ImGuiWindowFlags_NoNavInputs | ImGuiWindowFlags_No/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoNavFocus	interface/imgui.h	/^    ImGuiWindowFlags_NoNavFocus             = 1 << 19,  \/\/ No focusing toward this window with/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoNavInputs	interface/imgui.h	/^    ImGuiWindowFlags_NoNavInputs            = 1 << 18,  \/\/ No gamepad\/keyboard navigation wit/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoResize	interface/imgui.h	/^    ImGuiWindowFlags_NoResize               = 1 << 1,   \/\/ Disable user resizing with the lowe/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoSavedSettings	interface/imgui.h	/^    ImGuiWindowFlags_NoSavedSettings        = 1 << 8,   \/\/ Never load\/save settings in .ini f/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoScrollWithMouse	interface/imgui.h	/^    ImGuiWindowFlags_NoScrollWithMouse      = 1 << 4,   \/\/ Disable user vertically scrolling w/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoScrollbar	interface/imgui.h	/^    ImGuiWindowFlags_NoScrollbar            = 1 << 3,   \/\/ Disable scrollbars (window can stil/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoTitleBar	interface/imgui.h	/^    ImGuiWindowFlags_NoTitleBar             = 1 << 0,   \/\/ Disable title-bar$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_None	interface/imgui.h	/^    ImGuiWindowFlags_None                   = 0,$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_Popup	interface/imgui.h	/^    ImGuiWindowFlags_Popup                  = 1 << 26,  \/\/ Don't use! For internal use by Begi/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_Tooltip	interface/imgui.h	/^    ImGuiWindowFlags_Tooltip                = 1 << 25,  \/\/ Don't use! For internal use by Begi/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_UnsavedDocument	interface/imgui.h	/^    ImGuiWindowFlags_UnsavedDocument        = 1 << 20,  \/\/ Append '*' to title without affecti/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowSettings	interface/imgui_internal.h	/^    ImGuiWindowSettings()       { ID = 0; Pos = Size = ImVec2ih(0, 0); Collapsed = WantApply = f/;"	f	struct:ImGuiWindowSettings
ImGuiWindowSettings	interface/imgui_internal.h	/^struct ImGuiWindowSettings$/;"	s
ImGuiWindowTempData	interface/imgui_internal.h	/^    ImGuiWindowTempData()$/;"	f	struct:ImGuiWindowTempData
ImGuiWindowTempData	interface/imgui_internal.h	/^struct IMGUI_API ImGuiWindowTempData$/;"	s
ImGui_ImplSDL2_GetClipboardText	interface/imgui_impl_sdl.cpp	/^static const char* ImGui_ImplSDL2_GetClipboardText(void*)$/;"	f	typeref:typename:const char *	file:
ImGui_ImplSDL2_Init	interface/imgui_impl_sdl.cpp	/^static bool ImGui_ImplSDL2_Init(SDL_Window* window)$/;"	f	typeref:typename:bool	file:
ImGui_ImplSDL2_InitForD3D	interface/imgui_impl_sdl.cpp	/^bool ImGui_ImplSDL2_InitForD3D(SDL_Window* window)$/;"	f	typeref:typename:bool
ImGui_ImplSDL2_InitForMetal	interface/imgui_impl_sdl.cpp	/^bool ImGui_ImplSDL2_InitForMetal(SDL_Window* window)$/;"	f	typeref:typename:bool
ImGui_ImplSDL2_InitForOpenGL	interface/imgui_impl_sdl.cpp	/^bool ImGui_ImplSDL2_InitForOpenGL(SDL_Window* window, void* sdl_gl_context)$/;"	f	typeref:typename:bool
ImGui_ImplSDL2_InitForVulkan	interface/imgui_impl_sdl.cpp	/^bool ImGui_ImplSDL2_InitForVulkan(SDL_Window* window)$/;"	f	typeref:typename:bool
ImGui_ImplSDL2_NewFrame	interface/imgui_impl_sdl.cpp	/^void ImGui_ImplSDL2_NewFrame(SDL_Window* window)$/;"	f	typeref:typename:void
ImGui_ImplSDL2_ProcessEvent	interface/imgui_impl_sdl.cpp	/^bool ImGui_ImplSDL2_ProcessEvent(const SDL_Event* event)$/;"	f	typeref:typename:bool
ImGui_ImplSDL2_SetClipboardText	interface/imgui_impl_sdl.cpp	/^static void ImGui_ImplSDL2_SetClipboardText(void*, const char* text)$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL2_Shutdown	interface/imgui_impl_sdl.cpp	/^void ImGui_ImplSDL2_Shutdown()$/;"	f	typeref:typename:void
ImGui_ImplSDL2_UpdateGamepads	interface/imgui_impl_sdl.cpp	/^static void ImGui_ImplSDL2_UpdateGamepads()$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL2_UpdateMouseCursor	interface/imgui_impl_sdl.cpp	/^static void ImGui_ImplSDL2_UpdateMouseCursor()$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL2_UpdateMousePosAndButtons	interface/imgui_impl_sdl.cpp	/^static void ImGui_ImplSDL2_UpdateMousePosAndButtons()$/;"	f	typeref:typename:void	file:
ImGui_ImplVulkanH_CreateOrResizeWindow	interface/imgui_impl_vulkan.cpp	/^void ImGui_ImplVulkanH_CreateOrResizeWindow(VkInstance instance, VkPhysicalDevice physical_devic/;"	f	typeref:typename:void
ImGui_ImplVulkanH_CreateWindowCommandBuffers	interface/imgui_impl_vulkan.cpp	/^void ImGui_ImplVulkanH_CreateWindowCommandBuffers(VkPhysicalDevice physical_device, VkDevice dev/;"	f	typeref:typename:void
ImGui_ImplVulkanH_CreateWindowSwapChain	interface/imgui_impl_vulkan.cpp	/^void ImGui_ImplVulkanH_CreateWindowSwapChain(VkPhysicalDevice physical_device, VkDevice device, /;"	f	typeref:typename:void
ImGui_ImplVulkanH_DestroyFrame	interface/imgui_impl_vulkan.cpp	/^void ImGui_ImplVulkanH_DestroyFrame(VkDevice device, ImGui_ImplVulkanH_Frame* fd, const VkAlloca/;"	f	typeref:typename:void
ImGui_ImplVulkanH_DestroyFrameRenderBuffers	interface/imgui_impl_vulkan.cpp	/^void ImGui_ImplVulkanH_DestroyFrameRenderBuffers(VkDevice device, ImGui_ImplVulkanH_FrameRenderB/;"	f	typeref:typename:void
ImGui_ImplVulkanH_DestroyFrameSemaphores	interface/imgui_impl_vulkan.cpp	/^void ImGui_ImplVulkanH_DestroyFrameSemaphores(VkDevice device, ImGui_ImplVulkanH_FrameSemaphores/;"	f	typeref:typename:void
ImGui_ImplVulkanH_DestroyWindow	interface/imgui_impl_vulkan.cpp	/^void ImGui_ImplVulkanH_DestroyWindow(VkInstance instance, VkDevice device, ImGui_ImplVulkanH_Win/;"	f	typeref:typename:void
ImGui_ImplVulkanH_DestroyWindowRenderBuffers	interface/imgui_impl_vulkan.cpp	/^void ImGui_ImplVulkanH_DestroyWindowRenderBuffers(VkDevice device, ImGui_ImplVulkanH_WindowRende/;"	f	typeref:typename:void
ImGui_ImplVulkanH_Frame	interface/imgui_impl_vulkan.h	/^struct ImGui_ImplVulkanH_Frame$/;"	s
ImGui_ImplVulkanH_FrameRenderBuffers	interface/imgui_impl_vulkan.cpp	/^struct ImGui_ImplVulkanH_FrameRenderBuffers$/;"	s	file:
ImGui_ImplVulkanH_FrameSemaphores	interface/imgui_impl_vulkan.h	/^struct ImGui_ImplVulkanH_FrameSemaphores$/;"	s
ImGui_ImplVulkanH_GetMinImageCountFromPresentMode	interface/imgui_impl_vulkan.cpp	/^int ImGui_ImplVulkanH_GetMinImageCountFromPresentMode(VkPresentModeKHR present_mode)$/;"	f	typeref:typename:int
ImGui_ImplVulkanH_SelectPresentMode	interface/imgui_impl_vulkan.cpp	/^VkPresentModeKHR ImGui_ImplVulkanH_SelectPresentMode(VkPhysicalDevice physical_device, VkSurface/;"	f	typeref:typename:VkPresentModeKHR
ImGui_ImplVulkanH_SelectSurfaceFormat	interface/imgui_impl_vulkan.cpp	/^VkSurfaceFormatKHR ImGui_ImplVulkanH_SelectSurfaceFormat(VkPhysicalDevice physical_device, VkSur/;"	f	typeref:typename:VkSurfaceFormatKHR
ImGui_ImplVulkanH_Window	interface/imgui_impl_vulkan.h	/^    ImGui_ImplVulkanH_Window()$/;"	f	struct:ImGui_ImplVulkanH_Window
ImGui_ImplVulkanH_Window	interface/imgui_impl_vulkan.h	/^struct ImGui_ImplVulkanH_Window$/;"	s
ImGui_ImplVulkanH_WindowRenderBuffers	interface/imgui_impl_vulkan.cpp	/^struct ImGui_ImplVulkanH_WindowRenderBuffers$/;"	s	file:
ImGui_ImplVulkan_CreateDescriptorSetLayout	interface/imgui_impl_vulkan.cpp	/^static void ImGui_ImplVulkan_CreateDescriptorSetLayout(VkDevice device, const VkAllocationCallba/;"	f	typeref:typename:void	file:
ImGui_ImplVulkan_CreateDeviceObjects	interface/imgui_impl_vulkan.cpp	/^bool ImGui_ImplVulkan_CreateDeviceObjects()$/;"	f	typeref:typename:bool
ImGui_ImplVulkan_CreateFontSampler	interface/imgui_impl_vulkan.cpp	/^static void ImGui_ImplVulkan_CreateFontSampler(VkDevice device, const VkAllocationCallbacks* all/;"	f	typeref:typename:void	file:
ImGui_ImplVulkan_CreateFontsTexture	interface/imgui_impl_vulkan.cpp	/^bool ImGui_ImplVulkan_CreateFontsTexture(VkCommandBuffer command_buffer)$/;"	f	typeref:typename:bool
ImGui_ImplVulkan_CreatePipeline	interface/imgui_impl_vulkan.cpp	/^static void ImGui_ImplVulkan_CreatePipeline(VkDevice device, const VkAllocationCallbacks* alloca/;"	f	typeref:typename:void	file:
ImGui_ImplVulkan_CreatePipelineLayout	interface/imgui_impl_vulkan.cpp	/^static void ImGui_ImplVulkan_CreatePipelineLayout(VkDevice device, const VkAllocationCallbacks* /;"	f	typeref:typename:void	file:
ImGui_ImplVulkan_CreateShaderModules	interface/imgui_impl_vulkan.cpp	/^static void ImGui_ImplVulkan_CreateShaderModules(VkDevice device, const VkAllocationCallbacks* a/;"	f	typeref:typename:void	file:
ImGui_ImplVulkan_DestroyDeviceObjects	interface/imgui_impl_vulkan.cpp	/^void    ImGui_ImplVulkan_DestroyDeviceObjects()$/;"	f	typeref:typename:void
ImGui_ImplVulkan_DestroyFontUploadObjects	interface/imgui_impl_vulkan.cpp	/^void    ImGui_ImplVulkan_DestroyFontUploadObjects()$/;"	f	typeref:typename:void
ImGui_ImplVulkan_Init	interface/imgui_impl_vulkan.cpp	/^bool    ImGui_ImplVulkan_Init(ImGui_ImplVulkan_InitInfo* info, VkRenderPass render_pass)$/;"	f	typeref:typename:bool
ImGui_ImplVulkan_InitInfo	interface/imgui_impl_vulkan.h	/^struct ImGui_ImplVulkan_InitInfo$/;"	s
ImGui_ImplVulkan_MemoryType	interface/imgui_impl_vulkan.cpp	/^static uint32_t ImGui_ImplVulkan_MemoryType(VkMemoryPropertyFlags properties, uint32_t type_bits/;"	f	typeref:typename:uint32_t	file:
ImGui_ImplVulkan_NewFrame	interface/imgui_impl_vulkan.cpp	/^void ImGui_ImplVulkan_NewFrame()$/;"	f	typeref:typename:void
ImGui_ImplVulkan_RenderDrawData	interface/imgui_impl_vulkan.cpp	/^void ImGui_ImplVulkan_RenderDrawData(ImDrawData* draw_data, VkCommandBuffer command_buffer, VkPi/;"	f	typeref:typename:void
ImGui_ImplVulkan_SetMinImageCount	interface/imgui_impl_vulkan.cpp	/^void ImGui_ImplVulkan_SetMinImageCount(uint32_t min_image_count)$/;"	f	typeref:typename:void
ImGui_ImplVulkan_SetupRenderState	interface/imgui_impl_vulkan.cpp	/^static void ImGui_ImplVulkan_SetupRenderState(ImDrawData* draw_data, VkPipeline pipeline, VkComm/;"	f	typeref:typename:void	file:
ImGui_ImplVulkan_Shutdown	interface/imgui_impl_vulkan.cpp	/^void ImGui_ImplVulkan_Shutdown()$/;"	f	typeref:typename:void
ImHash	interface/imgui_internal.h	/^static inline ImU32     ImHash(const void* data, int size, ImU32 seed = 0) { return size ? ImHas/;"	f	typeref:typename:ImU32
ImHashData	interface/imgui.cpp	/^ImU32 ImHashData(const void* data_p, size_t data_size, ImU32 seed)$/;"	f	typeref:typename:ImU32
ImHashStr	interface/imgui.cpp	/^ImU32 ImHashStr(const char* data_p, size_t data_size, ImU32 seed)$/;"	f	typeref:typename:ImU32
ImInvLength	interface/imgui_internal.h	/^static inline float  ImInvLength(const ImVec2& lhs, float fail_value)           { float d = (lhs/;"	f	typeref:typename:float
ImIsPowerOfTwo	interface/imgui_internal.h	/^static inline bool      ImIsPowerOfTwo(int v)           { return v != 0 && (v & (v - 1)) == 0; }$/;"	f	typeref:typename:bool
ImLengthSqr	interface/imgui_internal.h	/^static inline float  ImLengthSqr(const ImVec2& lhs)                             { return (lhs.x /;"	f	typeref:typename:float
ImLengthSqr	interface/imgui_internal.h	/^static inline float  ImLengthSqr(const ImVec4& lhs)                             { return (lhs.x /;"	f	typeref:typename:float
ImLerp	interface/imgui_internal.h	/^static inline ImVec2 ImLerp(const ImVec2& a, const ImVec2& b, const ImVec2& t)  { return ImVec2(/;"	f	typeref:typename:ImVec2
ImLerp	interface/imgui_internal.h	/^static inline ImVec2 ImLerp(const ImVec2& a, const ImVec2& b, float t)          { return ImVec2(/;"	f	typeref:typename:ImVec2
ImLerp	interface/imgui_internal.h	/^static inline ImVec4 ImLerp(const ImVec4& a, const ImVec4& b, float t)          { return ImVec4(/;"	f	typeref:typename:ImVec4
ImLerp	interface/imgui_internal.h	/^template<typename T> static inline T ImLerp(T a, T b, float t)                  { return (T)(a +/;"	f	typeref:typename:T
ImLineClosestPoint	interface/imgui.cpp	/^ImVec2 ImLineClosestPoint(const ImVec2& a, const ImVec2& b, const ImVec2& p)$/;"	f	typeref:typename:ImVec2
ImLinearSweep	interface/imgui_internal.h	/^static inline float  ImLinearSweep(float current, float target, float speed)    { if (current < /;"	f	typeref:typename:float
ImLog	interface/imgui_internal.h	/^static inline double ImLog(double x)            { return log(x); }$/;"	f	typeref:typename:double
ImLog	interface/imgui_internal.h	/^static inline float  ImLog(float x)             { return logf(x); }             \/\/ DragBehavio/;"	f	typeref:typename:float
ImMax	interface/imgui_internal.h	/^static inline ImVec2 ImMax(const ImVec2& lhs, const ImVec2& rhs)                { return ImVec2(/;"	f	typeref:typename:ImVec2
ImMax	interface/imgui_internal.h	/^template<typename T> static inline T ImMax(T lhs, T rhs)                        { return lhs >= /;"	f	typeref:typename:T
ImMin	interface/imgui_internal.h	/^static inline ImVec2 ImMin(const ImVec2& lhs, const ImVec2& rhs)                { return ImVec2(/;"	f	typeref:typename:ImVec2
ImMin	interface/imgui_internal.h	/^template<typename T> static inline T ImMin(T lhs, T rhs)                        { return lhs < r/;"	f	typeref:typename:T
ImModPositive	interface/imgui_internal.h	/^static inline int    ImModPositive(int a, int b)                                { return (a + b)/;"	f	typeref:typename:int
ImMul	interface/imgui_internal.h	/^static inline ImVec2 ImMul(const ImVec2& lhs, const ImVec2& rhs)                { return ImVec2(/;"	f	typeref:typename:ImVec2
ImNewWrapper	interface/imgui.h	/^struct ImNewWrapper {};$/;"	s
ImParseFormatFindEnd	interface/imgui_widgets.cpp	/^const char* ImParseFormatFindEnd(const char* fmt)$/;"	f	typeref:typename:const char *
ImParseFormatFindStart	interface/imgui_widgets.cpp	/^const char* ImParseFormatFindStart(const char* fmt)$/;"	f	typeref:typename:const char *
ImParseFormatPrecision	interface/imgui_widgets.cpp	/^int ImParseFormatPrecision(const char* fmt, int default_precision)$/;"	f	typeref:typename:int
ImParseFormatTrimDecorations	interface/imgui_widgets.cpp	/^const char* ImParseFormatTrimDecorations(const char* fmt, char* buf, size_t buf_size)$/;"	f	typeref:typename:const char *
ImPool	interface/imgui_internal.h	/^    ImPool()    { FreeIdx = 0; }$/;"	f	struct:ImPool
ImPool	interface/imgui_internal.h	/^struct IMGUI_API ImPool$/;"	s
ImPoolIdx	interface/imgui_internal.h	/^typedef int ImPoolIdx;$/;"	t	typeref:typename:int
ImPow	interface/imgui_internal.h	/^static inline double ImPow(double x, double y)  { return pow(x, y); }$/;"	f	typeref:typename:double
ImPow	interface/imgui_internal.h	/^static inline float  ImPow(float x, float y)    { return powf(x, y); }          \/\/ DragBehavio/;"	f	typeref:typename:float
ImQsort	interface/imgui_internal.h	/^#define ImQsort /;"	d
ImRect	interface/imgui_internal.h	/^    ImRect()                                        : Min(0.0f, 0.0f), Max(0.0f, 0.0f)  {}$/;"	f	struct:ImRect
ImRect	interface/imgui_internal.h	/^    ImRect(const ImVec2& min, const ImVec2& max)    : Min(min), Max(max)                {}$/;"	f	struct:ImRect
ImRect	interface/imgui_internal.h	/^    ImRect(const ImVec4& v)                         : Min(v.x, v.y), Max(v.z, v.w)      {}$/;"	f	struct:ImRect
ImRect	interface/imgui_internal.h	/^    ImRect(float x1, float y1, float x2, float y2)  : Min(x1, y1), Max(x2, y2)          {}$/;"	f	struct:ImRect
ImRect	interface/imgui_internal.h	/^struct IMGUI_API ImRect$/;"	s
ImRotate	interface/imgui_internal.h	/^static inline ImVec2 ImRotate(const ImVec2& v, float cos_a, float sin_a)        { return ImVec2(/;"	f	typeref:typename:ImVec2
ImS16	interface/imgui.h	/^typedef signed short        ImS16;  \/\/ 16-bit signed integer$/;"	t	typeref:typename:signed short
ImS32	interface/imgui.h	/^typedef signed int          ImS32;  \/\/ 32-bit signed integer == int$/;"	t	typeref:typename:signed int
ImS64	interface/imgui.h	/^typedef int64_t             ImS64;  \/\/ 64-bit signed integer (pre C++11)$/;"	t	typeref:typename:int64_t
ImS64	interface/imgui.h	/^typedef signed   __int64    ImS64;  \/\/ 64-bit signed integer (pre and post C++11 with Visual S/;"	t	typeref:typename:signed __int64
ImS64	interface/imgui.h	/^typedef signed   long long  ImS64;  \/\/ 64-bit signed integer (post C++11)$/;"	t	typeref:typename:signed long long
ImS8	interface/imgui.h	/^typedef signed char         ImS8;   \/\/ 8-bit signed integer$/;"	t	typeref:typename:signed char
ImSaturate	interface/imgui_internal.h	/^static inline float  ImSaturate(float f)                                        { return (f < 0./;"	f	typeref:typename:float
ImSign	interface/imgui_internal.h	/^static inline double ImSign(double x)           { return (x < 0.0) ? -1.0 : ((x > 0.0) ? 1.0 : 0/;"	f	typeref:typename:double
ImSign	interface/imgui_internal.h	/^static inline float  ImSign(float x)            { return (x < 0.0f) ? -1.0f : ((x > 0.0f) ? 1.0f/;"	f	typeref:typename:float
ImSin	interface/imgui_internal.h	/^#define ImSin(/;"	d
ImSqrt	interface/imgui_internal.h	/^#define ImSqrt(/;"	d
ImStb	interface/imgui_internal.h	/^namespace ImStb$/;"	n
ImStb	interface/imgui_widgets.cpp	/^namespace ImStb$/;"	n	file:
ImStrSkipBlank	interface/imgui.cpp	/^const char* ImStrSkipBlank(const char* str)$/;"	f	typeref:typename:const char *
ImStrTrimBlanks	interface/imgui.cpp	/^void ImStrTrimBlanks(char* buf)$/;"	f	typeref:typename:void
ImStrbolW	interface/imgui.cpp	/^const ImWchar* ImStrbolW(const ImWchar* buf_mid_line, const ImWchar* buf_begin) \/\/ find beginn/;"	f	typeref:typename:const ImWchar *
ImStrchrRange	interface/imgui.cpp	/^const char* ImStrchrRange(const char* str, const char* str_end, char c)$/;"	f	typeref:typename:const char *
ImStrdup	interface/imgui.cpp	/^char* ImStrdup(const char* str)$/;"	f	typeref:typename:char *
ImStrdupcpy	interface/imgui.cpp	/^char* ImStrdupcpy(char* dst, size_t* p_dst_size, const char* src)$/;"	f	typeref:typename:char *
ImStreolRange	interface/imgui.cpp	/^const char* ImStreolRange(const char* str, const char* str_end)$/;"	f	typeref:typename:const char *
ImStricmp	interface/imgui.cpp	/^int ImStricmp(const char* str1, const char* str2)$/;"	f	typeref:typename:int
ImStristr	interface/imgui.cpp	/^const char* ImStristr(const char* haystack, const char* haystack_end, const char* needle, const /;"	f	typeref:typename:const char *
ImStrlenW	interface/imgui.cpp	/^int ImStrlenW(const ImWchar* str)$/;"	f	typeref:typename:int
ImStrncpy	interface/imgui.cpp	/^void ImStrncpy(char* dst, const char* src, size_t count)$/;"	f	typeref:typename:void
ImStrnicmp	interface/imgui.cpp	/^int ImStrnicmp(const char* str1, const char* str2, size_t count)$/;"	f	typeref:typename:int
ImSubClampOverflow	interface/imgui_internal.h	/^template<typename T> static inline T ImSubClampOverflow(T a, T b, T mn, T mx)   { if (b > 0 && (/;"	f	typeref:typename:T
ImSwap	interface/imgui_internal.h	/^template<typename T> static inline void ImSwap(T& a, T& b)                      { T tmp = a; a =/;"	f	typeref:typename:void
ImTextCharFromUtf8	interface/imgui.cpp	/^int ImTextCharFromUtf8(unsigned int* out_char, const char* in_text, const char* in_text_end)$/;"	f	typeref:typename:int
ImTextCharToUtf8	interface/imgui.cpp	/^static inline int ImTextCharToUtf8(char* buf, int buf_size, unsigned int c)$/;"	f	typeref:typename:int	file:
ImTextCountCharsFromUtf8	interface/imgui.cpp	/^int ImTextCountCharsFromUtf8(const char* in_text, const char* in_text_end)$/;"	f	typeref:typename:int
ImTextCountUtf8BytesFromChar	interface/imgui.cpp	/^int ImTextCountUtf8BytesFromChar(const char* in_text, const char* in_text_end)$/;"	f	typeref:typename:int
ImTextCountUtf8BytesFromChar	interface/imgui.cpp	/^static inline int ImTextCountUtf8BytesFromChar(unsigned int c)$/;"	f	typeref:typename:int	file:
ImTextCountUtf8BytesFromStr	interface/imgui.cpp	/^int ImTextCountUtf8BytesFromStr(const ImWchar* in_text, const ImWchar* in_text_end)$/;"	f	typeref:typename:int
ImTextStrFromUtf8	interface/imgui.cpp	/^int ImTextStrFromUtf8(ImWchar* buf, int buf_size, const char* in_text, const char* in_text_end, /;"	f	typeref:typename:int
ImTextStrToUtf8	interface/imgui.cpp	/^int ImTextStrToUtf8(char* buf, int buf_size, const ImWchar* in_text, const ImWchar* in_text_end)$/;"	f	typeref:typename:int
ImTextureID	interface/imgui.h	/^typedef void* ImTextureID;          \/\/ User data for rendering backend to identify a texture. /;"	t	typeref:typename:void *
ImTriangleArea	interface/imgui_internal.h	/^inline float         ImTriangleArea(const ImVec2& a, const ImVec2& b, const ImVec2& c) { return /;"	f	typeref:typename:float
ImTriangleBarycentricCoords	interface/imgui.cpp	/^void ImTriangleBarycentricCoords(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2/;"	f	typeref:typename:void
ImTriangleClosestPoint	interface/imgui.cpp	/^ImVec2 ImTriangleClosestPoint(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& p/;"	f	typeref:typename:ImVec2
ImTriangleContainsPoint	interface/imgui.cpp	/^bool ImTriangleContainsPoint(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& p)$/;"	f	typeref:typename:bool
ImU16	interface/imgui.h	/^typedef unsigned short      ImU16;  \/\/ 16-bit unsigned integer$/;"	t	typeref:typename:unsigned short
ImU32	interface/imgui.h	/^typedef unsigned int        ImU32;  \/\/ 32-bit unsigned integer (often used to store packed col/;"	t	typeref:typename:unsigned int
ImU64	interface/imgui.h	/^typedef uint64_t            ImU64;  \/\/ 64-bit unsigned integer (pre C++11)$/;"	t	typeref:typename:uint64_t
ImU64	interface/imgui.h	/^typedef unsigned __int64    ImU64;  \/\/ 64-bit unsigned integer (pre and post C++11 with Visual/;"	t	typeref:typename:unsigned __int64
ImU64	interface/imgui.h	/^typedef unsigned long long  ImU64;  \/\/ 64-bit unsigned integer (post C++11)$/;"	t	typeref:typename:unsigned long long
ImU8	interface/imgui.h	/^typedef unsigned char       ImU8;   \/\/ 8-bit unsigned integer$/;"	t	typeref:typename:unsigned char
ImUpperPowerOfTwo	interface/imgui_internal.h	/^static inline int       ImUpperPowerOfTwo(int v)        { v--; v |= v >> 1; v |= v >> 2; v |= v /;"	f	typeref:typename:int
ImVec1	interface/imgui_internal.h	/^    ImVec1()         { x = 0.0f; }$/;"	f	struct:ImVec1
ImVec1	interface/imgui_internal.h	/^    ImVec1(float _x) { x = _x; }$/;"	f	struct:ImVec1
ImVec1	interface/imgui_internal.h	/^struct ImVec1$/;"	s
ImVec2	interface/imgui.h	/^    ImVec2()                                { x = y = 0.0f; }$/;"	f	struct:ImVec2
ImVec2	interface/imgui.h	/^    ImVec2(float _x, float _y)              { x = _x; y = _y; }$/;"	f	struct:ImVec2
ImVec2	interface/imgui.h	/^struct ImVec2$/;"	s
ImVec2ih	interface/imgui_internal.h	/^    ImVec2ih()                           { x = y = 0; }$/;"	f	struct:ImVec2ih
ImVec2ih	interface/imgui_internal.h	/^    ImVec2ih(short _x, short _y)         { x = _x; y = _y; }$/;"	f	struct:ImVec2ih
ImVec2ih	interface/imgui_internal.h	/^    explicit ImVec2ih(const ImVec2& rhs) { x = (short)rhs.x; y = (short)rhs.y; }$/;"	f	struct:ImVec2ih
ImVec2ih	interface/imgui_internal.h	/^struct ImVec2ih$/;"	s
ImVec4	interface/imgui.h	/^    ImVec4()                                { x = y = z = w = 0.0f; }$/;"	f	struct:ImVec4
ImVec4	interface/imgui.h	/^    ImVec4(float _x, float _y, float _z, float _w)  { x = _x; y = _y; z = _z; w = _w; }$/;"	f	struct:ImVec4
ImVec4	interface/imgui.h	/^struct ImVec4$/;"	s
ImVector	interface/imgui.h	/^    inline ImVector()                                       { Size = Capacity = 0; Data = NULL; /;"	f	struct:ImVector
ImVector	interface/imgui.h	/^    inline ImVector(const ImVector<T>& src)                 { Size = Capacity = 0; Data = NULL; /;"	f	struct:ImVector
ImVector	interface/imgui.h	/^struct ImVector$/;"	s
ImWchar	interface/imgui.h	/^typedef ImWchar16 ImWchar;$/;"	t	typeref:typename:ImWchar16
ImWchar	interface/imgui.h	/^typedef ImWchar32 ImWchar;$/;"	t	typeref:typename:ImWchar32
ImWchar16	interface/imgui.h	/^typedef unsigned short ImWchar16;   \/\/ A single decoded U16 character\/code point. We encode t/;"	t	typeref:typename:unsigned short
ImWchar32	interface/imgui.h	/^typedef unsigned int ImWchar32;     \/\/ A single decoded U32 character\/code point. We encode t/;"	t	typeref:typename:unsigned int
Image	interface/imgui_widgets.cpp	/^void ImGui::Image(ImTextureID user_texture_id, const ImVec2& size, const ImVec2& uv0, const ImVe/;"	f	class:ImGui	typeref:typename:void
ImageAcquiredSemaphore	interface/imgui_impl_vulkan.h	/^    VkSemaphore         ImageAcquiredSemaphore;$/;"	m	struct:ImGui_ImplVulkanH_FrameSemaphores	typeref:typename:VkSemaphore
ImageButton	interface/imgui_widgets.cpp	/^bool ImGui::ImageButton(ImTextureID user_texture_id, const ImVec2& size, const ImVec2& uv0, cons/;"	f	class:ImGui	typeref:typename:bool
ImageButtonEx	interface/imgui_widgets.cpp	/^bool ImGui::ImageButtonEx(ImGuiID id, ImTextureID texture_id, const ImVec2& size, const ImVec2& /;"	f	class:ImGui	typeref:typename:bool
ImageCount	interface/imgui_impl_vulkan.h	/^    uint32_t            ImageCount;             \/\/ >= MinImageCount$/;"	m	struct:ImGui_ImplVulkan_InitInfo	typeref:typename:uint32_t
ImageCount	interface/imgui_impl_vulkan.h	/^    uint32_t            ImageCount;             \/\/ Number of simultaneous in-flight frames (re/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:uint32_t
ImeSetInputScreenPosFn	interface/imgui.h	/^    void        (*ImeSetInputScreenPosFn)(int x, int y);$/;"	m	struct:ImGuiIO	typeref:typename:void (*)(int x,int y)
ImeSetInputScreenPosFn_DefaultImpl	interface/imgui.cpp	/^static void ImeSetInputScreenPosFn_DefaultImpl(int x, int y)$/;"	f	typeref:typename:void	file:
ImeSetInputScreenPosFn_DefaultImpl	interface/imgui.cpp	/^static void ImeSetInputScreenPosFn_DefaultImpl(int, int) {}$/;"	f	typeref:typename:void	file:
ImeWindowHandle	interface/imgui.h	/^    void*       ImeWindowHandle;                \/\/ = NULL           \/\/ (Windows) Set this to/;"	m	struct:ImGuiIO	typeref:typename:void *
Indent	interface/imgui.cpp	/^void ImGui::Indent(float indent_w)$/;"	f	class:ImGui	typeref:typename:void
Indent	interface/imgui_internal.h	/^    ImVec1                  Indent;                 \/\/ Indentation \/ start position from left/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec1
IndentSpacing	interface/imgui.h	/^    float       IndentSpacing;              \/\/ Horizontal indentation when e.g. entering a tre/;"	m	struct:ImGuiStyle	typeref:typename:float
Index	interface/imgui_impl_vulkan.cpp	/^    uint32_t            Index;$/;"	m	struct:ImGui_ImplVulkanH_WindowRenderBuffers	typeref:typename:uint32_t	file:
Index	interface/imgui_internal.h	/^    int         Index;          \/\/ Usually index in a main pool.$/;"	m	struct:ImGuiPtrOrIndex	typeref:typename:int
Index	interface/imgui_internal.h	/^    int         Index;$/;"	m	struct:ImGuiShrinkWidthItem	typeref:typename:int
IndexAdvanceX	interface/imgui.h	/^    ImVector<float>             IndexAdvanceX;      \/\/ 12-16 \/\/ out \/\/            \/\/ Spa/;"	m	struct:ImFont	typeref:typename:ImVector<float>
IndexBuffer	interface/imgui_impl_vulkan.cpp	/^    VkBuffer            IndexBuffer;$/;"	m	struct:ImGui_ImplVulkanH_FrameRenderBuffers	typeref:typename:VkBuffer	file:
IndexBufferMemory	interface/imgui_impl_vulkan.cpp	/^    VkDeviceMemory      IndexBufferMemory;$/;"	m	struct:ImGui_ImplVulkanH_FrameRenderBuffers	typeref:typename:VkDeviceMemory	file:
IndexBufferSize	interface/imgui_impl_vulkan.cpp	/^    VkDeviceSize        IndexBufferSize;$/;"	m	struct:ImGui_ImplVulkanH_FrameRenderBuffers	typeref:typename:VkDeviceSize	file:
IndexDuringLayout	interface/imgui_internal.h	/^    ImS16               IndexDuringLayout;      \/\/ Index only used during TabBarLayout()$/;"	m	struct:ImGuiTabItem	typeref:typename:ImS16
IndexLookup	interface/imgui.h	/^    ImVector<ImWchar>           IndexLookup;        \/\/ 12-16 \/\/ out \/\/            \/\/ Spa/;"	m	struct:ImFont	typeref:typename:ImVector<ImWchar>
IniFilename	interface/imgui.h	/^    const char* IniFilename;                    \/\/ = "imgui.ini"    \/\/ Path to .ini file. Se/;"	m	struct:ImGuiIO	typeref:typename:const char *
IniSavingRate	interface/imgui.h	/^    float       IniSavingRate;                  \/\/ = 5.0f           \/\/ Minimum time between /;"	m	struct:ImGuiIO	typeref:typename:float
InitialFlags	interface/imgui_internal.h	/^    ImDrawListFlags InitialFlags;               \/\/ Initial flags at the beginning of the frame/;"	m	struct:ImDrawListSharedData	typeref:typename:ImDrawListFlags
InitialTextA	interface/imgui_internal.h	/^    ImVector<char>          InitialTextA;           \/\/ backup of end-user buffer at the time o/;"	m	struct:ImGuiInputTextState	typeref:typename:ImVector<char>
Initialize	interface/imgui.cpp	/^void ImGui::Initialize(ImGuiContext* context)$/;"	f	class:ImGui	typeref:typename:void
Initialized	interface/imgui_internal.h	/^    bool                    Initialized;$/;"	m	struct:ImGuiContext	typeref:typename:bool
InnerClipRect	interface/imgui_internal.h	/^    ImRect                  InnerClipRect;                      \/\/ == InnerRect shrunk by Wind/;"	m	struct:ImGuiWindow	typeref:typename:ImRect
InnerDir	interface/imgui.cpp	/^    ImVec2  InnerDir;$/;"	m	struct:ImGuiResizeGripDef	typeref:typename:ImVec2	file:
InnerDir	interface/imgui.cpp	/^    ImVec2 InnerDir;$/;"	m	struct:ImGuiResizeBorderDef	typeref:typename:ImVec2	file:
InnerRect	interface/imgui_internal.h	/^    ImRect                  InnerRect;                          \/\/ Inner rectangle (omit title/;"	m	struct:ImGuiWindow	typeref:typename:ImRect
InputBuf	interface/imgui.h	/^    char                    InputBuf[256];$/;"	m	struct:ImGuiTextFilter	typeref:typename:char[256]
InputDouble	interface/imgui_widgets.cpp	/^bool ImGui::InputDouble(const char* label, double* v, double step, double step_fast, const char*/;"	f	class:ImGui	typeref:typename:bool
InputFloat	interface/imgui_widgets.cpp	/^bool ImGui::InputFloat(const char* label, float* v, float step, float step_fast, const char* for/;"	f	class:ImGui	typeref:typename:bool
InputFloat2	interface/imgui_widgets.cpp	/^bool ImGui::InputFloat2(const char* label, float v[2], const char* format, ImGuiInputTextFlags f/;"	f	class:ImGui	typeref:typename:bool
InputFloat3	interface/imgui_widgets.cpp	/^bool ImGui::InputFloat3(const char* label, float v[3], const char* format, ImGuiInputTextFlags f/;"	f	class:ImGui	typeref:typename:bool
InputFloat4	interface/imgui_widgets.cpp	/^bool ImGui::InputFloat4(const char* label, float v[4], const char* format, ImGuiInputTextFlags f/;"	f	class:ImGui	typeref:typename:bool
InputInt	interface/imgui_widgets.cpp	/^bool ImGui::InputInt(const char* label, int* v, int step, int step_fast, ImGuiInputTextFlags fla/;"	f	class:ImGui	typeref:typename:bool
InputInt2	interface/imgui_widgets.cpp	/^bool ImGui::InputInt2(const char* label, int v[2], ImGuiInputTextFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
InputInt3	interface/imgui_widgets.cpp	/^bool ImGui::InputInt3(const char* label, int v[3], ImGuiInputTextFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
InputInt4	interface/imgui_widgets.cpp	/^bool ImGui::InputInt4(const char* label, int v[4], ImGuiInputTextFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
InputQueueCharacters	interface/imgui.h	/^    ImVector<ImWchar> InputQueueCharacters;     \/\/ Queue of _characters_ input (obtained by pl/;"	m	struct:ImGuiIO	typeref:typename:ImVector<ImWchar>
InputQueueSurrogate	interface/imgui.h	/^    ImWchar16   InputQueueSurrogate;            \/\/ For AddInputCharacterUTF16$/;"	m	struct:ImGuiIO	typeref:typename:ImWchar16
InputScalar	interface/imgui_widgets.cpp	/^bool ImGui::InputScalar(const char* label, ImGuiDataType data_type, void* p_data, const void* p_/;"	f	class:ImGui	typeref:typename:bool
InputScalarN	interface/imgui_widgets.cpp	/^bool ImGui::InputScalarN(const char* label, ImGuiDataType data_type, void* p_data, int component/;"	f	class:ImGui	typeref:typename:bool
InputText	interface/imgui_widgets.cpp	/^bool ImGui::InputText(const char* label, char* buf, size_t buf_size, ImGuiInputTextFlags flags, /;"	f	class:ImGui	typeref:typename:bool
InputTextCalcTextLenAndLineCount	interface/imgui_widgets.cpp	/^static int InputTextCalcTextLenAndLineCount(const char* text_begin, const char** out_text_end)$/;"	f	typeref:typename:int	file:
InputTextCalcTextSizeW	interface/imgui_widgets.cpp	/^static ImVec2 InputTextCalcTextSizeW(const ImWchar* text_begin, const ImWchar* text_end, const I/;"	f	typeref:typename:ImVec2	file:
InputTextEx	interface/imgui_widgets.cpp	/^bool ImGui::InputTextEx(const char* label, const char* hint, char* buf, int buf_size, const ImVe/;"	f	class:ImGui	typeref:typename:bool
InputTextFilterCharacter	interface/imgui_widgets.cpp	/^static bool InputTextFilterCharacter(unsigned int* p_char, ImGuiInputTextFlags flags, ImGuiInput/;"	f	typeref:typename:bool	file:
InputTextMultiline	interface/imgui_widgets.cpp	/^bool ImGui::InputTextMultiline(const char* label, char* buf, size_t buf_size, const ImVec2& size/;"	f	class:ImGui	typeref:typename:bool
InputTextPasswordFont	interface/imgui_internal.h	/^    ImFont                  InputTextPasswordFont;$/;"	m	struct:ImGuiContext	typeref:typename:ImFont
InputTextState	interface/imgui_internal.h	/^    ImGuiInputTextState     InputTextState;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiInputTextState
InputTextWithHint	interface/imgui_widgets.cpp	/^bool ImGui::InputTextWithHint(const char* label, const char* hint, char* buf, size_t buf_size, I/;"	f	class:ImGui	typeref:typename:bool
InsertChars	interface/imgui_widgets.cpp	/^void ImGuiInputTextCallbackData::InsertChars(int pos, const char* new_text, const char* new_text/;"	f	class:ImGuiInputTextCallbackData	typeref:typename:void
Instance	interface/imgui_impl_vulkan.h	/^    VkInstance          Instance;$/;"	m	struct:ImGui_ImplVulkan_InitInfo	typeref:typename:VkInstance
InstructionSet	arm.hpp	/^        enum InstructionSet : u8 {$/;"	g	class:Cpu	typeref:typename:u8
Interrupt	arm.hpp	/^        enum Interrupt : u8 {$/;"	g	class:Cpu	typeref:typename:u8
InvisibleButton	interface/imgui_widgets.cpp	/^bool ImGui::InvisibleButton(const char* str_id, const ImVec2& size_arg, ImGuiButtonFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
IsActive	interface/imgui.h	/^    bool                IsActive() const { return !Filters.empty(); }$/;"	f	struct:ImGuiTextFilter	typeref:typename:bool
IsActiveIdUsingKey	interface/imgui_internal.h	/^    inline bool             IsActiveIdUsingKey(ImGuiKey key)                            { ImGuiC/;"	f	namespace:ImGui	typeref:typename:bool
IsActiveIdUsingNavDir	interface/imgui_internal.h	/^    inline bool             IsActiveIdUsingNavDir(ImGuiDir dir)                         { ImGuiC/;"	f	namespace:ImGui	typeref:typename:bool
IsActiveIdUsingNavInput	interface/imgui_internal.h	/^    inline bool             IsActiveIdUsingNavInput(ImGuiNavInput input)                { ImGuiC/;"	f	namespace:ImGui	typeref:typename:bool
IsAnyItemActive	interface/imgui.cpp	/^bool ImGui::IsAnyItemActive()$/;"	f	class:ImGui	typeref:typename:bool
IsAnyItemFocused	interface/imgui.cpp	/^bool ImGui::IsAnyItemFocused()$/;"	f	class:ImGui	typeref:typename:bool
IsAnyItemHovered	interface/imgui.cpp	/^bool ImGui::IsAnyItemHovered()$/;"	f	class:ImGui	typeref:typename:bool
IsAnyMouseDown	interface/imgui.cpp	/^bool ImGui::IsAnyMouseDown()$/;"	f	class:ImGui	typeref:typename:bool
IsBeingResized	interface/imgui_internal.h	/^    bool                IsBeingResized;$/;"	m	struct:ImGuiColumns	typeref:typename:bool
IsBuilt	interface/imgui.h	/^    bool                        IsBuilt() const             { return Fonts.Size > 0 && (TexPixel/;"	f	struct:ImFontAtlas	typeref:typename:bool
IsClippedEx	interface/imgui.cpp	/^bool ImGui::IsClippedEx(const ImRect& bb, ImGuiID id, bool clip_even_when_logged)$/;"	f	class:ImGui	typeref:typename:bool
IsDataType	interface/imgui.h	/^    bool IsDataType(const char* type) const { return DataFrameCount != -1 && strcmp(type, DataTy/;"	f	struct:ImGuiPayload	typeref:typename:bool
IsDelivery	interface/imgui.h	/^    bool IsDelivery() const                 { return Delivery; }$/;"	f	struct:ImGuiPayload	typeref:typename:bool
IsDragDropPayloadBeingAccepted	interface/imgui.cpp	/^bool ImGui::IsDragDropPayloadBeingAccepted()$/;"	f	class:ImGui	typeref:typename:bool
IsFallbackWindow	interface/imgui_internal.h	/^    bool                    IsFallbackWindow;                   \/\/ Set on the "Debug##Default"/;"	m	struct:ImGuiWindow	typeref:typename:bool
IsFirstFrame	interface/imgui_internal.h	/^    bool                IsFirstFrame;$/;"	m	struct:ImGuiColumns	typeref:typename:bool
IsGlyphRangeUnused	interface/imgui_draw.cpp	/^bool ImFont::IsGlyphRangeUnused(unsigned int c_begin, unsigned int c_last)$/;"	f	class:ImFont	typeref:typename:bool
IsInverted	interface/imgui_internal.h	/^    bool        IsInverted() const                  { return Min.x > Max.x || Min.y > Max.y; }$/;"	f	struct:ImRect	typeref:typename:bool
IsItemActivated	interface/imgui.cpp	/^bool ImGui::IsItemActivated()$/;"	f	class:ImGui	typeref:typename:bool
IsItemActive	interface/imgui.cpp	/^bool ImGui::IsItemActive()$/;"	f	class:ImGui	typeref:typename:bool
IsItemClicked	interface/imgui.cpp	/^bool ImGui::IsItemClicked(ImGuiMouseButton mouse_button)$/;"	f	class:ImGui	typeref:typename:bool
IsItemDeactivated	interface/imgui.cpp	/^bool ImGui::IsItemDeactivated()$/;"	f	class:ImGui	typeref:typename:bool
IsItemDeactivatedAfterChange	interface/imgui.h	/^    static inline bool  IsItemDeactivatedAfterChange()        { return IsItemDeactivatedAfterEdi/;"	f	namespace:ImGui	typeref:typename:bool
IsItemDeactivatedAfterEdit	interface/imgui.cpp	/^bool ImGui::IsItemDeactivatedAfterEdit()$/;"	f	class:ImGui	typeref:typename:bool
IsItemEdited	interface/imgui.cpp	/^bool ImGui::IsItemEdited()$/;"	f	class:ImGui	typeref:typename:bool
IsItemFocused	interface/imgui.cpp	/^bool ImGui::IsItemFocused()$/;"	f	class:ImGui	typeref:typename:bool
IsItemHovered	interface/imgui.cpp	/^bool ImGui::IsItemHovered(ImGuiHoveredFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
IsItemToggledOpen	interface/imgui.cpp	/^bool ImGui::IsItemToggledOpen()$/;"	f	class:ImGui	typeref:typename:bool
IsItemToggledSelection	interface/imgui.cpp	/^bool ImGui::IsItemToggledSelection()$/;"	f	class:ImGui	typeref:typename:bool
IsItemVisible	interface/imgui.cpp	/^bool ImGui::IsItemVisible()$/;"	f	class:ImGui	typeref:typename:bool
IsKeyDown	interface/imgui.cpp	/^bool ImGui::IsKeyDown(int user_key_index)$/;"	f	class:ImGui	typeref:typename:bool
IsKeyPressed	interface/imgui.cpp	/^bool ImGui::IsKeyPressed(int user_key_index, bool repeat)$/;"	f	class:ImGui	typeref:typename:bool
IsKeyPressedMap	interface/imgui_internal.h	/^    inline bool             IsKeyPressedMap(ImGuiKey key, bool repeat = true)           { ImGuiC/;"	f	namespace:ImGui	typeref:typename:bool
IsKeyReleased	interface/imgui.cpp	/^bool ImGui::IsKeyReleased(int user_key_index)$/;"	f	class:ImGui	typeref:typename:bool
IsLoaded	interface/imgui.h	/^    bool                        IsLoaded() const                    { return ContainerAtlas != N/;"	f	struct:ImFont	typeref:typename:bool
IsMouseClicked	interface/imgui.cpp	/^bool ImGui::IsMouseClicked(ImGuiMouseButton button, bool repeat)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseDoubleClicked	interface/imgui.cpp	/^bool ImGui::IsMouseDoubleClicked(ImGuiMouseButton button)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseDown	interface/imgui.cpp	/^bool ImGui::IsMouseDown(ImGuiMouseButton button)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseDragPastThreshold	interface/imgui.cpp	/^bool ImGui::IsMouseDragPastThreshold(ImGuiMouseButton button, float lock_threshold)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseDragging	interface/imgui.cpp	/^bool ImGui::IsMouseDragging(ImGuiMouseButton button, float lock_threshold)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseHoveringRect	interface/imgui.cpp	/^bool ImGui::IsMouseHoveringRect(const ImVec2& r_min, const ImVec2& r_max, bool clip)$/;"	f	class:ImGui	typeref:typename:bool
IsMousePosValid	interface/imgui.cpp	/^bool ImGui::IsMousePosValid(const ImVec2* mouse_pos)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseReleased	interface/imgui.cpp	/^bool ImGui::IsMouseReleased(ImGuiMouseButton button)$/;"	f	class:ImGui	typeref:typename:bool
IsNavInputDown	interface/imgui_internal.h	/^    inline bool             IsNavInputDown(ImGuiNavInput n)                             { ImGuiC/;"	f	namespace:ImGui	typeref:typename:bool
IsNavInputTest	interface/imgui_internal.h	/^    inline bool             IsNavInputTest(ImGuiNavInput n, ImGuiInputReadMode rm)      { return/;"	f	namespace:ImGui	typeref:typename:bool
IsPacked	interface/imgui.h	/^    bool IsPacked() const           { return X != 0xFFFF; }$/;"	f	struct:ImFontAtlasCustomRect	typeref:typename:bool
IsPopupOpen	interface/imgui.cpp	/^bool ImGui::IsPopupOpen(ImGuiID id, ImGuiPopupFlags popup_flags)$/;"	f	class:ImGui	typeref:typename:bool
IsPopupOpen	interface/imgui.cpp	/^bool ImGui::IsPopupOpen(const char* str_id, ImGuiPopupFlags popup_flags)$/;"	f	class:ImGui	typeref:typename:bool
IsPreview	interface/imgui.h	/^    bool IsPreview() const                  { return Preview; }$/;"	f	struct:ImGuiPayload	typeref:typename:bool
IsRectVisible	interface/imgui.cpp	/^bool ImGui::IsRectVisible(const ImVec2& rect_min, const ImVec2& rect_max)$/;"	f	class:ImGui	typeref:typename:bool
IsRectVisible	interface/imgui.cpp	/^bool ImGui::IsRectVisible(const ImVec2& size)$/;"	f	class:ImGui	typeref:typename:bool
IsWindowActiveAndVisible	interface/imgui.cpp	/^static bool IsWindowActiveAndVisible(ImGuiWindow* window)$/;"	f	typeref:typename:bool	file:
IsWindowAppearing	interface/imgui.cpp	/^bool ImGui::IsWindowAppearing()$/;"	f	class:ImGui	typeref:typename:bool
IsWindowChildOf	interface/imgui.cpp	/^bool ImGui::IsWindowChildOf(ImGuiWindow* window, ImGuiWindow* potential_parent)$/;"	f	class:ImGui	typeref:typename:bool
IsWindowCollapsed	interface/imgui.cpp	/^bool ImGui::IsWindowCollapsed()$/;"	f	class:ImGui	typeref:typename:bool
IsWindowContentHoverable	interface/imgui.cpp	/^static inline bool IsWindowContentHoverable(ImGuiWindow* window, ImGuiHoveredFlags flags)$/;"	f	typeref:typename:bool	file:
IsWindowFocused	interface/imgui.cpp	/^bool ImGui::IsWindowFocused(ImGuiFocusedFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
IsWindowHovered	interface/imgui.cpp	/^bool ImGui::IsWindowHovered(ImGuiHoveredFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
IsWindowNavFocusable	interface/imgui.cpp	/^bool ImGui::IsWindowNavFocusable(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:bool
ItemAdd	interface/imgui.cpp	/^bool ImGui::ItemAdd(const ImRect& bb, ImGuiID id, const ImRect* nav_bb_arg)$/;"	f	class:ImGui	typeref:typename:bool
ItemFlags	interface/imgui_internal.h	/^    ImGuiItemFlags          ItemFlags;              \/\/ == ItemFlagsStack.back() [empty == ImGu/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiItemFlags
ItemFlagsStack	interface/imgui_internal.h	/^    ImVector<ImGuiItemFlags>ItemFlagsStack;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVector<ImGuiItemFlags>
ItemHoverable	interface/imgui.cpp	/^bool ImGui::ItemHoverable(const ImRect& bb, ImGuiID id)$/;"	f	class:ImGui	typeref:typename:bool
ItemInnerSpacing	interface/imgui.h	/^    ImVec2      ItemInnerSpacing;           \/\/ Horizontal and vertical spacing between within /;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
ItemSize	interface/imgui.cpp	/^void ImGui::ItemSize(const ImRect& bb, float text_baseline_y)$/;"	f	class:ImGui	typeref:typename:void
ItemSize	interface/imgui.cpp	/^void ImGui::ItemSize(const ImVec2& size, float text_baseline_y)$/;"	f	class:ImGui	typeref:typename:void
ItemSpacing	interface/imgui.h	/^    ImVec2      ItemSpacing;                \/\/ Horizontal and vertical spacing between widgets/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
ItemSpacingY	interface/imgui_internal.h	/^    float               ItemSpacingY;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
ItemWidth	interface/imgui_internal.h	/^    float                   ItemWidth;              \/\/ == ItemWidthStack.back(). 0.0: default,/;"	m	struct:ImGuiWindowTempData	typeref:typename:float
ItemWidthDefault	interface/imgui_internal.h	/^    float                   ItemWidthDefault;$/;"	m	struct:ImGuiWindow	typeref:typename:float
ItemWidthStack	interface/imgui_internal.h	/^    ImVector<float>         ItemWidthStack;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVector<float>
ItemsCount	interface/imgui.h	/^    int     ItemsCount;$/;"	m	struct:ImGuiListClipper	typeref:typename:int
ItemsHeight	interface/imgui.h	/^    float   ItemsHeight;$/;"	m	struct:ImGuiListClipper	typeref:typename:float
Items_ArrayGetter	interface/imgui_widgets.cpp	/^static bool Items_ArrayGetter(void* data, int idx, const char** out_text)$/;"	f	typeref:typename:bool	file:
Items_SingleStringGetter	interface/imgui_widgets.cpp	/^static bool Items_SingleStringGetter(void* data, int idx, const char** out_text)$/;"	f	typeref:typename:bool	file:
KeepAliveID	interface/imgui.cpp	/^void ImGui::KeepAliveID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
KeyAlt	interface/imgui.h	/^    bool        KeyAlt;                         \/\/ Keyboard modifier pressed: Alt$/;"	m	struct:ImGuiIO	typeref:typename:bool
KeyCtrl	interface/imgui.h	/^    bool        KeyCtrl;                        \/\/ Keyboard modifier pressed: Control$/;"	m	struct:ImGuiIO	typeref:typename:bool
KeyMap	interface/imgui.h	/^    int         KeyMap[ImGuiKey_COUNT];         \/\/ <unset>          \/\/ Map of indices into t/;"	m	struct:ImGuiIO	typeref:typename:int[]
KeyMods	interface/imgui.h	/^    ImGuiKeyModFlags KeyMods;                   \/\/ Key mods flags (same as io.KeyCtrl\/KeyShif/;"	m	struct:ImGuiIO	typeref:typename:ImGuiKeyModFlags
KeyRepeatDelay	interface/imgui.h	/^    float       KeyRepeatDelay;                 \/\/ = 0.250f         \/\/ When holding a key\/b/;"	m	struct:ImGuiIO	typeref:typename:float
KeyRepeatRate	interface/imgui.h	/^    float       KeyRepeatRate;                  \/\/ = 0.050f         \/\/ When holding a key\/b/;"	m	struct:ImGuiIO	typeref:typename:float
KeyShift	interface/imgui.h	/^    bool        KeyShift;                       \/\/ Keyboard modifier pressed: Shift$/;"	m	struct:ImGuiIO	typeref:typename:bool
KeySuper	interface/imgui.h	/^    bool        KeySuper;                       \/\/ Keyboard modifier pressed: Cmd\/Super\/Wind/;"	m	struct:ImGuiIO	typeref:typename:bool
KeysDown	interface/imgui.h	/^    bool        KeysDown[512];                  \/\/ Keyboard keys that are pressed (ideally lef/;"	m	struct:ImGuiIO	typeref:typename:bool[512]
KeysDownDuration	interface/imgui.h	/^    float       KeysDownDuration[512];          \/\/ Duration the keyboard key has been down (0./;"	m	struct:ImGuiIO	typeref:typename:float[512]
KeysDownDurationPrev	interface/imgui.h	/^    float       KeysDownDurationPrev[512];      \/\/ Previous duration the key has been down$/;"	m	struct:ImGuiIO	typeref:typename:float[512]
LR	arm.hpp	/^            LR,$/;"	e	enum:Cpu::Register
LabelText	interface/imgui_widgets.cpp	/^void ImGui::LabelText(const char* label, const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
LabelTextV	interface/imgui_widgets.cpp	/^void ImGui::LabelTextV(const char* label, const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
LastActiveId	interface/imgui_internal.h	/^    ImGuiID                 LastActiveId;                       \/\/ Store the last non-zero Act/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
LastActiveIdTimer	interface/imgui_internal.h	/^    float                   LastActiveIdTimer;                  \/\/ Store the last non-zero Act/;"	m	struct:ImGuiContext	typeref:typename:float
LastFrameActive	interface/imgui_internal.h	/^    int                     LastFrameActive;                    \/\/ Last frame number the windo/;"	m	struct:ImGuiWindow	typeref:typename:int
LastFrameSelected	interface/imgui_internal.h	/^    int                 LastFrameSelected;      \/\/ This allows us to infer an ordered list of /;"	m	struct:ImGuiTabItem	typeref:typename:int
LastFrameVisible	interface/imgui_internal.h	/^    int                 LastFrameVisible;$/;"	m	struct:ImGuiTabItem	typeref:typename:int
LastItemDisplayRect	interface/imgui_internal.h	/^    ImRect                  LastItemDisplayRect;    \/\/ End-user display rect for last item (on/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImRect
LastItemDisplayRect	interface/imgui_internal.h	/^    ImRect                  LastItemDisplayRect;$/;"	m	struct:ImGuiLastItemDataBackup	typeref:typename:ImRect
LastItemId	interface/imgui_internal.h	/^    ImGuiID                 LastItemId;             \/\/ ID for last item$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiID
LastItemId	interface/imgui_internal.h	/^    ImGuiID                 LastItemId;$/;"	m	struct:ImGuiLastItemDataBackup	typeref:typename:ImGuiID
LastItemRect	interface/imgui_internal.h	/^    ImRect                  LastItemRect;           \/\/ Interaction rect for last item$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImRect
LastItemRect	interface/imgui_internal.h	/^    ImRect                  LastItemRect;$/;"	m	struct:ImGuiLastItemDataBackup	typeref:typename:ImRect
LastItemStatusFlags	interface/imgui_internal.h	/^    ImGuiItemStatusFlags    LastItemStatusFlags;    \/\/ Status flags for last item (see ImGuiIt/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiItemStatusFlags
LastItemStatusFlags	interface/imgui_internal.h	/^    ImGuiItemStatusFlags    LastItemStatusFlags;$/;"	m	struct:ImGuiLastItemDataBackup	typeref:typename:ImGuiItemStatusFlags
LastTabItemIdx	interface/imgui_internal.h	/^    ImS16               LastTabItemIdx;         \/\/ Index of last BeginTabItem() tab for use by/;"	m	struct:ImGuiTabBar	typeref:typename:ImS16
LastTimeActive	interface/imgui_internal.h	/^    float                   LastTimeActive;                     \/\/ Last timestamp the window w/;"	m	struct:ImGuiWindow	typeref:typename:float
LastValidMousePos	interface/imgui_internal.h	/^    ImVec2                  LastValidMousePos;$/;"	m	struct:ImGuiContext	typeref:typename:ImVec2
Layers	interface/imgui_internal.h	/^    ImVector<ImDrawList*>   Layers[2];           \/\/ Global layers for: regular, tooltip$/;"	m	struct:ImDrawDataBuilder	typeref:typename:ImVector<ImDrawList * >[2]
LayoutType	interface/imgui_internal.h	/^    ImGuiLayoutType         LayoutType;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiLayoutType
LineMaxY	interface/imgui_internal.h	/^    float               LineMinY, LineMaxY;$/;"	m	struct:ImGuiColumns	typeref:typename:float
LineMinY	interface/imgui_internal.h	/^    float               LineMinY, LineMaxY;$/;"	m	struct:ImGuiColumns	typeref:typename:float
ListBox	interface/imgui_widgets.cpp	/^bool ImGui::ListBox(const char* label, int* current_item, bool (*items_getter)(void*, int, const/;"	f	class:ImGui	typeref:typename:bool
ListBox	interface/imgui_widgets.cpp	/^bool ImGui::ListBox(const char* label, int* current_item, const char* const items[], int items_c/;"	f	class:ImGui	typeref:typename:bool
ListBoxFooter	interface/imgui_widgets.cpp	/^void ImGui::ListBoxFooter()$/;"	f	class:ImGui	typeref:typename:void
ListBoxHeader	interface/imgui_widgets.cpp	/^bool ImGui::ListBoxHeader(const char* label, const ImVec2& size_arg)$/;"	f	class:ImGui	typeref:typename:bool
ListBoxHeader	interface/imgui_widgets.cpp	/^bool ImGui::ListBoxHeader(const char* label, int items_count, int height_in_items)$/;"	f	class:ImGui	typeref:typename:bool
LoadIniSettingsFromDisk	interface/imgui.cpp	/^void ImGui::LoadIniSettingsFromDisk(const char* ini_filename)$/;"	f	class:ImGui	typeref:typename:void
LoadIniSettingsFromMemory	interface/imgui.cpp	/^void ImGui::LoadIniSettingsFromMemory(const char* ini_data, size_t ini_size)$/;"	f	class:ImGui	typeref:typename:void
Locked	interface/imgui.h	/^    bool                        Locked;             \/\/ Marked as Locked by ImGui::NewFrame() s/;"	m	struct:ImFontAtlas	typeref:typename:bool
LogBegin	interface/imgui.cpp	/^void ImGui::LogBegin(ImGuiLogType type, int auto_open_depth)$/;"	f	class:ImGui	typeref:typename:void
LogBuffer	interface/imgui_internal.h	/^    ImGuiTextBuffer         LogBuffer;                          \/\/ Accumulation buffer when lo/;"	m	struct:ImGuiContext	typeref:typename:ImGuiTextBuffer
LogButtons	interface/imgui.cpp	/^void ImGui::LogButtons()$/;"	f	class:ImGui	typeref:typename:void
LogDepthRef	interface/imgui_internal.h	/^    int                     LogDepthRef;$/;"	m	struct:ImGuiContext	typeref:typename:int
LogDepthToExpand	interface/imgui_internal.h	/^    int                     LogDepthToExpand;$/;"	m	struct:ImGuiContext	typeref:typename:int
LogDepthToExpandDefault	interface/imgui_internal.h	/^    int                     LogDepthToExpandDefault;            \/\/ Default\/stored value for L/;"	m	struct:ImGuiContext	typeref:typename:int
LogEnabled	interface/imgui_internal.h	/^    bool                    LogEnabled;                         \/\/ Currently capturing$/;"	m	struct:ImGuiContext	typeref:typename:bool
LogFile	interface/imgui_internal.h	/^    ImFileHandle            LogFile;                            \/\/ If != NULL log to stdout\/ /;"	m	struct:ImGuiContext	typeref:typename:ImFileHandle
LogFilename	interface/imgui.h	/^    const char* LogFilename;                    \/\/ = "imgui_log.txt"\/\/ Path to .log file (de/;"	m	struct:ImGuiIO	typeref:typename:const char *
LogFinish	interface/imgui.cpp	/^void ImGui::LogFinish()$/;"	f	class:ImGui	typeref:typename:void
LogLineFirstItem	interface/imgui_internal.h	/^    bool                    LogLineFirstItem;$/;"	m	struct:ImGuiContext	typeref:typename:bool
LogLinePosY	interface/imgui_internal.h	/^    float                   LogLinePosY;$/;"	m	struct:ImGuiContext	typeref:typename:float
LogRenderedText	interface/imgui.cpp	/^void ImGui::LogRenderedText(const ImVec2* ref_pos, const char* text, const char* text_end)$/;"	f	class:ImGui	typeref:typename:void
LogSliderDeadzone	interface/imgui.h	/^    float       LogSliderDeadzone;          \/\/ The size in pixels of the dead-zone around zero/;"	m	struct:ImGuiStyle	typeref:typename:float
LogText	interface/imgui.cpp	/^void ImGui::LogText(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
LogToBuffer	interface/imgui.cpp	/^void ImGui::LogToBuffer(int auto_open_depth)$/;"	f	class:ImGui	typeref:typename:void
LogToClipboard	interface/imgui.cpp	/^void ImGui::LogToClipboard(int auto_open_depth)$/;"	f	class:ImGui	typeref:typename:void
LogToFile	interface/imgui.cpp	/^void ImGui::LogToFile(int auto_open_depth, const char* filename)$/;"	f	class:ImGui	typeref:typename:void
LogToTTY	interface/imgui.cpp	/^void ImGui::LogToTTY(int auto_open_depth)$/;"	f	class:ImGui	typeref:typename:void
LogType	interface/imgui_internal.h	/^    ImGuiLogType            LogType;                            \/\/ Capture target$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiLogType
LowerBound	interface/imgui.cpp	/^static ImGuiStorage::ImGuiStoragePair* LowerBound(ImVector<ImGuiStorage::ImGuiStoragePair>& data/;"	f	typeref:typename:ImGuiStorage::ImGuiStoragePair *	file:
MAP_ANALOG	interface/imgui_impl_sdl.cpp	/^    #define MAP_ANALOG(/;"	d	file:
MAP_BUTTON	interface/imgui_impl_sdl.cpp	/^    #define MAP_BUTTON(/;"	d	file:
MODE	arm.hpp	/^            MODE,$/;"	e	enum:Cpu::Flag
MSAASamples	interface/imgui_impl_vulkan.h	/^    VkSampleCountFlagBits        MSAASamples;   \/\/ >= VK_SAMPLE_COUNT_1_BIT$/;"	m	struct:ImGui_ImplVulkan_InitInfo	typeref:typename:VkSampleCountFlagBits
MallocWrapper	interface/imgui.cpp	/^static void*   MallocWrapper(size_t size, void* user_data)    { IM_UNUSED(user_data); IM_UNUSED(/;"	f	typeref:typename:void *	file:
MallocWrapper	interface/imgui.cpp	/^static void*   MallocWrapper(size_t size, void* user_data)    { IM_UNUSED(user_data); return mal/;"	f	typeref:typename:void *	file:
Map	interface/imgui_internal.h	/^    ImGuiStorage    Map;        \/\/ ID->Index$/;"	m	struct:ImPool	typeref:typename:ImGuiStorage
MarkIniSettingsDirty	interface/imgui.cpp	/^void ImGui::MarkIniSettingsDirty()$/;"	f	class:ImGui	typeref:typename:void
MarkIniSettingsDirty	interface/imgui.cpp	/^void ImGui::MarkIniSettingsDirty(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
MarkItemEdited	interface/imgui.cpp	/^void ImGui::MarkItemEdited(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
Max	interface/imgui_internal.h	/^    ImVec2      Max;    \/\/ Lower-right$/;"	m	struct:ImRect	typeref:typename:ImVec2
MemAlloc	interface/imgui.cpp	/^void* ImGui::MemAlloc(size_t size)$/;"	f	class:ImGui	typeref:typename:void *
MemFree	interface/imgui.cpp	/^void ImGui::MemFree(void* ptr)$/;"	f	class:ImGui	typeref:typename:void
MemoryCompacted	interface/imgui_internal.h	/^    bool                    MemoryCompacted;                    \/\/ Set when window extraneous /;"	m	struct:ImGuiWindow	typeref:typename:bool
MemoryDrawListIdxCapacity	interface/imgui_internal.h	/^    int                     MemoryDrawListIdxCapacity;          \/\/ Backup of last idx\/vtx cou/;"	m	struct:ImGuiWindow	typeref:typename:int
MemoryDrawListVtxCapacity	interface/imgui_internal.h	/^    int                     MemoryDrawListVtxCapacity;$/;"	m	struct:ImGuiWindow	typeref:typename:int
MenuBarAppending	interface/imgui_internal.h	/^    bool                    MenuBarAppending;       \/\/ FIXME: Remove this$/;"	m	struct:ImGuiWindowTempData	typeref:typename:bool
MenuBarHeight	interface/imgui_internal.h	/^    float       MenuBarHeight() const   { ImGuiContext& g = *GImGui; return (Flags & ImGuiWindow/;"	f	struct:ImGuiWindow	typeref:typename:float
MenuBarOffset	interface/imgui_internal.h	/^    ImVec2                  MenuBarOffset;          \/\/ MenuBarOffset.x is sort of equivalent o/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
MenuBarOffsetMinVal	interface/imgui_internal.h	/^    ImVec2                      MenuBarOffsetMinVal;    \/\/ *Always on* This is not exposed pub/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImVec2
MenuBarRect	interface/imgui_internal.h	/^    ImRect      MenuBarRect() const     { float y1 = Pos.y + TitleBarHeight(); return ImRect(Pos/;"	f	struct:ImGuiWindow	typeref:typename:ImRect
MenuColumns	interface/imgui_internal.h	/^    ImGuiMenuColumns        MenuColumns;            \/\/ Simplified columns storage for menu ite/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiMenuColumns
MenuItem	interface/imgui_widgets.cpp	/^bool ImGui::MenuItem(const char* label, const char* shortcut, bool selected, bool enabled)$/;"	f	class:ImGui	typeref:typename:bool
MenuItem	interface/imgui_widgets.cpp	/^bool ImGui::MenuItem(const char* label, const char* shortcut, bool* p_selected, bool enabled)$/;"	f	class:ImGui	typeref:typename:bool
MenusIdSubmittedThisFrame	interface/imgui_internal.h	/^    ImVector<ImGuiID>       MenusIdSubmittedThisFrame;          \/\/ A list of menu IDs that wer/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiID>
Merge	interface/imgui_draw.cpp	/^void ImDrawListSplitter::Merge(ImDrawList* draw_list)$/;"	f	class:ImDrawListSplitter	typeref:typename:void
MergeMode	interface/imgui.h	/^    bool            MergeMode;              \/\/ false    \/\/ Merge into previous ImFont, so yo/;"	m	struct:ImFontConfig	typeref:typename:bool
MetricsActiveAllocations	interface/imgui.h	/^    int         MetricsActiveAllocations;       \/\/ Number of active allocations, updated by Me/;"	m	struct:ImGuiIO	typeref:typename:int
MetricsActiveWindows	interface/imgui.h	/^    int         MetricsActiveWindows;           \/\/ Number of active windows$/;"	m	struct:ImGuiIO	typeref:typename:int
MetricsHelpMarker	interface/imgui.cpp	/^static void MetricsHelpMarker(const char* desc)$/;"	f	typeref:typename:void	file:
MetricsRenderIndices	interface/imgui.h	/^    int         MetricsRenderIndices;           \/\/ Indices output during last call to Render()/;"	m	struct:ImGuiIO	typeref:typename:int
MetricsRenderVertices	interface/imgui.h	/^    int         MetricsRenderVertices;          \/\/ Vertices output during last call to Render(/;"	m	struct:ImGuiIO	typeref:typename:int
MetricsRenderWindows	interface/imgui.h	/^    int         MetricsRenderWindows;           \/\/ Number of visible windows$/;"	m	struct:ImGuiIO	typeref:typename:int
MetricsTotalSurface	interface/imgui.h	/^    int                         MetricsTotalSurface;\/\/ 4     \/\/ out \/\/            \/\/ Tot/;"	m	struct:ImFont	typeref:typename:int
Min	interface/imgui_internal.h	/^    ImVec2      Min;    \/\/ Upper-left$/;"	m	struct:ImRect	typeref:typename:ImVec2
MinImageCount	interface/imgui_impl_vulkan.h	/^    uint32_t            MinImageCount;          \/\/ >= 2$/;"	m	struct:ImGui_ImplVulkan_InitInfo	typeref:typename:uint32_t
Mode	arm.hpp	/^        enum class Mode : u8 {$/;"	g	class:Cpu	typeref:typename:u8
MouseClicked	interface/imgui.h	/^    bool        MouseClicked[5];                \/\/ Mouse button went from !Down to Down$/;"	m	struct:ImGuiIO	typeref:typename:bool[5]
MouseClickedPos	interface/imgui.h	/^    ImVec2      MouseClickedPos[5];             \/\/ Position at time of clicking$/;"	m	struct:ImGuiIO	typeref:typename:ImVec2[5]
MouseClickedTime	interface/imgui.h	/^    double      MouseClickedTime[5];            \/\/ Time of last click (used to figure out doub/;"	m	struct:ImGuiIO	typeref:typename:double[5]
MouseCursor	interface/imgui_internal.h	/^    ImGuiMouseCursor        MouseCursor;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiMouseCursor
MouseCursorScale	interface/imgui.h	/^    float       MouseCursorScale;           \/\/ Scale software rendered mouse cursor (when io.M/;"	m	struct:ImGuiStyle	typeref:typename:float
MouseDelta	interface/imgui.h	/^    ImVec2      MouseDelta;                     \/\/ Mouse delta. Note that this is zero if eith/;"	m	struct:ImGuiIO	typeref:typename:ImVec2
MouseDoubleClickMaxDist	interface/imgui.h	/^    float       MouseDoubleClickMaxDist;        \/\/ = 6.0f           \/\/ Distance threshold to/;"	m	struct:ImGuiIO	typeref:typename:float
MouseDoubleClickTime	interface/imgui.h	/^    float       MouseDoubleClickTime;           \/\/ = 0.30f          \/\/ Time for a double-cli/;"	m	struct:ImGuiIO	typeref:typename:float
MouseDoubleClicked	interface/imgui.h	/^    bool        MouseDoubleClicked[5];          \/\/ Has mouse button been double-clicked?$/;"	m	struct:ImGuiIO	typeref:typename:bool[5]
MouseDown	interface/imgui.h	/^    bool        MouseDown[5];                   \/\/ Mouse buttons: 0=left, 1=right, 2=middle + /;"	m	struct:ImGuiIO	typeref:typename:bool[5]
MouseDownDuration	interface/imgui.h	/^    float       MouseDownDuration[5];           \/\/ Duration the mouse button has been down (0./;"	m	struct:ImGuiIO	typeref:typename:float[5]
MouseDownDurationPrev	interface/imgui.h	/^    float       MouseDownDurationPrev[5];       \/\/ Previous time the mouse button has been dow/;"	m	struct:ImGuiIO	typeref:typename:float[5]
MouseDownOwned	interface/imgui.h	/^    bool        MouseDownOwned[5];              \/\/ Track if button was clicked inside a dear i/;"	m	struct:ImGuiIO	typeref:typename:bool[5]
MouseDownWasDoubleClick	interface/imgui.h	/^    bool        MouseDownWasDoubleClick[5];     \/\/ Track if button down was a double-click$/;"	m	struct:ImGuiIO	typeref:typename:bool[5]
MouseDragMaxDistanceAbs	interface/imgui.h	/^    ImVec2      MouseDragMaxDistanceAbs[5];     \/\/ Maximum distance, absolute, on each axis, o/;"	m	struct:ImGuiIO	typeref:typename:ImVec2[5]
MouseDragMaxDistanceSqr	interface/imgui.h	/^    float       MouseDragMaxDistanceSqr[5];     \/\/ Squared maximum distance of how much mouse /;"	m	struct:ImGuiIO	typeref:typename:float[5]
MouseDragThreshold	interface/imgui.h	/^    float       MouseDragThreshold;             \/\/ = 6.0f           \/\/ Distance threshold be/;"	m	struct:ImGuiIO	typeref:typename:float
MouseDrawCursor	interface/imgui.h	/^    bool        MouseDrawCursor;                \/\/ = false          \/\/ Request ImGui to draw/;"	m	struct:ImGuiIO	typeref:typename:bool
MousePos	interface/imgui.h	/^    ImVec2      MousePos;                       \/\/ Mouse position, in pixels. Set to ImVec2(-F/;"	m	struct:ImGuiIO	typeref:typename:ImVec2
MousePosPrev	interface/imgui.h	/^    ImVec2      MousePosPrev;                   \/\/ Previous mouse position (note that MouseDel/;"	m	struct:ImGuiIO	typeref:typename:ImVec2
MouseReleased	interface/imgui.h	/^    bool        MouseReleased[5];               \/\/ Mouse button went from Down to !Down$/;"	m	struct:ImGuiIO	typeref:typename:bool[5]
MouseWheel	interface/imgui.h	/^    float       MouseWheel;                     \/\/ Mouse wheel Vertical: 1 unit scrolls about /;"	m	struct:ImGuiIO	typeref:typename:float
MouseWheelH	interface/imgui.h	/^    float       MouseWheelH;                    \/\/ Mouse wheel Horizontal. Most users don't ha/;"	m	struct:ImGuiIO	typeref:typename:float
MoveId	interface/imgui_internal.h	/^    ImGuiID                 MoveId;                             \/\/ == window->GetID("#MOVE")$/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiID
MovingWindow	interface/imgui_internal.h	/^    ImGuiWindow*            MovingWindow;                       \/\/ Track the window we clicked/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
NAV_MAP_KEY	interface/imgui.cpp	/^        #define NAV_MAP_KEY(/;"	d	file:
NAV_WINDOWING_HIGHLIGHT_DELAY	interface/imgui.cpp	/^static const float NAV_WINDOWING_HIGHLIGHT_DELAY            = 0.20f;    \/\/ Time before the hig/;"	v	typeref:typename:const float	file:
NAV_WINDOWING_LIST_APPEAR_DELAY	interface/imgui.cpp	/^static const float NAV_WINDOWING_LIST_APPEAR_DELAY          = 0.15f;    \/\/ Time before the win/;"	v	typeref:typename:const float	file:
NEGATIVE	arm.hpp	/^            NEGATIVE$/;"	e	enum:Cpu::Flag
NOMINMAX	interface/imgui.cpp	/^#define NOMINMAX$/;"	d	file:
Name	interface/imgui.h	/^    char            Name[40];               \/\/ Name (strictly to ease debugging)$/;"	m	struct:ImFontConfig	typeref:typename:char[40]
Name	interface/imgui_internal.h	/^    char*                   Name;                               \/\/ Window name, owned by the w/;"	m	struct:ImGuiWindow	typeref:typename:char *
Name	interface/imgui_internal.h	/^    const char* Name;           \/\/ Short descriptive name for the type, for debugging$/;"	m	struct:ImGuiDataTypeInfo	typeref:typename:const char *
NameBufLen	interface/imgui_internal.h	/^    int                     NameBufLen;                         \/\/ Size of buffer storing Name/;"	m	struct:ImGuiWindow	typeref:typename:int
NameOffset	interface/imgui_internal.h	/^    ImS16               NameOffset;             \/\/ When Window==NULL, offset to name within pa/;"	m	struct:ImGuiTabItem	typeref:typename:ImS16
NavActivateDownId	interface/imgui_internal.h	/^    ImGuiID                 NavActivateDownId;                  \/\/ ~~ IsNavInputDown(ImGuiNavI/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavActivateId	interface/imgui_internal.h	/^    ImGuiID                 NavActivateId;                      \/\/ ~~ (g.ActiveId == 0) && IsN/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavActivatePressedId	interface/imgui_internal.h	/^    ImGuiID                 NavActivatePressedId;               \/\/ ~~ IsNavInputPressed(ImGuiN/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavActive	interface/imgui.h	/^    bool        NavActive;                      \/\/ Keyboard\/Gamepad navigation is currently a/;"	m	struct:ImGuiIO	typeref:typename:bool
NavAnyRequest	interface/imgui_internal.h	/^    bool                    NavAnyRequest;                      \/\/ ~~ NavMoveRequest || NavIni/;"	m	struct:ImGuiContext	typeref:typename:bool
NavCalcPreferredRefPos	interface/imgui.cpp	/^static ImVec2 ImGui::NavCalcPreferredRefPos()$/;"	f	class:ImGui	typeref:typename:ImVec2	file:
NavClampRectToVisibleAreaForMoveDir	interface/imgui.cpp	/^static void inline NavClampRectToVisibleAreaForMoveDir(ImGuiDir move_dir, ImRect& r, const ImRec/;"	f	typeref:typename:void	file:
NavDisableHighlight	interface/imgui_internal.h	/^    bool                    NavDisableHighlight;                \/\/ When user starts using mous/;"	m	struct:ImGuiContext	typeref:typename:bool
NavDisableMouseHover	interface/imgui_internal.h	/^    bool                    NavDisableMouseHover;               \/\/ When user starts using game/;"	m	struct:ImGuiContext	typeref:typename:bool
NavEndFrame	interface/imgui.cpp	/^static void ImGui::NavEndFrame()$/;"	f	class:ImGui	typeref:typename:void	file:
NavFocusScopeId	interface/imgui_internal.h	/^    ImGuiID                 NavFocusScopeId;                    \/\/ Identify a selection scope /;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavFocusScopeIdCurrent	interface/imgui_internal.h	/^    ImGuiID                 NavFocusScopeIdCurrent; \/\/ Current focus scope ID while appending$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiID
NavHasScroll	interface/imgui_internal.h	/^    bool                    NavHasScroll;           \/\/ Set when scrolling can be used (ScrollM/;"	m	struct:ImGuiWindowTempData	typeref:typename:bool
NavHideHighlightOneFrame	interface/imgui_internal.h	/^    bool                    NavHideHighlightOneFrame;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:bool
NavId	interface/imgui_internal.h	/^    ImGuiID                 NavId;                              \/\/ Focused item for navigation$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavIdIsAlive	interface/imgui_internal.h	/^    bool                    NavIdIsAlive;                       \/\/ Nav widget has been seen th/;"	m	struct:ImGuiContext	typeref:typename:bool
NavIdTabCounter	interface/imgui_internal.h	/^    int                     NavIdTabCounter;                    \/\/ == NavWindow->DC.FocusIdxTa/;"	m	struct:ImGuiContext	typeref:typename:int
NavInitRequest	interface/imgui_internal.h	/^    bool                    NavInitRequest;                     \/\/ Init request for appearing /;"	m	struct:ImGuiContext	typeref:typename:bool
NavInitRequestFromMove	interface/imgui_internal.h	/^    bool                    NavInitRequestFromMove;$/;"	m	struct:ImGuiContext	typeref:typename:bool
NavInitResultId	interface/imgui_internal.h	/^    ImGuiID                 NavInitResultId;                    \/\/ Init request result (first /;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavInitResultRectRel	interface/imgui_internal.h	/^    ImRect                  NavInitResultRectRel;               \/\/ Init request result rectang/;"	m	struct:ImGuiContext	typeref:typename:ImRect
NavInitWindow	interface/imgui.cpp	/^void ImGui::NavInitWindow(ImGuiWindow* window, bool force_reinit)$/;"	f	class:ImGui	typeref:typename:void
NavInputId	interface/imgui_internal.h	/^    ImGuiID                 NavInputId;                         \/\/ ~~ IsNavInputPressed(ImGuiN/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavInputSource	interface/imgui_internal.h	/^    ImGuiInputSource        NavInputSource;                     \/\/ Keyboard or Gamepad mode? T/;"	m	struct:ImGuiContext	typeref:typename:ImGuiInputSource
NavInputs	interface/imgui.h	/^    float       NavInputs[ImGuiNavInput_COUNT]; \/\/ Gamepad inputs. Cleared back to zero by End/;"	m	struct:ImGuiIO	typeref:typename:float[]
NavInputsDownDuration	interface/imgui.h	/^    float       NavInputsDownDuration[ImGuiNavInput_COUNT];$/;"	m	struct:ImGuiIO	typeref:typename:float[]
NavInputsDownDurationPrev	interface/imgui.h	/^    float       NavInputsDownDurationPrev[ImGuiNavInput_COUNT];$/;"	m	struct:ImGuiIO	typeref:typename:float[]
NavJustMovedToFocusScopeId	interface/imgui_internal.h	/^    ImGuiID                 NavJustMovedToFocusScopeId;         \/\/ Just navigated to this focu/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavJustMovedToId	interface/imgui_internal.h	/^    ImGuiID                 NavJustMovedToId;                   \/\/ Just navigated to this id (/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavJustMovedToKeyMods	interface/imgui_internal.h	/^    ImGuiKeyModFlags        NavJustMovedToKeyMods;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiKeyModFlags
NavJustTabbedId	interface/imgui_internal.h	/^    ImGuiID                 NavJustTabbedId;                    \/\/ Just tabbed to this id.$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavLastChildNavWindow	interface/imgui_internal.h	/^    ImGuiWindow*            NavLastChildNavWindow;              \/\/ When going to the menu bar,/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindow *
NavLastIds	interface/imgui_internal.h	/^    ImGuiID                 NavLastIds[ImGuiNavLayer_COUNT];    \/\/ Last known NavId for this w/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiID[]
NavLayer	interface/imgui_internal.h	/^    ImGuiNavLayer           NavLayer;                           \/\/ Layer we are navigating on./;"	m	struct:ImGuiContext	typeref:typename:ImGuiNavLayer
NavLayerActiveMask	interface/imgui_internal.h	/^    int                     NavLayerActiveMask;     \/\/ Which layers have been written to (resu/;"	m	struct:ImGuiWindowTempData	typeref:typename:int
NavLayerActiveMaskNext	interface/imgui_internal.h	/^    int                     NavLayerActiveMaskNext; \/\/ Which layers have been written to (accu/;"	m	struct:ImGuiWindowTempData	typeref:typename:int
NavLayerCurrent	interface/imgui_internal.h	/^    ImGuiNavLayer           NavLayerCurrent;        \/\/ Current layer, 0..31 (we currently only/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiNavLayer
NavMousePosDirty	interface/imgui_internal.h	/^    bool                    NavMousePosDirty;                   \/\/ When set we will update mou/;"	m	struct:ImGuiContext	typeref:typename:bool
NavMoveClipDir	interface/imgui_internal.h	/^    ImGuiDir                NavMoveClipDir;                     \/\/ FIXME-NAV: Describe the pur/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDir
NavMoveDir	interface/imgui_internal.h	/^    ImGuiDir                NavMoveDir, NavMoveDirLast;         \/\/ Direction of the move reque/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDir
NavMoveDirLast	interface/imgui_internal.h	/^    ImGuiDir                NavMoveDir, NavMoveDirLast;         \/\/ Direction of the move reque/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDir
NavMoveRequest	interface/imgui_internal.h	/^    bool                    NavMoveRequest;                     \/\/ Move request for this frame$/;"	m	struct:ImGuiContext	typeref:typename:bool
NavMoveRequestButNoResultYet	interface/imgui.cpp	/^bool ImGui::NavMoveRequestButNoResultYet()$/;"	f	class:ImGui	typeref:typename:bool
NavMoveRequestCancel	interface/imgui.cpp	/^void ImGui::NavMoveRequestCancel()$/;"	f	class:ImGui	typeref:typename:void
NavMoveRequestFlags	interface/imgui_internal.h	/^    ImGuiNavMoveFlags       NavMoveRequestFlags;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNavMoveFlags
NavMoveRequestForward	interface/imgui.cpp	/^void ImGui::NavMoveRequestForward(ImGuiDir move_dir, ImGuiDir clip_dir, const ImRect& bb_rel, Im/;"	f	class:ImGui	typeref:typename:void
NavMoveRequestForward	interface/imgui_internal.h	/^    ImGuiNavForward         NavMoveRequestForward;              \/\/ None \/ ForwardQueued \/ Fo/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNavForward
NavMoveRequestKeyMods	interface/imgui_internal.h	/^    ImGuiKeyModFlags        NavMoveRequestKeyMods;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiKeyModFlags
NavMoveRequestTryWrapping	interface/imgui.cpp	/^void ImGui::NavMoveRequestTryWrapping(ImGuiWindow* window, ImGuiNavMoveFlags move_flags)$/;"	f	class:ImGui	typeref:typename:void
NavMoveResultLocal	interface/imgui_internal.h	/^    ImGuiNavMoveResult      NavMoveResultLocal;                 \/\/ Best move request candidate/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNavMoveResult
NavMoveResultLocalVisibleSet	interface/imgui_internal.h	/^    ImGuiNavMoveResult      NavMoveResultLocalVisibleSet;       \/\/ Best move request candidate/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNavMoveResult
NavMoveResultOther	interface/imgui_internal.h	/^    ImGuiNavMoveResult      NavMoveResultOther;                 \/\/ Best move request candidate/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNavMoveResult
NavNextActivateId	interface/imgui_internal.h	/^    ImGuiID                 NavNextActivateId;                  \/\/ Set by ActivateItem(), queu/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavProcessItem	interface/imgui.cpp	/^static void ImGui::NavProcessItem(ImGuiWindow* window, const ImRect& nav_bb, const ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void	file:
NavRectRel	interface/imgui_internal.h	/^    ImRect                  NavRectRel[ImGuiNavLayer_COUNT];    \/\/ Reference rectangle, in win/;"	m	struct:ImGuiWindow	typeref:typename:ImRect[]
NavRestoreLastChildNavWindow	interface/imgui.cpp	/^static ImGuiWindow* ImGui::NavRestoreLastChildNavWindow(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:ImGuiWindow *	file:
NavRestoreLayer	interface/imgui.cpp	/^static void NavRestoreLayer(ImGuiNavLayer layer)$/;"	f	typeref:typename:void	file:
NavSaveLastChildNavWindowIntoParent	interface/imgui.cpp	/^static void ImGui::NavSaveLastChildNavWindowIntoParent(ImGuiWindow* nav_window)$/;"	f	class:ImGui	typeref:typename:void	file:
NavScoreItem	interface/imgui.cpp	/^static bool ImGui::NavScoreItem(ImGuiNavMoveResult* result, ImRect cand)$/;"	f	class:ImGui	typeref:typename:bool	file:
NavScoreItemDistInterval	interface/imgui.cpp	/^static float inline NavScoreItemDistInterval(float a0, float a1, float b0, float b1)$/;"	f	typeref:typename:float	file:
NavScoringCount	interface/imgui_internal.h	/^    int                     NavScoringCount;                    \/\/ Metrics for debugging$/;"	m	struct:ImGuiContext	typeref:typename:int
NavScoringRect	interface/imgui_internal.h	/^    ImRect                  NavScoringRect;                     \/\/ Rectangle used for scoring,/;"	m	struct:ImGuiContext	typeref:typename:ImRect
NavUpdate	interface/imgui.cpp	/^static void ImGui::NavUpdate()$/;"	f	class:ImGui	typeref:typename:void	file:
NavUpdateAnyRequestFlag	interface/imgui.cpp	/^static inline void ImGui::NavUpdateAnyRequestFlag()$/;"	f	class:ImGui	typeref:typename:void	file:
NavUpdateInitResult	interface/imgui.cpp	/^static void ImGui::NavUpdateInitResult()$/;"	f	class:ImGui	typeref:typename:void	file:
NavUpdateMoveResult	interface/imgui.cpp	/^static void ImGui::NavUpdateMoveResult()$/;"	f	class:ImGui	typeref:typename:void	file:
NavUpdatePageUpPageDown	interface/imgui.cpp	/^static float ImGui::NavUpdatePageUpPageDown()$/;"	f	class:ImGui	typeref:typename:float	file:
NavUpdateWindowing	interface/imgui.cpp	/^static void ImGui::NavUpdateWindowing()$/;"	f	class:ImGui	typeref:typename:void	file:
NavUpdateWindowingHighlightWindow	interface/imgui.cpp	/^static void NavUpdateWindowingHighlightWindow(int focus_change_dir)$/;"	f	typeref:typename:void	file:
NavUpdateWindowingOverlay	interface/imgui.cpp	/^void ImGui::NavUpdateWindowingOverlay()$/;"	f	class:ImGui	typeref:typename:void
NavVisible	interface/imgui.h	/^    bool        NavVisible;                     \/\/ Keyboard\/Gamepad navigation is visible and/;"	m	struct:ImGuiIO	typeref:typename:bool
NavWindow	interface/imgui_internal.h	/^    ImGuiWindow*            NavWindow;                          \/\/ Focused window for navigati/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
NavWindowingHighlightAlpha	interface/imgui_internal.h	/^    float                   NavWindowingHighlightAlpha;$/;"	m	struct:ImGuiContext	typeref:typename:float
NavWindowingListWindow	interface/imgui_internal.h	/^    ImGuiWindow*            NavWindowingListWindow;             \/\/ Internal window actually li/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
NavWindowingTarget	interface/imgui_internal.h	/^    ImGuiWindow*            NavWindowingTarget;                 \/\/ Target window when doing CT/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
NavWindowingTargetAnim	interface/imgui_internal.h	/^    ImGuiWindow*            NavWindowingTargetAnim;             \/\/ Record of last valid NavWin/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
NavWindowingTimer	interface/imgui_internal.h	/^    float                   NavWindowingTimer;$/;"	m	struct:ImGuiContext	typeref:typename:float
NavWindowingToggleLayer	interface/imgui_internal.h	/^    bool                    NavWindowingToggleLayer;$/;"	m	struct:ImGuiContext	typeref:typename:bool
NavWrapRequestFlags	interface/imgui_internal.h	/^    ImGuiNavMoveFlags       NavWrapRequestFlags;                \/\/ Wrap-around operation flags/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNavMoveFlags
NavWrapRequestWindow	interface/imgui_internal.h	/^    ImGuiWindow*            NavWrapRequestWindow;               \/\/ Window which requested tryi/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
NewFrame	interface/imgui.cpp	/^void ImGui::NewFrame()$/;"	f	class:ImGui	typeref:typename:void
NewLine	interface/imgui_widgets.cpp	/^void ImGui::NewLine()$/;"	f	class:ImGui	typeref:typename:void
NextColumn	interface/imgui_widgets.cpp	/^void ImGui::NextColumn()$/;"	f	class:ImGui	typeref:typename:void
NextItemData	interface/imgui_internal.h	/^    ImGuiNextItemData       NextItemData;                       \/\/ Storage for SetNextItem** f/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNextItemData
NextSelectedTabId	interface/imgui_internal.h	/^    ImGuiID             NextSelectedTabId;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiID
NextWidth	interface/imgui_internal.h	/^    float       Width, NextWidth;$/;"	m	struct:ImGuiMenuColumns	typeref:typename:float
NextWidths	interface/imgui_internal.h	/^    float       Pos[3], NextWidths[3];$/;"	m	struct:ImGuiMenuColumns	typeref:typename:float[3]
NextWindowData	interface/imgui_internal.h	/^    ImGuiNextWindowData     NextWindowData;                     \/\/ Storage for SetNextWindow**/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNextWindowData
OVERFLOW	arm.hpp	/^            OVERFLOW,$/;"	e	enum:Cpu::Flag
OffMaxX	interface/imgui_internal.h	/^    float               OffMinX, OffMaxX;       \/\/ Offsets from HostWorkRect.Min.x$/;"	m	struct:ImGuiColumns	typeref:typename:float
OffMinX	interface/imgui_internal.h	/^    float               OffMinX, OffMaxX;       \/\/ Offsets from HostWorkRect.Min.x$/;"	m	struct:ImGuiColumns	typeref:typename:float
Offset	interface/imgui.cpp	/^    ImU32           Offset;$/;"	m	struct:ImGuiStyleVarInfo	typeref:typename:ImU32	file:
Offset	interface/imgui_internal.h	/^    float               Offset;                 \/\/ Position relative to beginning of tab$/;"	m	struct:ImGuiTabItem	typeref:typename:float
OffsetNorm	interface/imgui_internal.h	/^    float               OffsetNorm;         \/\/ Column start offset, normalized 0.0 (far left) /;"	m	struct:ImGuiColumnData	typeref:typename:float
OffsetNormBeforeResize	interface/imgui_internal.h	/^    float               OffsetNormBeforeResize;$/;"	m	struct:ImGuiColumnData	typeref:typename:float
OnKeyPressed	interface/imgui_widgets.cpp	/^void ImGuiInputTextState::OnKeyPressed(int key)$/;"	f	class:ImGuiInputTextState	typeref:typename:void
OpenCond	interface/imgui_internal.h	/^    ImGuiCond                   OpenCond;$/;"	m	struct:ImGuiNextItemData	typeref:typename:ImGuiCond
OpenFrameCount	interface/imgui_internal.h	/^    int                 OpenFrameCount; \/\/ Set on OpenPopup()$/;"	m	struct:ImGuiPopupData	typeref:typename:int
OpenMousePos	interface/imgui_internal.h	/^    ImVec2              OpenMousePos;   \/\/ Set on OpenPopup(), copy of mouse position at the t/;"	m	struct:ImGuiPopupData	typeref:typename:ImVec2
OpenParentId	interface/imgui_internal.h	/^    ImGuiID             OpenParentId;   \/\/ Set on OpenPopup(), we need this to differentiate m/;"	m	struct:ImGuiPopupData	typeref:typename:ImGuiID
OpenPopup	interface/imgui.cpp	/^void ImGui::OpenPopup(const char* str_id, ImGuiPopupFlags popup_flags)$/;"	f	class:ImGui	typeref:typename:void
OpenPopupContextItem	interface/imgui.h	/^    static inline void  OpenPopupContextItem(const char* str_id = NULL, ImGuiMouseButton mb = 1)/;"	f	namespace:ImGui	typeref:typename:void
OpenPopupEx	interface/imgui.cpp	/^void ImGui::OpenPopupEx(ImGuiID id, ImGuiPopupFlags popup_flags)$/;"	f	class:ImGui	typeref:typename:void
OpenPopupOnItemClick	interface/imgui.cpp	/^void ImGui::OpenPopupOnItemClick(const char* str_id, ImGuiPopupFlags popup_flags)$/;"	f	class:ImGui	typeref:typename:void
OpenPopupPos	interface/imgui_internal.h	/^    ImVec2              OpenPopupPos;   \/\/ Set on OpenPopup(), preferred popup position (typic/;"	m	struct:ImGuiPopupData	typeref:typename:ImVec2
OpenPopupStack	interface/imgui_internal.h	/^    ImVector<ImGuiPopupData>OpenPopupStack;                     \/\/ Which popups are open (pers/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiPopupData>
OpenVal	interface/imgui_internal.h	/^    bool                        OpenVal;        \/\/ Set by SetNextItemOpen()$/;"	m	struct:ImGuiNextItemData	typeref:typename:bool
OuterAngle	interface/imgui.cpp	/^    float  OuterAngle;$/;"	m	struct:ImGuiResizeBorderDef	typeref:typename:float	file:
OuterRectClipped	interface/imgui_internal.h	/^    ImRect                  OuterRectClipped;                   \/\/ == Window->Rect() just afte/;"	m	struct:ImGuiWindow	typeref:typename:ImRect
Overlaps	interface/imgui_internal.h	/^    bool        Overlaps(const ImRect& r) const     { return r.Min.y <  Max.y && r.Max.y >  Min./;"	f	struct:ImRect	typeref:typename:bool
OversampleH	interface/imgui.h	/^    int             OversampleH;            \/\/ 3        \/\/ Rasterize at higher quality for s/;"	m	struct:ImFontConfig	typeref:typename:int
OversampleV	interface/imgui.h	/^    int             OversampleV;            \/\/ 1        \/\/ Rasterize at higher quality for s/;"	m	struct:ImFontConfig	typeref:typename:int
Owner	interface/imgui_internal.h	/^    ImGuiID                     Owner;$/;"	m	struct:ImGuiContextHook	typeref:typename:ImGuiID
PC	arm.hpp	/^            PC,$/;"	e	enum:Cpu::Register
PREFETCH_ABORT	arm.hpp	/^            PREFETCH_ABORT,$/;"	e	enum:Cpu::Interrupt
PackIdLines	interface/imgui.h	/^    int                         PackIdLines;        \/\/ Custom texture rectangle ID for baked a/;"	m	struct:ImFontAtlas	typeref:typename:int
PackIdMouseCursors	interface/imgui.h	/^    int                         PackIdMouseCursors; \/\/ Custom texture rectangle ID for white p/;"	m	struct:ImFontAtlas	typeref:typename:int
PackRange	interface/imgui_draw.cpp	/^    stbtt_pack_range    PackRange;          \/\/ Hold the list of codepoints to pack (essentiall/;"	m	struct:ImFontBuildSrcData	typeref:typename:stbtt_pack_range	file:
PackedChars	interface/imgui_draw.cpp	/^    stbtt_packedchar*   PackedChars;        \/\/ Output glyphs$/;"	m	struct:ImFontBuildSrcData	typeref:typename:stbtt_packedchar *	file:
PairCompareByID	interface/imgui.cpp	/^        static int IMGUI_CDECL PairCompareByID(const void* lhs, const void* rhs)$/;"	f	struct:ImGuiStorage::BuildSortByKey::StaticFunc	typeref:typename:int IMGUI_CDECL	file:
ParentLayoutType	interface/imgui_internal.h	/^    ImGuiLayoutType         ParentLayoutType;       \/\/ Layout type of parent window at the tim/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiLayoutType
ParentWindow	interface/imgui_internal.h	/^    ImGuiWindow*            ParentWindow;                       \/\/ If we are a child _or_ popu/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindow *
ParentWorkRect	interface/imgui_internal.h	/^    ImRect                  ParentWorkRect;                     \/\/ Backup of WorkRect before e/;"	m	struct:ImGuiWindow	typeref:typename:ImRect
PassFilter	interface/imgui.cpp	/^bool ImGuiTextFilter::PassFilter(const char* text, const char* text_end) const$/;"	f	class:ImGuiTextFilter	typeref:typename:bool
PatchFormatStringFloatToInt	interface/imgui_widgets.cpp	/^static const char* PatchFormatStringFloatToInt(const char* fmt)$/;"	f	typeref:typename:const char *	file:
PathArcTo	interface/imgui_draw.cpp	/^void ImDrawList::PathArcTo(const ImVec2& center, float radius, float a_min, float a_max, int num/;"	f	class:ImDrawList	typeref:typename:void
PathArcToFast	interface/imgui_draw.cpp	/^void ImDrawList::PathArcToFast(const ImVec2& center, float radius, int a_min_of_12, int a_max_of/;"	f	class:ImDrawList	typeref:typename:void
PathBezierCurveTo	interface/imgui_draw.cpp	/^void ImDrawList::PathBezierCurveTo(const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, int num/;"	f	class:ImDrawList	typeref:typename:void
PathBezierToCasteljau	interface/imgui_draw.cpp	/^static void PathBezierToCasteljau(ImVector<ImVec2>* path, float x1, float y1, float x2, float y2/;"	f	typeref:typename:void	file:
PathClear	interface/imgui.h	/^    inline    void  PathClear()                                                 { _Path.Size = 0/;"	f	struct:ImDrawList	typeref:typename:void
PathFillConvex	interface/imgui.h	/^    inline    void  PathFillConvex(ImU32 col)                                   { AddConvexPolyF/;"	f	struct:ImDrawList	typeref:typename:void
PathLineTo	interface/imgui.h	/^    inline    void  PathLineTo(const ImVec2& pos)                               { _Path.push_bac/;"	f	struct:ImDrawList	typeref:typename:void
PathLineToMergeDuplicate	interface/imgui.h	/^    inline    void  PathLineToMergeDuplicate(const ImVec2& pos)                 { if (_Path.Size/;"	f	struct:ImDrawList	typeref:typename:void
PathRect	interface/imgui_draw.cpp	/^void ImDrawList::PathRect(const ImVec2& a, const ImVec2& b, float rounding, ImDrawCornerFlags ro/;"	f	class:ImDrawList	typeref:typename:void
PathStroke	interface/imgui.h	/^    inline    void  PathStroke(ImU32 col, bool closed, float thickness = 1.0f)  { AddPolyline(_P/;"	f	struct:ImDrawList	typeref:typename:void
PenPressure	interface/imgui.h	/^    float       PenPressure;                    \/\/ Touch\/Pen pressure (0.0f to 1.0f, should b/;"	m	struct:ImGuiIO	typeref:typename:float
PhysicalDevice	interface/imgui_impl_vulkan.h	/^    VkPhysicalDevice    PhysicalDevice;$/;"	m	struct:ImGui_ImplVulkan_InitInfo	typeref:typename:VkPhysicalDevice
Pipeline	interface/imgui_impl_vulkan.h	/^    VkPipeline          Pipeline;               \/\/ The window pipeline may uses a different Vk/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:VkPipeline
PipelineCache	interface/imgui_impl_vulkan.h	/^    VkPipelineCache     PipelineCache;$/;"	m	struct:ImGui_ImplVulkan_InitInfo	typeref:typename:VkPipelineCache
PixelSnapH	interface/imgui.h	/^    bool            PixelSnapH;             \/\/ false    \/\/ Align every glyph to pixel bounda/;"	m	struct:ImFontConfig	typeref:typename:bool
PlatformImeLastPos	interface/imgui_internal.h	/^    ImVec2                  PlatformImeLastPos;$/;"	m	struct:ImGuiContext	typeref:typename:ImVec2
PlatformImePos	interface/imgui_internal.h	/^    ImVec2                  PlatformImePos;                     \/\/ Cursor position request & l/;"	m	struct:ImGuiContext	typeref:typename:ImVec2
PlatformLocaleDecimalPoint	interface/imgui_internal.h	/^    char                    PlatformLocaleDecimalPoint;         \/\/ '.' or *localeconv()->decim/;"	m	struct:ImGuiContext	typeref:typename:char
PlotEx	interface/imgui_widgets.cpp	/^int ImGui::PlotEx(ImGuiPlotType plot_type, const char* label, float (*values_getter)(void* data,/;"	f	class:ImGui	typeref:typename:int
PlotHistogram	interface/imgui_widgets.cpp	/^void ImGui::PlotHistogram(const char* label, const float* values, int values_count, int values_o/;"	f	class:ImGui	typeref:typename:void
PlotHistogram	interface/imgui_widgets.cpp	/^void ImGui::PlotHistogram(const char* label, float (*values_getter)(void* data, int idx), void* /;"	f	class:ImGui	typeref:typename:void
PlotLines	interface/imgui_widgets.cpp	/^void ImGui::PlotLines(const char* label, const float* values, int values_count, int values_offse/;"	f	class:ImGui	typeref:typename:void
PlotLines	interface/imgui_widgets.cpp	/^void ImGui::PlotLines(const char* label, float (*values_getter)(void* data, int idx), void* data/;"	f	class:ImGui	typeref:typename:void
Plot_ArrayGetter	interface/imgui_widgets.cpp	/^static float Plot_ArrayGetter(void* data, int idx)$/;"	f	typeref:typename:float	file:
PopAllowKeyboardFocus	interface/imgui.cpp	/^void ImGui::PopAllowKeyboardFocus()$/;"	f	class:ImGui	typeref:typename:void
PopButtonRepeat	interface/imgui.cpp	/^void ImGui::PopButtonRepeat()$/;"	f	class:ImGui	typeref:typename:void
PopClipRect	interface/imgui.cpp	/^void ImGui::PopClipRect()$/;"	f	class:ImGui	typeref:typename:void
PopClipRect	interface/imgui_draw.cpp	/^void ImDrawList::PopClipRect()$/;"	f	class:ImDrawList	typeref:typename:void
PopColumnsBackground	interface/imgui_widgets.cpp	/^void ImGui::PopColumnsBackground()$/;"	f	class:ImGui	typeref:typename:void
PopFocusScope	interface/imgui.cpp	/^void ImGui::PopFocusScope()$/;"	f	class:ImGui	typeref:typename:void
PopFont	interface/imgui.cpp	/^void  ImGui::PopFont()$/;"	f	class:ImGui	typeref:typename:void
PopID	interface/imgui.cpp	/^void ImGui::PopID()$/;"	f	class:ImGui	typeref:typename:void
PopItemFlag	interface/imgui.cpp	/^void ImGui::PopItemFlag()$/;"	f	class:ImGui	typeref:typename:void
PopItemWidth	interface/imgui.cpp	/^void ImGui::PopItemWidth()$/;"	f	class:ImGui	typeref:typename:void
PopStyleColor	interface/imgui.cpp	/^void ImGui::PopStyleColor(int count)$/;"	f	class:ImGui	typeref:typename:void
PopStyleVar	interface/imgui.cpp	/^void ImGui::PopStyleVar(int count)$/;"	f	class:ImGui	typeref:typename:void
PopTextWrapPos	interface/imgui.cpp	/^void ImGui::PopTextWrapPos()$/;"	f	class:ImGui	typeref:typename:void
PopTextureID	interface/imgui_draw.cpp	/^void ImDrawList::PopTextureID()$/;"	f	class:ImDrawList	typeref:typename:void
PopupBorderSize	interface/imgui.h	/^    float       PopupBorderSize;            \/\/ Thickness of border around popup\/tooltip windo/;"	m	struct:ImGuiStyle	typeref:typename:float
PopupId	interface/imgui_internal.h	/^    ImGuiID                 PopupId;                            \/\/ ID in the popup stack when /;"	m	struct:ImGuiWindow	typeref:typename:ImGuiID
PopupId	interface/imgui_internal.h	/^    ImGuiID             PopupId;        \/\/ Set on OpenPopup()$/;"	m	struct:ImGuiPopupData	typeref:typename:ImGuiID
PopupRounding	interface/imgui.h	/^    float       PopupRounding;              \/\/ Radius of popup window corners rounding. (Note /;"	m	struct:ImGuiStyle	typeref:typename:float
Pos	interface/imgui.h	/^    ImVec2  Pos;            \/\/ Read-only.   Window position, for reference.$/;"	m	struct:ImGuiSizeCallbackData	typeref:typename:ImVec2
Pos	interface/imgui_internal.h	/^    ImVec2                  Pos;                                \/\/ Position (always rounded-up/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
Pos	interface/imgui_internal.h	/^    ImVec2ih    Pos;$/;"	m	struct:ImGuiWindowSettings	typeref:typename:ImVec2ih
Pos	interface/imgui_internal.h	/^    float       Pos[3], NextWidths[3];$/;"	m	struct:ImGuiMenuColumns	typeref:typename:float[3]
PosCond	interface/imgui_internal.h	/^    ImGuiCond                   PosCond;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImGuiCond
PosPivotVal	interface/imgui_internal.h	/^    ImVec2                      PosPivotVal;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImVec2
PosVal	interface/imgui_internal.h	/^    ImVec2                      PosVal;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImVec2
PresentMode	interface/imgui_impl_vulkan.h	/^    VkPresentModeKHR    PresentMode;$/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:VkPresentModeKHR
PrevFrameVisible	interface/imgui_internal.h	/^    int                 PrevFrameVisible;$/;"	m	struct:ImGuiTabBar	typeref:typename:int
PrevLineSize	interface/imgui_internal.h	/^    ImVec2                  PrevLineSize;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
PrevLineTextBaseOffset	interface/imgui_internal.h	/^    float                   PrevLineTextBaseOffset;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:float
PrevTabsContentsHeight	interface/imgui_internal.h	/^    float               PrevTabsContentsHeight; \/\/ Record the height of contents submitted bel/;"	m	struct:ImGuiTabBar	typeref:typename:float
Preview	interface/imgui.h	/^    bool            Preview;            \/\/ Set when AcceptDragDropPayload() was called and mou/;"	m	struct:ImGuiPayload	typeref:typename:bool
PrimQuadUV	interface/imgui_draw.cpp	/^void ImDrawList::PrimQuadUV(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& d, /;"	f	class:ImDrawList	typeref:typename:void
PrimRect	interface/imgui_draw.cpp	/^void ImDrawList::PrimRect(const ImVec2& a, const ImVec2& c, ImU32 col)$/;"	f	class:ImDrawList	typeref:typename:void
PrimRectUV	interface/imgui_draw.cpp	/^void ImDrawList::PrimRectUV(const ImVec2& a, const ImVec2& c, const ImVec2& uv_a, const ImVec2& /;"	f	class:ImDrawList	typeref:typename:void
PrimReserve	interface/imgui_draw.cpp	/^void ImDrawList::PrimReserve(int idx_count, int vtx_count)$/;"	f	class:ImDrawList	typeref:typename:void
PrimUnreserve	interface/imgui_draw.cpp	/^void ImDrawList::PrimUnreserve(int idx_count, int vtx_count)$/;"	f	class:ImDrawList	typeref:typename:void
PrimVtx	interface/imgui.h	/^    inline    void  PrimVtx(const ImVec2& pos, const ImVec2& uv, ImU32 col)         { PrimWriteI/;"	f	struct:ImDrawList	typeref:typename:void
PrimWriteIdx	interface/imgui.h	/^    inline    void  PrimWriteIdx(ImDrawIdx idx)                                     { *_IdxWrite/;"	f	struct:ImDrawList	typeref:typename:void
PrimWriteVtx	interface/imgui.h	/^    inline    void  PrimWriteVtx(const ImVec2& pos, const ImVec2& uv, ImU32 col)    { _VtxWriteP/;"	f	struct:ImDrawList	typeref:typename:void
PrintFmt	interface/imgui_internal.h	/^    const char* PrintFmt;       \/\/ Default printf format for the type$/;"	m	struct:ImGuiDataTypeInfo	typeref:typename:const char *
ProgressBar	interface/imgui_widgets.cpp	/^void ImGui::ProgressBar(float fraction, const ImVec2& size_arg, const char* overlay)$/;"	f	class:ImGui	typeref:typename:void
Ptr	interface/imgui_internal.h	/^    void*       Ptr;            \/\/ Either field can be set, not both. e.g. Dock node tab bars /;"	m	struct:ImGuiPtrOrIndex	typeref:typename:void *
PushAllowKeyboardFocus	interface/imgui.cpp	/^void ImGui::PushAllowKeyboardFocus(bool allow_keyboard_focus)$/;"	f	class:ImGui	typeref:typename:void
PushButtonRepeat	interface/imgui.cpp	/^void ImGui::PushButtonRepeat(bool repeat)$/;"	f	class:ImGui	typeref:typename:void
PushClipRect	interface/imgui.cpp	/^void ImGui::PushClipRect(const ImVec2& clip_rect_min, const ImVec2& clip_rect_max, bool intersec/;"	f	class:ImGui	typeref:typename:void
PushClipRect	interface/imgui_draw.cpp	/^void ImDrawList::PushClipRect(ImVec2 cr_min, ImVec2 cr_max, bool intersect_with_current_clip_rec/;"	f	class:ImDrawList	typeref:typename:void
PushClipRectFullScreen	interface/imgui_draw.cpp	/^void ImDrawList::PushClipRectFullScreen()$/;"	f	class:ImDrawList	typeref:typename:void
PushColumnClipRect	interface/imgui_widgets.cpp	/^void ImGui::PushColumnClipRect(int column_index)$/;"	f	class:ImGui	typeref:typename:void
PushColumnsBackground	interface/imgui_widgets.cpp	/^void ImGui::PushColumnsBackground()$/;"	f	class:ImGui	typeref:typename:void
PushFocusScope	interface/imgui.cpp	/^void ImGui::PushFocusScope(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
PushFont	interface/imgui.cpp	/^void ImGui::PushFont(ImFont* font)$/;"	f	class:ImGui	typeref:typename:void
PushID	interface/imgui.cpp	/^void ImGui::PushID(const char* str_id)$/;"	f	class:ImGui	typeref:typename:void
PushID	interface/imgui.cpp	/^void ImGui::PushID(const char* str_id_begin, const char* str_id_end)$/;"	f	class:ImGui	typeref:typename:void
PushID	interface/imgui.cpp	/^void ImGui::PushID(const void* ptr_id)$/;"	f	class:ImGui	typeref:typename:void
PushID	interface/imgui.cpp	/^void ImGui::PushID(int int_id)$/;"	f	class:ImGui	typeref:typename:void
PushItemFlag	interface/imgui.cpp	/^void ImGui::PushItemFlag(ImGuiItemFlags option, bool enabled)$/;"	f	class:ImGui	typeref:typename:void
PushItemWidth	interface/imgui.cpp	/^void ImGui::PushItemWidth(float item_width)$/;"	f	class:ImGui	typeref:typename:void
PushMultiItemsWidths	interface/imgui.cpp	/^void ImGui::PushMultiItemsWidths(int components, float w_full)$/;"	f	class:ImGui	typeref:typename:void
PushOverrideID	interface/imgui.cpp	/^void ImGui::PushOverrideID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
PushStyleColor	interface/imgui.cpp	/^void ImGui::PushStyleColor(ImGuiCol idx, ImU32 col)$/;"	f	class:ImGui	typeref:typename:void
PushStyleColor	interface/imgui.cpp	/^void ImGui::PushStyleColor(ImGuiCol idx, const ImVec4& col)$/;"	f	class:ImGui	typeref:typename:void
PushStyleVar	interface/imgui.cpp	/^void ImGui::PushStyleVar(ImGuiStyleVar idx, const ImVec2& val)$/;"	f	class:ImGui	typeref:typename:void
PushStyleVar	interface/imgui.cpp	/^void ImGui::PushStyleVar(ImGuiStyleVar idx, float val)$/;"	f	class:ImGui	typeref:typename:void
PushTextWrapPos	interface/imgui.cpp	/^void ImGui::PushTextWrapPos(float wrap_pos_x)$/;"	f	class:ImGui	typeref:typename:void
PushTextureID	interface/imgui_draw.cpp	/^void ImDrawList::PushTextureID(ImTextureID texture_id)$/;"	f	class:ImDrawList	typeref:typename:void
Queue	interface/imgui_impl_vulkan.h	/^    VkQueue             Queue;$/;"	m	struct:ImGui_ImplVulkan_InitInfo	typeref:typename:VkQueue
QueueFamily	interface/imgui_impl_vulkan.h	/^    uint32_t            QueueFamily;$/;"	m	struct:ImGui_ImplVulkan_InitInfo	typeref:typename:uint32_t
RESET	arm.hpp	/^            RESET,$/;"	e	enum:Cpu::Interrupt
RadioButton	interface/imgui_widgets.cpp	/^bool ImGui::RadioButton(const char* label, bool active)$/;"	f	class:ImGui	typeref:typename:bool
RadioButton	interface/imgui_widgets.cpp	/^bool ImGui::RadioButton(const char* label, int* v, int v_button)$/;"	f	class:ImGui	typeref:typename:bool
RasterizerFlags	interface/imgui.h	/^    unsigned int    RasterizerFlags;        \/\/ 0x00     \/\/ Settings for custom font rasteriz/;"	m	struct:ImFontConfig	typeref:typename:unsigned int
RasterizerMultiply	interface/imgui.h	/^    float           RasterizerMultiply;     \/\/ 1.0f     \/\/ Brighten (>1.0f) or darken (<1.0f/;"	m	struct:ImFontConfig	typeref:typename:float
ReadInitFn	interface/imgui_internal.h	/^    void        (*ReadInitFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler);                /;"	m	struct:ImGuiSettingsHandler	typeref:typename:void (*)(ImGuiContext * ctx,ImGuiSettingsHandler * handler)
ReadLineFn	interface/imgui_internal.h	/^    void        (*ReadLineFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler, void* entry, con/;"	m	struct:ImGuiSettingsHandler	typeref:typename:void (*)(ImGuiContext * ctx,ImGuiSettingsHandler * handler,void * entry,const char * line)
ReadOpenFn	interface/imgui_internal.h	/^    void*       (*ReadOpenFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler, const char* name/;"	m	struct:ImGuiSettingsHandler	typeref:typename:void * (*)(ImGuiContext * ctx,ImGuiSettingsHandler * handler,const char * name)
Rect	interface/imgui_internal.h	/^    ImRect      Rect() const            { return ImRect(Pos.x, Pos.y, Pos.x + Size.x, Pos.y + Si/;"	f	struct:ImGuiWindow	typeref:typename:ImRect
RectRel	interface/imgui_internal.h	/^    ImRect          RectRel;            \/\/ Best candidate bounding box in window relative spac/;"	m	struct:ImGuiNavMoveResult	typeref:typename:ImRect
Rects	interface/imgui_draw.cpp	/^    stbrp_rect*         Rects;              \/\/ Rectangle to pack. We first fill in their size /;"	m	struct:ImFontBuildSrcData	typeref:typename:stbrp_rect *	file:
RefFrame	interface/imgui.h	/^    mutable int RefFrame;$/;"	m	struct:ImGuiOnceUponAFrame	typeref:typename:int
Register	arm.hpp	/^        enum Register : u8 {$/;"	g	class:Cpu	typeref:typename:u8
Remove	interface/imgui_internal.h	/^    void        Remove(ImGuiID key, ImPoolIdx idx)  { Buf[idx].~T(); *(int*)&Buf[idx] = FreeIdx;/;"	f	struct:ImPool	typeref:typename:void
Remove	interface/imgui_internal.h	/^    void        Remove(ImGuiID key, const T* p)     { Remove(key, GetIndex(p)); }$/;"	f	struct:ImPool	typeref:typename:void
Render	interface/imgui.cpp	/^void ImGui::Render()$/;"	f	class:ImGui	typeref:typename:void
RenderArrow	interface/imgui_draw.cpp	/^void ImGui::RenderArrow(ImDrawList* draw_list, ImVec2 pos, ImU32 col, ImGuiDir dir, float scale)$/;"	f	class:ImGui	typeref:typename:void
RenderArrow	interface/imgui_internal.h	/^    inline void RenderArrow(ImVec2 pos, ImGuiDir dir, float scale=1.0f) { ImGuiWindow* window = /;"	f	namespace:ImGui	typeref:typename:void
RenderArrowPointingAt	interface/imgui_draw.cpp	/^void ImGui::RenderArrowPointingAt(ImDrawList* draw_list, ImVec2 pos, ImVec2 half_sz, ImGuiDir di/;"	f	class:ImGui	typeref:typename:void
RenderArrowsForVerticalBar	interface/imgui_widgets.cpp	/^static void RenderArrowsForVerticalBar(ImDrawList* draw_list, ImVec2 pos, ImVec2 half_sz, float /;"	f	typeref:typename:void	file:
RenderBullet	interface/imgui_draw.cpp	/^void ImGui::RenderBullet(ImDrawList* draw_list, ImVec2 pos, ImU32 col)$/;"	f	class:ImGui	typeref:typename:void
RenderBullet	interface/imgui_internal.h	/^    inline void RenderBullet(ImVec2 pos)                                { ImGuiWindow* window = /;"	f	namespace:ImGui	typeref:typename:void
RenderChar	interface/imgui_draw.cpp	/^void ImFont::RenderChar(ImDrawList* draw_list, float size, ImVec2 pos, ImU32 col, ImWchar c) con/;"	f	class:ImFont	typeref:typename:void
RenderCheckMark	interface/imgui_draw.cpp	/^void ImGui::RenderCheckMark(ImDrawList* draw_list, ImVec2 pos, ImU32 col, float sz)$/;"	f	class:ImGui	typeref:typename:void
RenderColorRectWithAlphaCheckerboard	interface/imgui_draw.cpp	/^void ImGui::RenderColorRectWithAlphaCheckerboard(ImDrawList* draw_list, ImVec2 p_min, ImVec2 p_m/;"	f	class:ImGui	typeref:typename:void
RenderCompleteSemaphore	interface/imgui_impl_vulkan.h	/^    VkSemaphore         RenderCompleteSemaphore;$/;"	m	struct:ImGui_ImplVulkanH_FrameSemaphores	typeref:typename:VkSemaphore
RenderFrame	interface/imgui.cpp	/^void ImGui::RenderFrame(ImVec2 p_min, ImVec2 p_max, ImU32 fill_col, bool border, float rounding)$/;"	f	class:ImGui	typeref:typename:void
RenderFrameBorder	interface/imgui.cpp	/^void ImGui::RenderFrameBorder(ImVec2 p_min, ImVec2 p_max, float rounding)$/;"	f	class:ImGui	typeref:typename:void
RenderMouseCursor	interface/imgui_draw.cpp	/^void ImGui::RenderMouseCursor(ImDrawList* draw_list, ImVec2 pos, float scale, ImGuiMouseCursor m/;"	f	class:ImGui	typeref:typename:void
RenderNavHighlight	interface/imgui.cpp	/^void ImGui::RenderNavHighlight(const ImRect& bb, ImGuiID id, ImGuiNavHighlightFlags flags)$/;"	f	class:ImGui	typeref:typename:void
RenderPass	interface/imgui_impl_vulkan.h	/^    VkRenderPass        RenderPass;$/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:VkRenderPass
RenderRectFilledRangeH	interface/imgui_draw.cpp	/^void ImGui::RenderRectFilledRangeH(ImDrawList* draw_list, const ImRect& rect, ImU32 col, float x/;"	f	class:ImGui	typeref:typename:void
RenderRectFilledWithHole	interface/imgui_draw.cpp	/^void ImGui::RenderRectFilledWithHole(ImDrawList* draw_list, ImRect outer, ImRect inner, ImU32 co/;"	f	class:ImGui	typeref:typename:void
RenderText	interface/imgui.cpp	/^void ImGui::RenderText(ImVec2 pos, const char* text, const char* text_end, bool hide_text_after_/;"	f	class:ImGui	typeref:typename:void
RenderText	interface/imgui_draw.cpp	/^void ImFont::RenderText(ImDrawList* draw_list, float size, ImVec2 pos, ImU32 col, const ImVec4& /;"	f	class:ImFont	typeref:typename:void
RenderTextClipped	interface/imgui.cpp	/^void ImGui::RenderTextClipped(const ImVec2& pos_min, const ImVec2& pos_max, const char* text, co/;"	f	class:ImGui	typeref:typename:void
RenderTextClippedEx	interface/imgui.cpp	/^void ImGui::RenderTextClippedEx(ImDrawList* draw_list, const ImVec2& pos_min, const ImVec2& pos_/;"	f	class:ImGui	typeref:typename:void
RenderTextEllipsis	interface/imgui.cpp	/^void ImGui::RenderTextEllipsis(ImDrawList* draw_list, const ImVec2& pos_min, const ImVec2& pos_m/;"	f	class:ImGui	typeref:typename:void
RenderTextWrapped	interface/imgui.cpp	/^void ImGui::RenderTextWrapped(ImVec2 pos, const char* text, const char* text_end, float wrap_wid/;"	f	class:ImGui	typeref:typename:void
RenderWindowDecorations	interface/imgui.cpp	/^void ImGui::RenderWindowDecorations(ImGuiWindow* window, const ImRect& title_bar_rect, bool titl/;"	f	class:ImGui	typeref:typename:void
RenderWindowOuterBorders	interface/imgui.cpp	/^static void ImGui::RenderWindowOuterBorders(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void	file:
RenderWindowTitleBarContents	interface/imgui.cpp	/^void ImGui::RenderWindowTitleBarContents(ImGuiWindow* window, const ImRect& title_bar_rect, cons/;"	f	class:ImGui	typeref:typename:void
ReorderRequestDir	interface/imgui_internal.h	/^    ImS8                ReorderRequestDir;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImS8
ReorderRequestTabId	interface/imgui_internal.h	/^    ImGuiID             ReorderRequestTabId;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiID
Reserve	interface/imgui_internal.h	/^    void        Reserve(int capacity)               { Buf.reserve(capacity); Map.Data.reserve(ca/;"	f	struct:ImPool	typeref:typename:void
ResetMouseDragDelta	interface/imgui.cpp	/^void ImGui::ResetMouseDragDelta(ImGuiMouseButton button)$/;"	f	class:ImGui	typeref:typename:void
ResizeBorderHeld	interface/imgui_internal.h	/^    signed char             ResizeBorderHeld;                   \/\/ Current border being held f/;"	m	struct:ImGuiWindow	typeref:typename:signed char
Restore	interface/imgui_internal.h	/^    void Restore() const    { ImGuiWindow* window = GImGui->CurrentWindow; window->DC.LastItemId/;"	f	struct:ImGuiLastItemDataBackup	typeref:typename:void
RootWindow	interface/imgui_internal.h	/^    ImGuiWindow*            RootWindow;                         \/\/ Point to ourself or first a/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindow *
RootWindowForNav	interface/imgui_internal.h	/^    ImGuiWindow*            RootWindowForNav;                   \/\/ Point to ourself or first a/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindow *
RootWindowForTitleBarHighlight	interface/imgui_internal.h	/^    ImGuiWindow*            RootWindowForTitleBarHighlight;     \/\/ Point to ourself or first a/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindow *
SDL_Event	interface/imgui_impl_sdl.h	/^typedef union SDL_Event SDL_Event;$/;"	t	typeref:union:SDL_Event
SDL_HAS_CAPTURE_AND_GLOBAL_MOUSE	interface/imgui_impl_sdl.cpp	/^#define SDL_HAS_CAPTURE_AND_GLOBAL_MOUSE /;"	d	file:
SDL_HAS_VULKAN	interface/imgui_impl_sdl.cpp	/^#define SDL_HAS_VULKAN /;"	d	file:
SOFTWARE_INTERRUPT	arm.hpp	/^            SOFTWARE_INTERRUPT,$/;"	e	enum:Cpu::Interrupt
SP	arm.hpp	/^            SP = 13,$/;"	e	enum:Cpu::Register
SPSR	arm.hpp	/^            SPSR,$/;"	e	enum:Cpu::Register
STBRP_ASSERT	interface/imgui_draw.cpp	/^#define STBRP_ASSERT(/;"	d	file:
STBRP_ASSERT	interface/imstb_rectpack.h	/^#define STBRP_ASSERT /;"	d
STBRP_DEF	interface/imstb_rectpack.h	/^#define STBRP_DEF /;"	d
STBRP_HEURISTIC_Skyline_BF_sortHeight	interface/imstb_rectpack.h	/^   STBRP_HEURISTIC_Skyline_BF_sortHeight$/;"	e	enum:__anonba8239e60103
STBRP_HEURISTIC_Skyline_BL_sortHeight	interface/imstb_rectpack.h	/^   STBRP_HEURISTIC_Skyline_BL_sortHeight = STBRP_HEURISTIC_Skyline_default,$/;"	e	enum:__anonba8239e60103
STBRP_HEURISTIC_Skyline_default	interface/imstb_rectpack.h	/^   STBRP_HEURISTIC_Skyline_default=0,$/;"	e	enum:__anonba8239e60103
STBRP_SORT	interface/imgui_draw.cpp	/^#define STBRP_SORT /;"	d	file:
STBRP_SORT	interface/imstb_rectpack.h	/^#define STBRP_SORT /;"	d
STBRP_STATIC	interface/imgui_draw.cpp	/^#define STBRP_STATIC$/;"	d	file:
STBRP__CDECL	interface/imstb_rectpack.h	/^#define STBRP__CDECL /;"	d
STBRP__CDECL	interface/imstb_rectpack.h	/^#define STBRP__CDECL$/;"	d
STBRP__INIT_skyline	interface/imstb_rectpack.h	/^   STBRP__INIT_skyline = 1$/;"	e	enum:__anonba8239e60203
STBRP__MAXVAL	interface/imstb_rectpack.h	/^#define STBRP__MAXVAL /;"	d
STBRP__NOTUSED	interface/imstb_rectpack.h	/^#define STBRP__NOTUSED(/;"	d
STBTT_DEF	interface/imstb_truetype.h	/^#define STBTT_DEF /;"	d
STBTT_FIX	interface/imstb_truetype.h	/^#define STBTT_FIX /;"	d
STBTT_FIXMASK	interface/imstb_truetype.h	/^#define STBTT_FIXMASK /;"	d
STBTT_FIXSHIFT	interface/imstb_truetype.h	/^#define STBTT_FIXSHIFT /;"	d
STBTT_GPOS_TODO_assert	interface/imstb_truetype.h	/^#define STBTT_GPOS_TODO_assert(/;"	d
STBTT_MACSTYLE_BOLD	interface/imstb_truetype.h	/^#define STBTT_MACSTYLE_BOLD /;"	d
STBTT_MACSTYLE_DONTCARE	interface/imstb_truetype.h	/^#define STBTT_MACSTYLE_DONTCARE /;"	d
STBTT_MACSTYLE_ITALIC	interface/imstb_truetype.h	/^#define STBTT_MACSTYLE_ITALIC /;"	d
STBTT_MACSTYLE_NONE	interface/imstb_truetype.h	/^#define STBTT_MACSTYLE_NONE /;"	d
STBTT_MACSTYLE_UNDERSCORE	interface/imstb_truetype.h	/^#define STBTT_MACSTYLE_UNDERSCORE /;"	d
STBTT_MAC_EID_ARABIC	interface/imstb_truetype.h	/^   STBTT_MAC_EID_ROMAN        =0,   STBTT_MAC_EID_ARABIC       =4,$/;"	e	enum:__anond1ee77bb0c03
STBTT_MAC_EID_CHINESE_TRAD	interface/imstb_truetype.h	/^   STBTT_MAC_EID_CHINESE_TRAD =2,   STBTT_MAC_EID_GREEK        =6,$/;"	e	enum:__anond1ee77bb0c03
STBTT_MAC_EID_GREEK	interface/imstb_truetype.h	/^   STBTT_MAC_EID_CHINESE_TRAD =2,   STBTT_MAC_EID_GREEK        =6,$/;"	e	enum:__anond1ee77bb0c03
STBTT_MAC_EID_HEBREW	interface/imstb_truetype.h	/^   STBTT_MAC_EID_JAPANESE     =1,   STBTT_MAC_EID_HEBREW       =5,$/;"	e	enum:__anond1ee77bb0c03
STBTT_MAC_EID_JAPANESE	interface/imstb_truetype.h	/^   STBTT_MAC_EID_JAPANESE     =1,   STBTT_MAC_EID_HEBREW       =5,$/;"	e	enum:__anond1ee77bb0c03
STBTT_MAC_EID_KOREAN	interface/imstb_truetype.h	/^   STBTT_MAC_EID_KOREAN       =3,   STBTT_MAC_EID_RUSSIAN      =7$/;"	e	enum:__anond1ee77bb0c03
STBTT_MAC_EID_ROMAN	interface/imstb_truetype.h	/^   STBTT_MAC_EID_ROMAN        =0,   STBTT_MAC_EID_ARABIC       =4,$/;"	e	enum:__anond1ee77bb0c03
STBTT_MAC_EID_RUSSIAN	interface/imstb_truetype.h	/^   STBTT_MAC_EID_KOREAN       =3,   STBTT_MAC_EID_RUSSIAN      =7$/;"	e	enum:__anond1ee77bb0c03
STBTT_MAC_LANG_ARABIC	interface/imstb_truetype.h	/^   STBTT_MAC_LANG_ARABIC       =12,   STBTT_MAC_LANG_KOREAN       =23,$/;"	e	enum:__anond1ee77bb0e03
STBTT_MAC_LANG_CHINESE_SIMPLIFIED	interface/imstb_truetype.h	/^   STBTT_MAC_LANG_HEBREW       =10,   STBTT_MAC_LANG_CHINESE_SIMPLIFIED =33,$/;"	e	enum:__anond1ee77bb0e03
STBTT_MAC_LANG_CHINESE_TRAD	interface/imstb_truetype.h	/^   STBTT_MAC_LANG_ITALIAN      =3 ,   STBTT_MAC_LANG_CHINESE_TRAD =19$/;"	e	enum:__anond1ee77bb0e03
STBTT_MAC_LANG_DUTCH	interface/imstb_truetype.h	/^   STBTT_MAC_LANG_DUTCH        =4 ,   STBTT_MAC_LANG_RUSSIAN      =32,$/;"	e	enum:__anond1ee77bb0e03
STBTT_MAC_LANG_ENGLISH	interface/imstb_truetype.h	/^   STBTT_MAC_LANG_ENGLISH      =0 ,   STBTT_MAC_LANG_JAPANESE     =11,$/;"	e	enum:__anond1ee77bb0e03
STBTT_MAC_LANG_FRENCH	interface/imstb_truetype.h	/^   STBTT_MAC_LANG_FRENCH       =1 ,   STBTT_MAC_LANG_SPANISH      =6 ,$/;"	e	enum:__anond1ee77bb0e03
STBTT_MAC_LANG_GERMAN	interface/imstb_truetype.h	/^   STBTT_MAC_LANG_GERMAN       =2 ,   STBTT_MAC_LANG_SWEDISH      =5 ,$/;"	e	enum:__anond1ee77bb0e03
STBTT_MAC_LANG_HEBREW	interface/imstb_truetype.h	/^   STBTT_MAC_LANG_HEBREW       =10,   STBTT_MAC_LANG_CHINESE_SIMPLIFIED =33,$/;"	e	enum:__anond1ee77bb0e03
STBTT_MAC_LANG_ITALIAN	interface/imstb_truetype.h	/^   STBTT_MAC_LANG_ITALIAN      =3 ,   STBTT_MAC_LANG_CHINESE_TRAD =19$/;"	e	enum:__anond1ee77bb0e03
STBTT_MAC_LANG_JAPANESE	interface/imstb_truetype.h	/^   STBTT_MAC_LANG_ENGLISH      =0 ,   STBTT_MAC_LANG_JAPANESE     =11,$/;"	e	enum:__anond1ee77bb0e03
STBTT_MAC_LANG_KOREAN	interface/imstb_truetype.h	/^   STBTT_MAC_LANG_ARABIC       =12,   STBTT_MAC_LANG_KOREAN       =23,$/;"	e	enum:__anond1ee77bb0e03
STBTT_MAC_LANG_RUSSIAN	interface/imstb_truetype.h	/^   STBTT_MAC_LANG_DUTCH        =4 ,   STBTT_MAC_LANG_RUSSIAN      =32,$/;"	e	enum:__anond1ee77bb0e03
STBTT_MAC_LANG_SPANISH	interface/imstb_truetype.h	/^   STBTT_MAC_LANG_FRENCH       =1 ,   STBTT_MAC_LANG_SPANISH      =6 ,$/;"	e	enum:__anond1ee77bb0e03
STBTT_MAC_LANG_SWEDISH	interface/imstb_truetype.h	/^   STBTT_MAC_LANG_GERMAN       =2 ,   STBTT_MAC_LANG_SWEDISH      =5 ,$/;"	e	enum:__anond1ee77bb0e03
STBTT_MAX_OVERSAMPLE	interface/imstb_truetype.h	/^#define STBTT_MAX_OVERSAMPLE /;"	d
STBTT_MS_EID_SHIFTJIS	interface/imstb_truetype.h	/^   STBTT_MS_EID_SHIFTJIS      =2,$/;"	e	enum:__anond1ee77bb0b03
STBTT_MS_EID_SYMBOL	interface/imstb_truetype.h	/^   STBTT_MS_EID_SYMBOL        =0,$/;"	e	enum:__anond1ee77bb0b03
STBTT_MS_EID_UNICODE_BMP	interface/imstb_truetype.h	/^   STBTT_MS_EID_UNICODE_BMP   =1,$/;"	e	enum:__anond1ee77bb0b03
STBTT_MS_EID_UNICODE_FULL	interface/imstb_truetype.h	/^   STBTT_MS_EID_UNICODE_FULL  =10$/;"	e	enum:__anond1ee77bb0b03
STBTT_MS_LANG_CHINESE	interface/imstb_truetype.h	/^   STBTT_MS_LANG_CHINESE     =0x0804,   STBTT_MS_LANG_JAPANESE    =0x0411,$/;"	e	enum:__anond1ee77bb0d03
STBTT_MS_LANG_DUTCH	interface/imstb_truetype.h	/^   STBTT_MS_LANG_DUTCH       =0x0413,   STBTT_MS_LANG_KOREAN      =0x0412,$/;"	e	enum:__anond1ee77bb0d03
STBTT_MS_LANG_ENGLISH	interface/imstb_truetype.h	/^   STBTT_MS_LANG_ENGLISH     =0x0409,   STBTT_MS_LANG_ITALIAN     =0x0410,$/;"	e	enum:__anond1ee77bb0d03
STBTT_MS_LANG_FRENCH	interface/imstb_truetype.h	/^   STBTT_MS_LANG_FRENCH      =0x040c,   STBTT_MS_LANG_RUSSIAN     =0x0419,$/;"	e	enum:__anond1ee77bb0d03
STBTT_MS_LANG_GERMAN	interface/imstb_truetype.h	/^   STBTT_MS_LANG_GERMAN      =0x0407,   STBTT_MS_LANG_SPANISH     =0x0409,$/;"	e	enum:__anond1ee77bb0d03
STBTT_MS_LANG_HEBREW	interface/imstb_truetype.h	/^   STBTT_MS_LANG_HEBREW      =0x040d,   STBTT_MS_LANG_SWEDISH     =0x041D$/;"	e	enum:__anond1ee77bb0d03
STBTT_MS_LANG_ITALIAN	interface/imstb_truetype.h	/^   STBTT_MS_LANG_ENGLISH     =0x0409,   STBTT_MS_LANG_ITALIAN     =0x0410,$/;"	e	enum:__anond1ee77bb0d03
STBTT_MS_LANG_JAPANESE	interface/imstb_truetype.h	/^   STBTT_MS_LANG_CHINESE     =0x0804,   STBTT_MS_LANG_JAPANESE    =0x0411,$/;"	e	enum:__anond1ee77bb0d03
STBTT_MS_LANG_KOREAN	interface/imstb_truetype.h	/^   STBTT_MS_LANG_DUTCH       =0x0413,   STBTT_MS_LANG_KOREAN      =0x0412,$/;"	e	enum:__anond1ee77bb0d03
STBTT_MS_LANG_RUSSIAN	interface/imstb_truetype.h	/^   STBTT_MS_LANG_FRENCH      =0x040c,   STBTT_MS_LANG_RUSSIAN     =0x0419,$/;"	e	enum:__anond1ee77bb0d03
STBTT_MS_LANG_SPANISH	interface/imstb_truetype.h	/^   STBTT_MS_LANG_GERMAN      =0x0407,   STBTT_MS_LANG_SPANISH     =0x0409,$/;"	e	enum:__anond1ee77bb0d03
STBTT_MS_LANG_SWEDISH	interface/imstb_truetype.h	/^   STBTT_MS_LANG_HEBREW      =0x040d,   STBTT_MS_LANG_SWEDISH     =0x041D$/;"	e	enum:__anond1ee77bb0d03
STBTT_PLATFORM_ID_ISO	interface/imstb_truetype.h	/^   STBTT_PLATFORM_ID_ISO       =2,$/;"	e	enum:__anond1ee77bb0903
STBTT_PLATFORM_ID_MAC	interface/imstb_truetype.h	/^   STBTT_PLATFORM_ID_MAC       =1,$/;"	e	enum:__anond1ee77bb0903
STBTT_PLATFORM_ID_MICROSOFT	interface/imstb_truetype.h	/^   STBTT_PLATFORM_ID_MICROSOFT =3$/;"	e	enum:__anond1ee77bb0903
STBTT_PLATFORM_ID_UNICODE	interface/imstb_truetype.h	/^   STBTT_PLATFORM_ID_UNICODE   =0,$/;"	e	enum:__anond1ee77bb0903
STBTT_POINT_SIZE	interface/imstb_truetype.h	/^#define STBTT_POINT_SIZE(/;"	d
STBTT_RASTERIZER_VERSION	interface/imstb_truetype.h	/^#define STBTT_RASTERIZER_VERSION /;"	d
STBTT_STATIC	interface/imgui_draw.cpp	/^#define STBTT_STATIC$/;"	d	file:
STBTT_UNICODE_EID_ISO_10646	interface/imstb_truetype.h	/^   STBTT_UNICODE_EID_ISO_10646      =2,$/;"	e	enum:__anond1ee77bb0a03
STBTT_UNICODE_EID_UNICODE_1_0	interface/imstb_truetype.h	/^   STBTT_UNICODE_EID_UNICODE_1_0    =0,$/;"	e	enum:__anond1ee77bb0a03
STBTT_UNICODE_EID_UNICODE_1_1	interface/imstb_truetype.h	/^   STBTT_UNICODE_EID_UNICODE_1_1    =1,$/;"	e	enum:__anond1ee77bb0a03
STBTT_UNICODE_EID_UNICODE_2_0_BMP	interface/imstb_truetype.h	/^   STBTT_UNICODE_EID_UNICODE_2_0_BMP=3,$/;"	e	enum:__anond1ee77bb0a03
STBTT_UNICODE_EID_UNICODE_2_0_FULL	interface/imstb_truetype.h	/^   STBTT_UNICODE_EID_UNICODE_2_0_FULL=4$/;"	e	enum:__anond1ee77bb0a03
STBTT__COMPARE	interface/imstb_truetype.h	/^#define STBTT__COMPARE(/;"	d
STBTT__CSCTX_INIT	interface/imstb_truetype.h	/^#define STBTT__CSCTX_INIT(/;"	d
STBTT__CSERR	interface/imstb_truetype.h	/^#define STBTT__CSERR(/;"	d
STBTT__NOTUSED	interface/imstb_truetype.h	/^#define STBTT__NOTUSED(/;"	d
STBTT__OVER_MASK	interface/imstb_truetype.h	/^#define STBTT__OVER_MASK /;"	d
STBTT_acos	interface/imstb_truetype.h	/^   #define STBTT_acos(/;"	d
STBTT_assert	interface/imgui_draw.cpp	/^#define STBTT_assert(/;"	d	file:
STBTT_assert	interface/imstb_truetype.h	/^   #define STBTT_assert(/;"	d
STBTT_cos	interface/imstb_truetype.h	/^   #define STBTT_cos(/;"	d
STBTT_fabs	interface/imgui_draw.cpp	/^#define STBTT_fabs(/;"	d	file:
STBTT_fabs	interface/imstb_truetype.h	/^   #define STBTT_fabs(/;"	d
STBTT_fmod	interface/imgui_draw.cpp	/^#define STBTT_fmod(/;"	d	file:
STBTT_fmod	interface/imstb_truetype.h	/^   #define STBTT_fmod(/;"	d
STBTT_free	interface/imgui_draw.cpp	/^#define STBTT_free(/;"	d	file:
STBTT_free	interface/imstb_truetype.h	/^   #define STBTT_free(/;"	d
STBTT_iceil	interface/imgui_draw.cpp	/^#define STBTT_iceil(/;"	d	file:
STBTT_iceil	interface/imstb_truetype.h	/^   #define STBTT_iceil(/;"	d
STBTT_ifloor	interface/imgui_draw.cpp	/^#define STBTT_ifloor(/;"	d	file:
STBTT_ifloor	interface/imstb_truetype.h	/^   #define STBTT_ifloor(/;"	d
STBTT_malloc	interface/imgui_draw.cpp	/^#define STBTT_malloc(/;"	d	file:
STBTT_malloc	interface/imstb_truetype.h	/^   #define STBTT_malloc(/;"	d
STBTT_max	interface/imstb_truetype.h	/^#define STBTT_max(/;"	d
STBTT_memcpy	interface/imstb_truetype.h	/^   #define STBTT_memcpy /;"	d
STBTT_memset	interface/imstb_truetype.h	/^   #define STBTT_memset /;"	d
STBTT_min	interface/imstb_truetype.h	/^#define STBTT_min(/;"	d
STBTT_pow	interface/imgui_draw.cpp	/^#define STBTT_pow(/;"	d	file:
STBTT_pow	interface/imstb_truetype.h	/^   #define STBTT_pow(/;"	d
STBTT_sqrt	interface/imgui_draw.cpp	/^#define STBTT_sqrt(/;"	d	file:
STBTT_sqrt	interface/imstb_truetype.h	/^   #define STBTT_sqrt(/;"	d
STBTT_strlen	interface/imstb_truetype.h	/^   #define STBTT_strlen(/;"	d
STBTT_vcubic	interface/imstb_truetype.h	/^      STBTT_vcubic$/;"	e	enum:__anond1ee77bb0603
STBTT_vcurve	interface/imstb_truetype.h	/^      STBTT_vcurve,$/;"	e	enum:__anond1ee77bb0603
STBTT_vline	interface/imstb_truetype.h	/^      STBTT_vline,$/;"	e	enum:__anond1ee77bb0603
STBTT_vmove	interface/imstb_truetype.h	/^      STBTT_vmove=1,$/;"	e	enum:__anond1ee77bb0603
STB_INCLUDE_STB_RECT_PACK_H	interface/imstb_rectpack.h	/^#define STB_INCLUDE_STB_RECT_PACK_H$/;"	d
STB_RECT_PACK_IMPLEMENTATION	interface/imgui_draw.cpp	/^#define STB_RECT_PACK_IMPLEMENTATION$/;"	d	file:
STB_RECT_PACK_VERSION	interface/imstb_rectpack.h	/^#define STB_RECT_PACK_VERSION /;"	d
STB_SPRINTF_IMPLEMENTATION	interface/imgui.cpp	/^#define STB_SPRINTF_IMPLEMENTATION$/;"	d	file:
STB_TEXTEDIT_CHARTYPE	interface/imgui_internal.h	/^#define STB_TEXTEDIT_CHARTYPE /;"	d
STB_TEXTEDIT_CHARTYPE	interface/imstb_textedit.h	/^#define STB_TEXTEDIT_CHARTYPE /;"	d
STB_TEXTEDIT_DELETECHARS	interface/imgui_widgets.cpp	/^static void STB_TEXTEDIT_DELETECHARS(STB_TEXTEDIT_STRING* obj, int pos, int n)$/;"	f	namespace:ImStb	typeref:typename:void	file:
STB_TEXTEDIT_GETCHAR	interface/imgui_widgets.cpp	/^static ImWchar STB_TEXTEDIT_GETCHAR(const STB_TEXTEDIT_STRING* obj, int idx)                    /;"	f	namespace:ImStb	typeref:typename:ImWchar	file:
STB_TEXTEDIT_GETWIDTH	interface/imgui_widgets.cpp	/^static float   STB_TEXTEDIT_GETWIDTH(STB_TEXTEDIT_STRING* obj, int line_start_idx, int char_idx)/;"	f	namespace:ImStb	typeref:typename:float	file:
STB_TEXTEDIT_GETWIDTH_NEWLINE	interface/imgui_internal.h	/^#define STB_TEXTEDIT_GETWIDTH_NEWLINE /;"	d
STB_TEXTEDIT_IMPLEMENTATION	interface/imgui_widgets.cpp	/^#define STB_TEXTEDIT_IMPLEMENTATION$/;"	d	file:
STB_TEXTEDIT_INSERTCHARS	interface/imgui_widgets.cpp	/^static bool STB_TEXTEDIT_INSERTCHARS(STB_TEXTEDIT_STRING* obj, int pos, const ImWchar* new_text,/;"	f	namespace:ImStb	typeref:typename:bool	file:
STB_TEXTEDIT_KEYTOTEXT	interface/imgui_widgets.cpp	/^static int     STB_TEXTEDIT_KEYTOTEXT(int key)                                                  /;"	f	namespace:ImStb	typeref:typename:int	file:
STB_TEXTEDIT_KEYTYPE	interface/imstb_textedit.h	/^#define STB_TEXTEDIT_KEYTYPE /;"	d
STB_TEXTEDIT_K_BACKSPACE	interface/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_BACKSPACE /;"	d	file:
STB_TEXTEDIT_K_DELETE	interface/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_DELETE /;"	d	file:
STB_TEXTEDIT_K_DOWN	interface/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_DOWN /;"	d	file:
STB_TEXTEDIT_K_LEFT	interface/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_LEFT /;"	d	file:
STB_TEXTEDIT_K_LINEEND	interface/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_LINEEND /;"	d	file:
STB_TEXTEDIT_K_LINESTART	interface/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_LINESTART /;"	d	file:
STB_TEXTEDIT_K_PGDOWN	interface/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_PGDOWN /;"	d	file:
STB_TEXTEDIT_K_PGUP	interface/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_PGUP /;"	d	file:
STB_TEXTEDIT_K_REDO	interface/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_REDO /;"	d	file:
STB_TEXTEDIT_K_RIGHT	interface/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_RIGHT /;"	d	file:
STB_TEXTEDIT_K_SHIFT	interface/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_SHIFT /;"	d	file:
STB_TEXTEDIT_K_TEXTEND	interface/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_TEXTEND /;"	d	file:
STB_TEXTEDIT_K_TEXTSTART	interface/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_TEXTSTART /;"	d	file:
STB_TEXTEDIT_K_UNDO	interface/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_UNDO /;"	d	file:
STB_TEXTEDIT_K_UP	interface/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_UP /;"	d	file:
STB_TEXTEDIT_K_WORDLEFT	interface/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_WORDLEFT /;"	d	file:
STB_TEXTEDIT_K_WORDRIGHT	interface/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_WORDRIGHT /;"	d	file:
STB_TEXTEDIT_LAYOUTROW	interface/imgui_widgets.cpp	/^static void    STB_TEXTEDIT_LAYOUTROW(StbTexteditRow* r, STB_TEXTEDIT_STRING* obj, int line_star/;"	f	namespace:ImStb	typeref:typename:void	file:
STB_TEXTEDIT_MOVEWORDLEFT	interface/imgui_widgets.cpp	/^#define STB_TEXTEDIT_MOVEWORDLEFT /;"	d	file:
STB_TEXTEDIT_MOVEWORDLEFT	interface/imstb_textedit.h	/^#define STB_TEXTEDIT_MOVEWORDLEFT /;"	d
STB_TEXTEDIT_MOVEWORDLEFT_IMPL	interface/imgui_widgets.cpp	/^static int  STB_TEXTEDIT_MOVEWORDLEFT_IMPL(STB_TEXTEDIT_STRING* obj, int idx)   { idx--; while (/;"	f	namespace:ImStb	typeref:typename:int	file:
STB_TEXTEDIT_MOVEWORDRIGHT	interface/imgui_widgets.cpp	/^#define STB_TEXTEDIT_MOVEWORDRIGHT /;"	d	file:
STB_TEXTEDIT_MOVEWORDRIGHT	interface/imstb_textedit.h	/^#define STB_TEXTEDIT_MOVEWORDRIGHT /;"	d
STB_TEXTEDIT_MOVEWORDRIGHT_IMPL	interface/imgui_widgets.cpp	/^static int  STB_TEXTEDIT_MOVEWORDRIGHT_IMPL(STB_TEXTEDIT_STRING* obj, int idx)  { idx++; int len/;"	f	namespace:ImStb	typeref:typename:int	file:
STB_TEXTEDIT_NEWLINE	interface/imgui_widgets.cpp	/^static ImWchar STB_TEXTEDIT_NEWLINE = '\\n';$/;"	v	namespace:ImStb	typeref:typename:ImWchar	file:
STB_TEXTEDIT_POSITIONTYPE	interface/imstb_textedit.h	/^#define STB_TEXTEDIT_POSITIONTYPE /;"	d
STB_TEXTEDIT_STRING	interface/imgui_internal.h	/^#define STB_TEXTEDIT_STRING /;"	d
STB_TEXTEDIT_STRINGLEN	interface/imgui_widgets.cpp	/^static int     STB_TEXTEDIT_STRINGLEN(const STB_TEXTEDIT_STRING* obj)                           /;"	f	namespace:ImStb	typeref:typename:int	file:
STB_TEXTEDIT_UNDOCHARCOUNT	interface/imgui_internal.h	/^#define STB_TEXTEDIT_UNDOCHARCOUNT /;"	d
STB_TEXTEDIT_UNDOCHARCOUNT	interface/imstb_textedit.h	/^#define STB_TEXTEDIT_UNDOCHARCOUNT /;"	d
STB_TEXTEDIT_UNDOSTATECOUNT	interface/imgui_internal.h	/^#define STB_TEXTEDIT_UNDOSTATECOUNT /;"	d
STB_TEXTEDIT_UNDOSTATECOUNT	interface/imstb_textedit.h	/^#define STB_TEXTEDIT_UNDOSTATECOUNT /;"	d
STB_TEXTEDIT_memmove	interface/imstb_textedit.h	/^#define STB_TEXTEDIT_memmove /;"	d
STB_TEXT_HAS_SELECTION	interface/imstb_textedit.h	/^#define STB_TEXT_HAS_SELECTION(/;"	d
STB_TRUETYPE_IMPLEMENTATION	interface/imgui_draw.cpp	/^#define STB_TRUETYPE_IMPLEMENTATION$/;"	d	file:
STB_TexteditState	interface/imstb_textedit.h	/^} STB_TexteditState;$/;"	t	typeref:struct:__anon0a8ecdc40308
STICKY_OVERFLOW	arm.hpp	/^            STICKY_OVERFLOW = 27,$/;"	e	enum:Cpu::Flag
SVC	arm.hpp	/^            SVC,$/;"	e	enum:Cpu::Mode
SYS	arm.hpp	/^            SYS,$/;"	e	enum:Cpu::Mode
SameLine	interface/imgui.cpp	/^void ImGui::SameLine(float offset_from_start_x, float spacing_w)$/;"	f	class:ImGui	typeref:typename:void
SaveIniSettingsToDisk	interface/imgui.cpp	/^void ImGui::SaveIniSettingsToDisk(const char* ini_filename)$/;"	f	class:ImGui	typeref:typename:void
SaveIniSettingsToMemory	interface/imgui.cpp	/^const char* ImGui::SaveIniSettingsToMemory(size_t* out_size)$/;"	f	class:ImGui	typeref:typename:const char *
Scale	interface/imgui.h	/^    float                       Scale;              \/\/ 4     \/\/ in  \/\/ = 1.f      \/\/ Bas/;"	m	struct:ImFont	typeref:typename:float
ScaleAllSizes	interface/imgui.cpp	/^void ImGuiStyle::ScaleAllSizes(float scale_factor)$/;"	f	class:ImGuiStyle	typeref:typename:void
ScaleClipRects	interface/imgui_draw.cpp	/^void ImDrawData::ScaleClipRects(const ImVec2& fb_scale)$/;"	f	class:ImDrawData	typeref:typename:void
ScaleRatioFromValueT	interface/imgui_widgets.cpp	/^float ImGui::ScaleRatioFromValueT(ImGuiDataType data_type, TYPE v, TYPE v_min, TYPE v_max, bool /;"	f	class:ImGui	typeref:typename:float
ScanFmt	interface/imgui_internal.h	/^    const char* ScanFmt;        \/\/ Default scanf format for the type$/;"	m	struct:ImGuiDataTypeInfo	typeref:typename:const char *
Scroll	interface/imgui_internal.h	/^    ImVec2                  Scroll;$/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ScrollMax	interface/imgui_internal.h	/^    ImVec2                  ScrollMax;$/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ScrollTarget	interface/imgui_internal.h	/^    ImVec2                  ScrollTarget;                       \/\/ target scroll position. sto/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ScrollTargetCenterRatio	interface/imgui_internal.h	/^    ImVec2                  ScrollTargetCenterRatio;            \/\/ 0.0f = scroll so that targe/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ScrollTargetEdgeSnapDist	interface/imgui_internal.h	/^    ImVec2                  ScrollTargetEdgeSnapDist;           \/\/ 0.0f = no snapping, >0.0f s/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ScrollToBringRectIntoView	interface/imgui.cpp	/^ImVec2 ImGui::ScrollToBringRectIntoView(ImGuiWindow* window, const ImRect& item_rect)$/;"	f	class:ImGui	typeref:typename:ImVec2
ScrollVal	interface/imgui_internal.h	/^    ImVec2                      ScrollVal;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImVec2
ScrollX	interface/imgui_internal.h	/^    float                   ScrollX;                \/\/ horizontal scrolling\/offset$/;"	m	struct:ImGuiInputTextState	typeref:typename:float
Scrollbar	interface/imgui_widgets.cpp	/^void ImGui::Scrollbar(ImGuiAxis axis)$/;"	f	class:ImGui	typeref:typename:void
ScrollbarClickDeltaToGrabCenter	interface/imgui_internal.h	/^    float                   ScrollbarClickDeltaToGrabCenter;    \/\/ Distance between mouse and /;"	m	struct:ImGuiContext	typeref:typename:float
ScrollbarEx	interface/imgui_widgets.cpp	/^bool ImGui::ScrollbarEx(const ImRect& bb_frame, ImGuiID id, ImGuiAxis axis, float* p_scroll_v, f/;"	f	class:ImGui	typeref:typename:bool
ScrollbarRounding	interface/imgui.h	/^    float       ScrollbarRounding;          \/\/ Radius of grab corners for scrollbar.$/;"	m	struct:ImGuiStyle	typeref:typename:float
ScrollbarSize	interface/imgui.h	/^    float       ScrollbarSize;              \/\/ Width of the vertical scrollbar, Height of the /;"	m	struct:ImGuiStyle	typeref:typename:float
ScrollbarSizes	interface/imgui_internal.h	/^    ImVec2                  ScrollbarSizes;                     \/\/ Size taken by each scrollba/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ScrollbarX	interface/imgui_internal.h	/^    bool                    ScrollbarX, ScrollbarY;             \/\/ Are scrollbars visible?$/;"	m	struct:ImGuiWindow	typeref:typename:bool
ScrollbarY	interface/imgui_internal.h	/^    bool                    ScrollbarX, ScrollbarY;             \/\/ Are scrollbars visible?$/;"	m	struct:ImGuiWindow	typeref:typename:bool
ScrollingAnim	interface/imgui_internal.h	/^    float               ScrollingAnim;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
ScrollingRectMaxX	interface/imgui_internal.h	/^    float               ScrollingRectMaxX;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
ScrollingRectMinX	interface/imgui_internal.h	/^    float               ScrollingRectMinX;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
ScrollingSpeed	interface/imgui_internal.h	/^    float               ScrollingSpeed;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
ScrollingTarget	interface/imgui_internal.h	/^    float               ScrollingTarget;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
ScrollingTargetDistToVisibility	interface/imgui_internal.h	/^    float               ScrollingTargetDistToVisibility;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
SelectAll	interface/imgui.h	/^    void                SelectAll()             { SelectionStart = 0; SelectionEnd = BufTextLen;/;"	f	struct:ImGuiInputTextCallbackData	typeref:typename:void
SelectAll	interface/imgui_internal.h	/^    void        SelectAll()                 { Stb.select_start = 0; Stb.cursor = Stb.select_end /;"	f	struct:ImGuiInputTextState	typeref:typename:void
Selectable	interface/imgui_widgets.cpp	/^bool ImGui::Selectable(const char* label, bool selected, ImGuiSelectableFlags flags, const ImVec/;"	f	class:ImGui	typeref:typename:bool
Selectable	interface/imgui_widgets.cpp	/^bool ImGui::Selectable(const char* label, bool* p_selected, ImGuiSelectableFlags flags, const Im/;"	f	class:ImGui	typeref:typename:bool
SelectableTextAlign	interface/imgui.h	/^    ImVec2      SelectableTextAlign;        \/\/ Alignment of selectable text. Defaults to (0.0f/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
SelectedAllMouseLock	interface/imgui_internal.h	/^    bool                    SelectedAllMouseLock;   \/\/ after a double-click to select all, we /;"	m	struct:ImGuiInputTextState	typeref:typename:bool
SelectedTabId	interface/imgui_internal.h	/^    ImGuiID             SelectedTabId;          \/\/ Selected tab\/window$/;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiID
SelectionEnd	interface/imgui.h	/^    int                 SelectionEnd;   \/\/                                      \/\/ Read-writ/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:int
SelectionStart	interface/imgui.h	/^    int                 SelectionStart; \/\/                                      \/\/ Read-writ/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:int
SemaphoreIndex	interface/imgui_impl_vulkan.h	/^    uint32_t            SemaphoreIndex;         \/\/ Current set of swapchain wait semaphores we/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:uint32_t
Separator	interface/imgui_widgets.cpp	/^void ImGui::Separator()$/;"	f	class:ImGui	typeref:typename:void
SeparatorEx	interface/imgui_widgets.cpp	/^void ImGui::SeparatorEx(ImGuiSeparatorFlags flags)$/;"	f	class:ImGui	typeref:typename:void
SetActiveID	interface/imgui.cpp	/^void ImGui::SetActiveID(ImGuiID id, ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
SetAllInt	interface/imgui.cpp	/^void ImGuiStorage::SetAllInt(int v)$/;"	f	class:ImGuiStorage	typeref:typename:void
SetAllocatorFunctions	interface/imgui.cpp	/^void ImGui::SetAllocatorFunctions(void* (*alloc_func)(size_t sz, void* user_data), void (*free_f/;"	f	class:ImGui	typeref:typename:void
SetBit	interface/imgui.h	/^    inline void     SetBit(size_t n)        { int off = (int)(n >> 5); ImU32 mask = 1u << (n & 3/;"	f	struct:ImFontGlyphRangesBuilder	typeref:typename:void
SetBit	interface/imgui_internal.h	/^    void            SetBit(int n)               { IM_ASSERT(n < (Storage.Size << 5)); ImBitArray/;"	f	struct:ImBitVector	typeref:typename:void
SetBool	interface/imgui.cpp	/^void ImGuiStorage::SetBool(ImGuiID key, bool val)$/;"	f	class:ImGuiStorage	typeref:typename:void
SetCircleSegmentMaxError	interface/imgui_draw.cpp	/^void ImDrawListSharedData::SetCircleSegmentMaxError(float max_error)$/;"	f	class:ImDrawListSharedData	typeref:typename:void
SetClipboardText	interface/imgui.cpp	/^void ImGui::SetClipboardText(const char* text)$/;"	f	class:ImGui	typeref:typename:void
SetClipboardTextFn	interface/imgui.h	/^    void        (*SetClipboardTextFn)(void* user_data, const char* text);$/;"	m	struct:ImGuiIO	typeref:typename:void (*)(void * user_data,const char * text)
SetClipboardTextFn_DefaultImpl	interface/imgui.cpp	/^static void SetClipboardTextFn_DefaultImpl(void*, const char* text)$/;"	f	typeref:typename:void	file:
SetColorEditOptions	interface/imgui_widgets.cpp	/^void ImGui::SetColorEditOptions(ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:void
SetColumnOffset	interface/imgui_widgets.cpp	/^void ImGui::SetColumnOffset(int column_index, float offset)$/;"	f	class:ImGui	typeref:typename:void
SetColumnWidth	interface/imgui_widgets.cpp	/^void ImGui::SetColumnWidth(int column_index, float width)$/;"	f	class:ImGui	typeref:typename:void
SetCurrentChannel	interface/imgui_draw.cpp	/^void ImDrawListSplitter::SetCurrentChannel(ImDrawList* draw_list, int idx)$/;"	f	class:ImDrawListSplitter	typeref:typename:void
SetCurrentContext	interface/imgui.cpp	/^void ImGui::SetCurrentContext(ImGuiContext* ctx)$/;"	f	class:ImGui	typeref:typename:void
SetCurrentFont	interface/imgui.cpp	/^void ImGui::SetCurrentFont(ImFont* font)$/;"	f	class:ImGui	typeref:typename:void
SetCurrentWindow	interface/imgui.cpp	/^static void SetCurrentWindow(ImGuiWindow* window)$/;"	f	typeref:typename:void	file:
SetCursorPos	interface/imgui.cpp	/^void ImGui::SetCursorPos(const ImVec2& local_pos)$/;"	f	class:ImGui	typeref:typename:void
SetCursorPosX	interface/imgui.cpp	/^void ImGui::SetCursorPosX(float x)$/;"	f	class:ImGui	typeref:typename:void
SetCursorPosY	interface/imgui.cpp	/^void ImGui::SetCursorPosY(float y)$/;"	f	class:ImGui	typeref:typename:void
SetCursorPosYAndSetupForPrevLine	interface/imgui.cpp	/^static void SetCursorPosYAndSetupForPrevLine(float pos_y, float line_height)$/;"	f	typeref:typename:void	file:
SetCursorScreenPos	interface/imgui.cpp	/^void ImGui::SetCursorScreenPos(const ImVec2& pos)$/;"	f	class:ImGui	typeref:typename:void
SetDragDropPayload	interface/imgui.cpp	/^bool ImGui::SetDragDropPayload(const char* type, const void* data, size_t data_size, ImGuiCond c/;"	f	class:ImGui	typeref:typename:bool
SetFallbackChar	interface/imgui_draw.cpp	/^void ImFont::SetFallbackChar(ImWchar c)$/;"	f	class:ImFont	typeref:typename:void
SetFloat	interface/imgui.cpp	/^void ImGuiStorage::SetFloat(ImGuiID key, float val)$/;"	f	class:ImGuiStorage	typeref:typename:void
SetFocusID	interface/imgui.cpp	/^void ImGui::SetFocusID(ImGuiID id, ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
SetGlyphVisible	interface/imgui_draw.cpp	/^void ImFont::SetGlyphVisible(ImWchar c, bool visible)$/;"	f	class:ImFont	typeref:typename:void
SetHSV	interface/imgui.h	/^    inline void    SetHSV(float h, float s, float v, float a = 1.0f){ ImGui::ColorConvertHSVtoRG/;"	f	struct:ImColor	typeref:typename:void
SetHoveredID	interface/imgui.cpp	/^void ImGui::SetHoveredID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
SetInt	interface/imgui.cpp	/^void ImGuiStorage::SetInt(ImGuiID key, int val)$/;"	f	class:ImGuiStorage	typeref:typename:void
SetItemAllowOverlap	interface/imgui.cpp	/^void ImGui::SetItemAllowOverlap()$/;"	f	class:ImGui	typeref:typename:void
SetItemDefaultFocus	interface/imgui.cpp	/^void ImGui::SetItemDefaultFocus()$/;"	f	class:ImGui	typeref:typename:void
SetKeyboardFocusHere	interface/imgui.cpp	/^void ImGui::SetKeyboardFocusHere(int offset)$/;"	f	class:ImGui	typeref:typename:void
SetLastItemData	interface/imgui.cpp	/^void ImGui::SetLastItemData(ImGuiWindow* window, ImGuiID item_id, ImGuiItemStatusFlags item_flag/;"	f	class:ImGui	typeref:typename:void
SetMouseCursor	interface/imgui.cpp	/^void ImGui::SetMouseCursor(ImGuiMouseCursor cursor_type)$/;"	f	class:ImGui	typeref:typename:void
SetNavID	interface/imgui.cpp	/^void ImGui::SetNavID(ImGuiID id, int nav_layer, ImGuiID focus_scope_id)$/;"	f	class:ImGui	typeref:typename:void
SetNavIDWithRectRel	interface/imgui.cpp	/^void ImGui::SetNavIDWithRectRel(ImGuiID id, int nav_layer, ImGuiID focus_scope_id, const ImRect&/;"	f	class:ImGui	typeref:typename:void
SetNextItemOpen	interface/imgui_widgets.cpp	/^void ImGui::SetNextItemOpen(bool is_open, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetNextItemWidth	interface/imgui.cpp	/^void ImGui::SetNextItemWidth(float item_width)$/;"	f	class:ImGui	typeref:typename:void
SetNextTreeNodeOpen	interface/imgui.h	/^    static inline void  SetNextTreeNodeOpen(bool open, ImGuiCond cond = 0) { SetNextItemOpen(ope/;"	f	namespace:ImGui	typeref:typename:void
SetNextWindowBgAlpha	interface/imgui.cpp	/^void ImGui::SetNextWindowBgAlpha(float alpha)$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowCollapsed	interface/imgui.cpp	/^void ImGui::SetNextWindowCollapsed(bool collapsed, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowContentSize	interface/imgui.cpp	/^void ImGui::SetNextWindowContentSize(const ImVec2& size)$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowFocus	interface/imgui.cpp	/^void ImGui::SetNextWindowFocus()$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowPos	interface/imgui.cpp	/^void ImGui::SetNextWindowPos(const ImVec2& pos, ImGuiCond cond, const ImVec2& pivot)$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowScroll	interface/imgui.cpp	/^void ImGui::SetNextWindowScroll(const ImVec2& scroll)$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowSize	interface/imgui.cpp	/^void ImGui::SetNextWindowSize(const ImVec2& size, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowSizeConstraints	interface/imgui.cpp	/^void ImGui::SetNextWindowSizeConstraints(const ImVec2& size_min, const ImVec2& size_max, ImGuiSi/;"	f	class:ImGui	typeref:typename:void
SetScrollFromPosX	interface/imgui.cpp	/^void ImGui::SetScrollFromPosX(ImGuiWindow* window, float local_x, float center_x_ratio)$/;"	f	class:ImGui	typeref:typename:void
SetScrollFromPosX	interface/imgui.cpp	/^void ImGui::SetScrollFromPosX(float local_x, float center_x_ratio)$/;"	f	class:ImGui	typeref:typename:void
SetScrollFromPosY	interface/imgui.cpp	/^void ImGui::SetScrollFromPosY(ImGuiWindow* window, float local_y, float center_y_ratio)$/;"	f	class:ImGui	typeref:typename:void
SetScrollFromPosY	interface/imgui.cpp	/^void ImGui::SetScrollFromPosY(float local_y, float center_y_ratio)$/;"	f	class:ImGui	typeref:typename:void
SetScrollHere	interface/imgui.h	/^    static inline void  SetScrollHere(float center_ratio=0.5f){ SetScrollHereY(center_ratio); }$/;"	f	namespace:ImGui	typeref:typename:void
SetScrollHereX	interface/imgui.cpp	/^void ImGui::SetScrollHereX(float center_x_ratio)$/;"	f	class:ImGui	typeref:typename:void
SetScrollHereY	interface/imgui.cpp	/^void ImGui::SetScrollHereY(float center_y_ratio)$/;"	f	class:ImGui	typeref:typename:void
SetScrollX	interface/imgui.cpp	/^void ImGui::SetScrollX(ImGuiWindow* window, float scroll_x)$/;"	f	class:ImGui	typeref:typename:void
SetScrollX	interface/imgui.cpp	/^void ImGui::SetScrollX(float scroll_x)$/;"	f	class:ImGui	typeref:typename:void
SetScrollY	interface/imgui.cpp	/^void ImGui::SetScrollY(ImGuiWindow* window, float scroll_y)$/;"	f	class:ImGui	typeref:typename:void
SetScrollY	interface/imgui.cpp	/^void ImGui::SetScrollY(float scroll_y)$/;"	f	class:ImGui	typeref:typename:void
SetStateStorage	interface/imgui.cpp	/^void ImGui::SetStateStorage(ImGuiStorage* tree)$/;"	f	class:ImGui	typeref:typename:void
SetTabItemClosed	interface/imgui_widgets.cpp	/^void    ImGui::SetTabItemClosed(const char* label)$/;"	f	class:ImGui	typeref:typename:void
SetTexID	interface/imgui.h	/^    void                        SetTexID(ImTextureID id)    { TexID = id; }$/;"	f	struct:ImFontAtlas	typeref:typename:void
SetTooltip	interface/imgui.cpp	/^void ImGui::SetTooltip(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
SetTooltipV	interface/imgui.cpp	/^void ImGui::SetTooltipV(const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
SetVoidPtr	interface/imgui.cpp	/^void ImGuiStorage::SetVoidPtr(ImGuiID key, void* val)$/;"	f	class:ImGuiStorage	typeref:typename:void
SetWindowClipRectBeforeSetChannel	interface/imgui_widgets.cpp	/^void ImGui::SetWindowClipRectBeforeSetChannel(ImGuiWindow* window, const ImRect& clip_rect)$/;"	f	class:ImGui	typeref:typename:void
SetWindowCollapsed	interface/imgui.cpp	/^void ImGui::SetWindowCollapsed(ImGuiWindow* window, bool collapsed, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowCollapsed	interface/imgui.cpp	/^void ImGui::SetWindowCollapsed(bool collapsed, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowCollapsed	interface/imgui.cpp	/^void ImGui::SetWindowCollapsed(const char* name, bool collapsed, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowCollapsedAllowFlags	interface/imgui_internal.h	/^    ImGuiCond               SetWindowCollapsedAllowFlags;       \/\/ store acceptable condition /;"	m	struct:ImGuiWindow	typeref:typename:ImGuiCond
SetWindowConditionAllowFlags	interface/imgui.cpp	/^static void SetWindowConditionAllowFlags(ImGuiWindow* window, ImGuiCond flags, bool enabled)$/;"	f	typeref:typename:void	file:
SetWindowFocus	interface/imgui.cpp	/^void ImGui::SetWindowFocus()$/;"	f	class:ImGui	typeref:typename:void
SetWindowFocus	interface/imgui.cpp	/^void ImGui::SetWindowFocus(const char* name)$/;"	f	class:ImGui	typeref:typename:void
SetWindowFontScale	interface/imgui.cpp	/^void ImGui::SetWindowFontScale(float scale)$/;"	f	class:ImGui	typeref:typename:void
SetWindowHitTestHole	interface/imgui.cpp	/^void ImGui::SetWindowHitTestHole(ImGuiWindow* window, const ImVec2& pos, const ImVec2& size)$/;"	f	class:ImGui	typeref:typename:void
SetWindowPos	interface/imgui.cpp	/^void ImGui::SetWindowPos(ImGuiWindow* window, const ImVec2& pos, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowPos	interface/imgui.cpp	/^void ImGui::SetWindowPos(const ImVec2& pos, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowPos	interface/imgui.cpp	/^void ImGui::SetWindowPos(const char* name, const ImVec2& pos, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowPosAllowFlags	interface/imgui_internal.h	/^    ImGuiCond               SetWindowPosAllowFlags;             \/\/ store acceptable condition /;"	m	struct:ImGuiWindow	typeref:typename:ImGuiCond
SetWindowPosPivot	interface/imgui_internal.h	/^    ImVec2                  SetWindowPosPivot;                  \/\/ store window pivot for posi/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
SetWindowPosVal	interface/imgui_internal.h	/^    ImVec2                  SetWindowPosVal;                    \/\/ store window position when /;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
SetWindowSize	interface/imgui.cpp	/^void ImGui::SetWindowSize(ImGuiWindow* window, const ImVec2& size, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowSize	interface/imgui.cpp	/^void ImGui::SetWindowSize(const ImVec2& size, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowSize	interface/imgui.cpp	/^void ImGui::SetWindowSize(const char* name, const ImVec2& size, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowSizeAllowFlags	interface/imgui_internal.h	/^    ImGuiCond               SetWindowSizeAllowFlags;            \/\/ store acceptable condition /;"	m	struct:ImGuiWindow	typeref:typename:ImGuiCond
SettingsDirtyTimer	interface/imgui_internal.h	/^    float                   SettingsDirtyTimer;                 \/\/ Save .ini Settings to memor/;"	m	struct:ImGuiContext	typeref:typename:float
SettingsHandlers	interface/imgui_internal.h	/^    ImVector<ImGuiSettingsHandler>      SettingsHandlers;       \/\/ List of .ini settings handl/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiSettingsHandler>
SettingsIniData	interface/imgui_internal.h	/^    ImGuiTextBuffer         SettingsIniData;                    \/\/ In memory .ini settings$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiTextBuffer
SettingsLoaded	interface/imgui_internal.h	/^    bool                    SettingsLoaded;$/;"	m	struct:ImGuiContext	typeref:typename:bool
SettingsOffset	interface/imgui_internal.h	/^    int                     SettingsOffset;                     \/\/ Offset into SettingsWindows/;"	m	struct:ImGuiWindow	typeref:typename:int
SettingsWindows	interface/imgui_internal.h	/^    ImChunkStream<ImGuiWindowSettings>  SettingsWindows;        \/\/ ImGuiWindow .ini settings e/;"	m	struct:ImGuiContext	typeref:typename:ImChunkStream<ImGuiWindowSettings>
SetupDrawData	interface/imgui.cpp	/^static void SetupDrawData(ImVector<ImDrawList*>* draw_lists, ImDrawData* draw_data)$/;"	f	typeref:typename:void	file:
ShadeVertsLinearColorGradientKeepAlpha	interface/imgui_draw.cpp	/^void ImGui::ShadeVertsLinearColorGradientKeepAlpha(ImDrawList* draw_list, int vert_start_idx, in/;"	f	class:ImGui	typeref:typename:void
ShadeVertsLinearUV	interface/imgui_draw.cpp	/^void ImGui::ShadeVertsLinearUV(ImDrawList* draw_list, int vert_start_idx, int vert_end_idx, cons/;"	f	class:ImGui	typeref:typename:void
ShowDrawCmdBoundingBoxes	interface/imgui_internal.h	/^    bool        ShowDrawCmdBoundingBoxes;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:bool
ShowDrawCmdMesh	interface/imgui_internal.h	/^    bool        ShowDrawCmdMesh;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:bool
ShowMetricsWindow	interface/imgui.cpp	/^void ImGui::ShowMetricsWindow(bool* p_open)$/;"	f	class:ImGui	typeref:typename:void
ShowMetricsWindow	interface/imgui.cpp	/^void ImGui::ShowMetricsWindow(bool*) {}$/;"	f	class:ImGui	typeref:typename:void
ShowTablesRects	interface/imgui_internal.h	/^    bool        ShowTablesRects;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:bool
ShowTablesRectsType	interface/imgui_internal.h	/^    int         ShowTablesRectsType;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:int
ShowWindowsBeginOrder	interface/imgui_internal.h	/^    bool        ShowWindowsBeginOrder;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:bool
ShowWindowsRects	interface/imgui_internal.h	/^    bool        ShowWindowsRects;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:bool
ShowWindowsRectsType	interface/imgui_internal.h	/^    int         ShowWindowsRectsType;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:int
ShrinkWidthBuffer	interface/imgui_internal.h	/^    ImVector<ImGuiShrinkWidthItem>  ShrinkWidthBuffer;$/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiShrinkWidthItem>
ShrinkWidthItemComparer	interface/imgui_widgets.cpp	/^static int IMGUI_CDECL ShrinkWidthItemComparer(const void* lhs, const void* rhs)$/;"	f	typeref:typename:int IMGUI_CDECL	file:
ShrinkWidths	interface/imgui_widgets.cpp	/^void ImGui::ShrinkWidths(ImGuiShrinkWidthItem* items, int count, float width_excess)$/;"	f	class:ImGui	typeref:typename:void
Shutdown	interface/imgui.cpp	/^void ImGui::Shutdown(ImGuiContext* context)$/;"	f	class:ImGui	typeref:typename:void
Size	interface/imgui.h	/^    int                 Size;$/;"	m	struct:ImVector	typeref:typename:int
Size	interface/imgui_internal.h	/^    ImVec2                  Size;                               \/\/ Current size (==SizeFull or/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
Size	interface/imgui_internal.h	/^    ImVec2ih    Size;$/;"	m	struct:ImGuiWindowSettings	typeref:typename:ImVec2ih
Size	interface/imgui_internal.h	/^    size_t      Size;           \/\/ Size in bytes$/;"	m	struct:ImGuiDataTypeInfo	typeref:typename:size_t
SizeCallback	interface/imgui_internal.h	/^    ImGuiSizeCallback           SizeCallback;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImGuiSizeCallback
SizeCallbackUserData	interface/imgui_internal.h	/^    void*                       SizeCallbackUserData;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:void *
SizeCond	interface/imgui_internal.h	/^    ImGuiCond                   SizeCond;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImGuiCond
SizeConstraintRect	interface/imgui_internal.h	/^    ImRect                      SizeConstraintRect;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImRect
SizeFull	interface/imgui_internal.h	/^    ImVec2                  SizeFull;                           \/\/ Size when non collapsed$/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
SizePixels	interface/imgui.h	/^    float           SizePixels;             \/\/          \/\/ Size in pixels for rasterizer (mo/;"	m	struct:ImFontConfig	typeref:typename:float
SizeVal	interface/imgui_internal.h	/^    ImVec2                      SizeVal;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImVec2
SkipItems	interface/imgui_internal.h	/^    bool                    SkipItems;                          \/\/ Set when items can safely b/;"	m	struct:ImGuiWindow	typeref:typename:bool
SliderAngle	interface/imgui_widgets.cpp	/^bool ImGui::SliderAngle(const char* label, float* v_rad, float v_degrees_min, float v_degrees_ma/;"	f	class:ImGui	typeref:typename:bool
SliderBehavior	interface/imgui_widgets.cpp	/^bool ImGui::SliderBehavior(const ImRect& bb, ImGuiID id, ImGuiDataType data_type, void* p_v, con/;"	f	class:ImGui	typeref:typename:bool
SliderBehaviorT	interface/imgui_widgets.cpp	/^bool ImGui::SliderBehaviorT(const ImRect& bb, ImGuiID id, ImGuiDataType data_type, TYPE* v, cons/;"	f	class:ImGui	typeref:typename:bool
SliderCurrentAccum	interface/imgui_internal.h	/^    float                   SliderCurrentAccum;                 \/\/ Accumulated slider delta wh/;"	m	struct:ImGuiContext	typeref:typename:float
SliderCurrentAccumDirty	interface/imgui_internal.h	/^    bool                    SliderCurrentAccumDirty;            \/\/ Has the accumulated slider /;"	m	struct:ImGuiContext	typeref:typename:bool
SliderFloat	interface/imgui.h	/^    static inline bool  SliderFloat(const char* label, float* v, float v_min, float v_max, const/;"	f	namespace:ImGui	typeref:typename:bool
SliderFloat	interface/imgui_widgets.cpp	/^bool ImGui::SliderFloat(const char* label, float* v, float v_min, float v_max, const char* forma/;"	f	class:ImGui	typeref:typename:bool
SliderFloat2	interface/imgui.h	/^    static inline bool  SliderFloat2(const char* label, float v[2], float v_min, float v_max, co/;"	f	namespace:ImGui	typeref:typename:bool
SliderFloat2	interface/imgui_widgets.cpp	/^bool ImGui::SliderFloat2(const char* label, float v[2], float v_min, float v_max, const char* fo/;"	f	class:ImGui	typeref:typename:bool
SliderFloat3	interface/imgui.h	/^    static inline bool  SliderFloat3(const char* label, float v[3], float v_min, float v_max, co/;"	f	namespace:ImGui	typeref:typename:bool
SliderFloat3	interface/imgui_widgets.cpp	/^bool ImGui::SliderFloat3(const char* label, float v[3], float v_min, float v_max, const char* fo/;"	f	class:ImGui	typeref:typename:bool
SliderFloat4	interface/imgui.h	/^    static inline bool  SliderFloat4(const char* label, float v[4], float v_min, float v_max, co/;"	f	namespace:ImGui	typeref:typename:bool
SliderFloat4	interface/imgui_widgets.cpp	/^bool ImGui::SliderFloat4(const char* label, float v[4], float v_min, float v_max, const char* fo/;"	f	class:ImGui	typeref:typename:bool
SliderInt	interface/imgui_widgets.cpp	/^bool ImGui::SliderInt(const char* label, int* v, int v_min, int v_max, const char* format, ImGui/;"	f	class:ImGui	typeref:typename:bool
SliderInt2	interface/imgui_widgets.cpp	/^bool ImGui::SliderInt2(const char* label, int v[2], int v_min, int v_max, const char* format, Im/;"	f	class:ImGui	typeref:typename:bool
SliderInt3	interface/imgui_widgets.cpp	/^bool ImGui::SliderInt3(const char* label, int v[3], int v_min, int v_max, const char* format, Im/;"	f	class:ImGui	typeref:typename:bool
SliderInt4	interface/imgui_widgets.cpp	/^bool ImGui::SliderInt4(const char* label, int v[4], int v_min, int v_max, const char* format, Im/;"	f	class:ImGui	typeref:typename:bool
SliderScalar	interface/imgui_widgets.cpp	/^bool ImGui::SliderScalar(const char* label, ImGuiDataType data_type, void* p_data, const void* p/;"	f	class:ImGui	typeref:typename:bool
SliderScalarN	interface/imgui_widgets.cpp	/^bool ImGui::SliderScalarN(const char* label, ImGuiDataType data_type, void* v, int components, c/;"	f	class:ImGui	typeref:typename:bool
SmallButton	interface/imgui_widgets.cpp	/^bool ImGui::SmallButton(const char* label)$/;"	f	class:ImGui	typeref:typename:bool
SourceId	interface/imgui.h	/^    ImGuiID         SourceId;           \/\/ Source item id$/;"	m	struct:ImGuiPayload	typeref:typename:ImGuiID
SourceParentId	interface/imgui.h	/^    ImGuiID         SourceParentId;     \/\/ Source parent id (if available)$/;"	m	struct:ImGuiPayload	typeref:typename:ImGuiID
SourceWindow	interface/imgui_internal.h	/^    ImGuiWindow*        SourceWindow;   \/\/ Set on OpenPopup() copy of NavWindow at the time of/;"	m	struct:ImGuiPopupData	typeref:typename:ImGuiWindow *
Spacing	interface/imgui_internal.h	/^    float       Spacing;$/;"	m	struct:ImGuiMenuColumns	typeref:typename:float
Spacing	interface/imgui_widgets.cpp	/^    float               Spacing;                \/\/ Horizontal spacing at the end of the sectio/;"	m	struct:ImGuiTabBarSection	typeref:typename:float	file:
Spacing	interface/imgui_widgets.cpp	/^void ImGui::Spacing()$/;"	f	class:ImGui	typeref:typename:void
Split	interface/imgui_draw.cpp	/^void ImDrawListSplitter::Split(ImDrawList* draw_list, int channels_count)$/;"	f	class:ImDrawListSplitter	typeref:typename:void
Splitter	interface/imgui_internal.h	/^    ImDrawListSplitter  Splitter;$/;"	m	struct:ImGuiColumns	typeref:typename:ImDrawListSplitter
SplitterBehavior	interface/imgui_widgets.cpp	/^bool ImGui::SplitterBehavior(const ImRect& bb, ImGuiID id, ImGuiAxis axis, float* size1, float* /;"	f	class:ImGui	typeref:typename:bool
SrcCount	interface/imgui_draw.cpp	/^    int                 SrcCount;           \/\/ Number of source fonts targeting this destinati/;"	m	struct:ImFontBuildDstData	typeref:typename:int	file:
SrcRanges	interface/imgui_draw.cpp	/^    const ImWchar*      SrcRanges;          \/\/ Ranges as requested by user (user is allowed to/;"	m	struct:ImFontBuildSrcData	typeref:typename:const ImWchar *	file:
StackSizesBackup	interface/imgui_internal.h	/^    short                   StackSizesBackup[6];    \/\/ Store size of various stacks for assert/;"	m	struct:ImGuiWindowTempData	typeref:typename:short[6]
StartLockWheelingWindow	interface/imgui.cpp	/^static void StartLockWheelingWindow(ImGuiWindow* window)$/;"	f	typeref:typename:void	file:
StartMouseMovingWindow	interface/imgui.cpp	/^void ImGui::StartMouseMovingWindow(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
StartPosY	interface/imgui.h	/^    float   StartPosY;$/;"	m	struct:ImGuiListClipper	typeref:typename:float
StateStorage	interface/imgui_internal.h	/^    ImGuiStorage            StateStorage;$/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiStorage
StateStorage	interface/imgui_internal.h	/^    ImGuiStorage*           StateStorage;           \/\/ Current persistent per-window storage (/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiStorage *
StaticFunc	interface/imgui.cpp	/^    struct StaticFunc$/;"	s	function:ImGuiStorage::BuildSortByKey	file:
Stb	interface/imgui_internal.h	/^    ImStb::STB_TexteditState Stb;                   \/\/ state for stb_textedit.h$/;"	m	struct:ImGuiInputTextState	typeref:typename:ImStb::STB_TexteditState
StbFindState	interface/imstb_textedit.h	/^} StbFindState;$/;"	t	typeref:struct:__anon0a8ecdc40508
StbTexteditRow	interface/imstb_textedit.h	/^} StbTexteditRow;$/;"	t	typeref:struct:__anon0a8ecdc40408
StbUndoRecord	interface/imstb_textedit.h	/^} StbUndoRecord;$/;"	t	typeref:struct:__anon0a8ecdc40108
StbUndoState	interface/imstb_textedit.h	/^} StbUndoState;$/;"	t	typeref:struct:__anon0a8ecdc40208
Step	interface/imgui.cpp	/^bool ImGuiListClipper::Step()$/;"	f	class:ImGuiListClipper	typeref:typename:bool
StepNo	interface/imgui.h	/^    int     StepNo;$/;"	m	struct:ImGuiListClipper	typeref:typename:int
Storage	interface/imgui_internal.h	/^    ImVector<ImU32> Storage;$/;"	m	struct:ImBitVector	typeref:typename:ImVector<ImU32>
Stride	interface/imgui_widgets.cpp	/^    int Stride;$/;"	m	struct:ImGuiPlotArrayGetterData	typeref:typename:int	file:
Style	interface/imgui_internal.h	/^    ImGuiStyle              Style;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiStyle
StyleColorsClassic	interface/imgui_draw.cpp	/^void ImGui::StyleColorsClassic(ImGuiStyle* dst)$/;"	f	class:ImGui	typeref:typename:void
StyleColorsDark	interface/imgui_draw.cpp	/^void ImGui::StyleColorsDark(ImGuiStyle* dst)$/;"	f	class:ImGui	typeref:typename:void
StyleColorsLight	interface/imgui_draw.cpp	/^void ImGui::StyleColorsLight(ImGuiStyle* dst)$/;"	f	class:ImGui	typeref:typename:void
StyleModifiers	interface/imgui_internal.h	/^    ImVector<ImGuiStyleMod> StyleModifiers;                     \/\/ Stack for PushStyleVar()\/P/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiStyleMod>
Surface	interface/imgui_impl_vulkan.h	/^    VkSurfaceKHR        Surface;$/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:VkSurfaceKHR
SurfaceFormat	interface/imgui_impl_vulkan.h	/^    VkSurfaceFormatKHR  SurfaceFormat;$/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:VkSurfaceFormatKHR
Swapchain	interface/imgui_impl_vulkan.h	/^    VkSwapchainKHR      Swapchain;$/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:VkSwapchainKHR
THUMB	arm.hpp	/^            THUMB = 5,$/;"	e	enum:Cpu::Flag
TRT_BackgroundClipRect	interface/imgui.cpp	/^    enum { TRT_OuterRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_BackgroundClipR/;"	e	enum:ImGui::ShowMetricsWindow::__anon849780f10203	file:
TRT_ColumnsClipRect	interface/imgui.cpp	/^    enum { TRT_OuterRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_BackgroundClipR/;"	e	enum:ImGui::ShowMetricsWindow::__anon849780f10203	file:
TRT_ColumnsContentHeadersIdeal	interface/imgui.cpp	/^    enum { TRT_OuterRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_BackgroundClipR/;"	e	enum:ImGui::ShowMetricsWindow::__anon849780f10203	file:
TRT_ColumnsContentHeadersUsed	interface/imgui.cpp	/^    enum { TRT_OuterRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_BackgroundClipR/;"	e	enum:ImGui::ShowMetricsWindow::__anon849780f10203	file:
TRT_ColumnsContentRowsFrozen	interface/imgui.cpp	/^    enum { TRT_OuterRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_BackgroundClipR/;"	e	enum:ImGui::ShowMetricsWindow::__anon849780f10203	file:
TRT_ColumnsContentRowsUnfrozen	interface/imgui.cpp	/^    enum { TRT_OuterRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_BackgroundClipR/;"	e	enum:ImGui::ShowMetricsWindow::__anon849780f10203	file:
TRT_ColumnsRect	interface/imgui.cpp	/^    enum { TRT_OuterRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_BackgroundClipR/;"	e	enum:ImGui::ShowMetricsWindow::__anon849780f10203	file:
TRT_Count	interface/imgui.cpp	/^    enum { TRT_OuterRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_BackgroundClipR/;"	e	enum:ImGui::ShowMetricsWindow::__anon849780f10203	file:
TRT_HostClipRect	interface/imgui.cpp	/^    enum { TRT_OuterRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_BackgroundClipR/;"	e	enum:ImGui::ShowMetricsWindow::__anon849780f10203	file:
TRT_InnerClipRect	interface/imgui.cpp	/^    enum { TRT_OuterRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_BackgroundClipR/;"	e	enum:ImGui::ShowMetricsWindow::__anon849780f10203	file:
TRT_OuterRect	interface/imgui.cpp	/^    enum { TRT_OuterRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_BackgroundClipR/;"	e	enum:ImGui::ShowMetricsWindow::__anon849780f10203	file:
TRT_WorkRect	interface/imgui.cpp	/^    enum { TRT_OuterRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_BackgroundClipR/;"	e	enum:ImGui::ShowMetricsWindow::__anon849780f10203	file:
TabBarCalcMaxTabWidth	interface/imgui_widgets.cpp	/^static float ImGui::TabBarCalcMaxTabWidth()$/;"	f	class:ImGui	typeref:typename:float	file:
TabBarCalcTabID	interface/imgui_widgets.cpp	/^static ImU32   ImGui::TabBarCalcTabID(ImGuiTabBar* tab_bar, const char* label)$/;"	f	class:ImGui	typeref:typename:ImU32	file:
TabBarCloseTab	interface/imgui_widgets.cpp	/^void ImGui::TabBarCloseTab(ImGuiTabBar* tab_bar, ImGuiTabItem* tab)$/;"	f	class:ImGui	typeref:typename:void
TabBarFindTabByID	interface/imgui_widgets.cpp	/^ImGuiTabItem* ImGui::TabBarFindTabByID(ImGuiTabBar* tab_bar, ImGuiID tab_id)$/;"	f	class:ImGui	typeref:typename:ImGuiTabItem *
TabBarLayout	interface/imgui_widgets.cpp	/^static void ImGui::TabBarLayout(ImGuiTabBar* tab_bar)$/;"	f	class:ImGui	typeref:typename:void	file:
TabBarProcessReorder	interface/imgui_widgets.cpp	/^bool ImGui::TabBarProcessReorder(ImGuiTabBar* tab_bar)$/;"	f	class:ImGui	typeref:typename:bool
TabBarQueueReorder	interface/imgui_widgets.cpp	/^void ImGui::TabBarQueueReorder(ImGuiTabBar* tab_bar, const ImGuiTabItem* tab, int dir)$/;"	f	class:ImGui	typeref:typename:void
TabBarRemoveTab	interface/imgui_widgets.cpp	/^void ImGui::TabBarRemoveTab(ImGuiTabBar* tab_bar, ImGuiID tab_id)$/;"	f	class:ImGui	typeref:typename:void
TabBarScrollClamp	interface/imgui_widgets.cpp	/^static float ImGui::TabBarScrollClamp(ImGuiTabBar* tab_bar, float scrolling)$/;"	f	class:ImGui	typeref:typename:float	file:
TabBarScrollToTab	interface/imgui_widgets.cpp	/^static void ImGui::TabBarScrollToTab(ImGuiTabBar* tab_bar, ImGuiTabItem* tab, ImGuiTabBarSection/;"	f	class:ImGui	typeref:typename:void	file:
TabBarScrollingButtons	interface/imgui_widgets.cpp	/^static ImGuiTabItem* ImGui::TabBarScrollingButtons(ImGuiTabBar* tab_bar)$/;"	f	class:ImGui	typeref:typename:ImGuiTabItem *	file:
TabBarTabListPopupButton	interface/imgui_widgets.cpp	/^static ImGuiTabItem* ImGui::TabBarTabListPopupButton(ImGuiTabBar* tab_bar)$/;"	f	class:ImGui	typeref:typename:ImGuiTabItem *	file:
TabBars	interface/imgui_internal.h	/^    ImPool<ImGuiTabBar>             TabBars;$/;"	m	struct:ImGuiContext	typeref:typename:ImPool<ImGuiTabBar>
TabBorderSize	interface/imgui.h	/^    float       TabBorderSize;              \/\/ Thickness of border around tabs.$/;"	m	struct:ImGuiStyle	typeref:typename:float
TabCount	interface/imgui_widgets.cpp	/^    int                 TabCount;               \/\/ Number of tabs in this section.$/;"	m	struct:ImGuiTabBarSection	typeref:typename:int	file:
TabItemBackground	interface/imgui_widgets.cpp	/^void ImGui::TabItemBackground(ImDrawList* draw_list, const ImRect& bb, ImGuiTabItemFlags flags, /;"	f	class:ImGui	typeref:typename:void
TabItemButton	interface/imgui_widgets.cpp	/^bool    ImGui::TabItemButton(const char* label, ImGuiTabItemFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
TabItemCalcSize	interface/imgui_widgets.cpp	/^ImVec2 ImGui::TabItemCalcSize(const char* label, bool has_close_button)$/;"	f	class:ImGui	typeref:typename:ImVec2
TabItemComparerByBeginOrder	interface/imgui_widgets.cpp	/^static int IMGUI_CDECL TabItemComparerByBeginOrder(const void* lhs, const void* rhs)$/;"	f	typeref:typename:int IMGUI_CDECL	file:
TabItemComparerBySection	interface/imgui_widgets.cpp	/^static int IMGUI_CDECL TabItemComparerBySection(const void* lhs, const void* rhs)$/;"	f	typeref:typename:int IMGUI_CDECL	file:
TabItemEx	interface/imgui_widgets.cpp	/^bool    ImGui::TabItemEx(ImGuiTabBar* tab_bar, const char* label, bool* p_open, ImGuiTabItemFlag/;"	f	class:ImGui	typeref:typename:bool
TabItemLabelAndCloseButton	interface/imgui_widgets.cpp	/^void ImGui::TabItemLabelAndCloseButton(ImDrawList* draw_list, const ImRect& bb, ImGuiTabItemFlag/;"	f	class:ImGui	typeref:typename:void
TabMinWidthForCloseButton	interface/imgui.h	/^    float       TabMinWidthForCloseButton;  \/\/ Minimum width for close button to appears on an/;"	m	struct:ImGuiStyle	typeref:typename:float
TabRounding	interface/imgui.h	/^    float       TabRounding;                \/\/ Radius of upper corners of a tab. Set to 0.0f t/;"	m	struct:ImGuiStyle	typeref:typename:float
Tabs	interface/imgui_internal.h	/^    ImVector<ImGuiTabItem> Tabs;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImVector<ImGuiTabItem>
TabsActiveCount	interface/imgui_internal.h	/^    ImS16               TabsActiveCount;        \/\/ Number of tabs submitted this frame.$/;"	m	struct:ImGuiTabBar	typeref:typename:ImS16
TabsAddedNew	interface/imgui_internal.h	/^    bool                TabsAddedNew;           \/\/ Set to true when a new tab item or button h/;"	m	struct:ImGuiTabBar	typeref:typename:bool
TabsNames	interface/imgui_internal.h	/^    ImGuiTextBuffer     TabsNames;              \/\/ For non-docking tab bar we re-append names /;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiTextBuffer
TempBuffer	interface/imgui_internal.h	/^    char                    TempBuffer[1024 * 3 + 1];           \/\/ Temporary text buffer$/;"	m	struct:ImGuiContext	typeref:typename:char[]
TempInputId	interface/imgui_internal.h	/^    ImGuiID                 TempInputId;                        \/\/ Temporary text input when C/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
TempInputIsActive	interface/imgui_internal.h	/^    inline bool             TempInputIsActive(ImGuiID id)       { ImGuiContext& g = *GImGui; ret/;"	f	namespace:ImGui	typeref:typename:bool
TempInputScalar	interface/imgui_widgets.cpp	/^bool ImGui::TempInputScalar(const ImRect& bb, ImGuiID id, const char* label, ImGuiDataType data_/;"	f	class:ImGui	typeref:typename:bool
TempInputText	interface/imgui_widgets.cpp	/^bool ImGui::TempInputText(const ImRect& bb, ImGuiID id, const char* label, char* buf, int buf_si/;"	f	class:ImGui	typeref:typename:bool
TestBit	interface/imgui_internal.h	/^    bool            TestBit(int n) const        { IM_ASSERT(n < (Storage.Size << 5)); return ImB/;"	f	struct:ImBitVector	typeref:typename:bool
TestEngine	interface/imgui_internal.h	/^    void*                   TestEngine;                         \/\/ Test engine user data$/;"	m	struct:ImGuiContext	typeref:typename:void *
TestEngineHookIdInfo	interface/imgui_internal.h	/^    ImGuiID                 TestEngineHookIdInfo;               \/\/ Will call test engine hooks/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
TestEngineHookItems	interface/imgui_internal.h	/^    bool                    TestEngineHookItems;                \/\/ Will call test engine hooks/;"	m	struct:ImGuiContext	typeref:typename:bool
TexDesiredWidth	interface/imgui.h	/^    int                         TexDesiredWidth;    \/\/ Texture width desired by user before Bu/;"	m	struct:ImFontAtlas	typeref:typename:int
TexGlyphPadding	interface/imgui.h	/^    int                         TexGlyphPadding;    \/\/ Padding between glyphs within texture i/;"	m	struct:ImFontAtlas	typeref:typename:int
TexHeight	interface/imgui.h	/^    int                         TexHeight;          \/\/ Texture height calculated during Build(/;"	m	struct:ImFontAtlas	typeref:typename:int
TexID	interface/imgui.h	/^    ImTextureID                 TexID;              \/\/ User data to refer to the texture once /;"	m	struct:ImFontAtlas	typeref:typename:ImTextureID
TexPixelsAlpha8	interface/imgui.h	/^    unsigned char*              TexPixelsAlpha8;    \/\/ 1 component per pixel, each component i/;"	m	struct:ImFontAtlas	typeref:typename:unsigned char *
TexPixelsRGBA32	interface/imgui.h	/^    unsigned int*               TexPixelsRGBA32;    \/\/ 4 component per pixel, each component i/;"	m	struct:ImFontAtlas	typeref:typename:unsigned int *
TexUvLines	interface/imgui.h	/^    ImVec4                      TexUvLines[IM_DRAWLIST_TEX_LINES_WIDTH_MAX + 1];  \/\/ UVs for b/;"	m	struct:ImFontAtlas	typeref:typename:ImVec4[]
TexUvLines	interface/imgui_internal.h	/^    const ImVec4*   TexUvLines;                 \/\/ UV of anti-aliased lines in the atlas$/;"	m	struct:ImDrawListSharedData	typeref:typename:const ImVec4 *
TexUvScale	interface/imgui.h	/^    ImVec2                      TexUvScale;         \/\/ = (1.0f\/TexWidth, 1.0f\/TexHeight)$/;"	m	struct:ImFontAtlas	typeref:typename:ImVec2
TexUvWhitePixel	interface/imgui.h	/^    ImVec2                      TexUvWhitePixel;    \/\/ Texture coordinates to a white pixel$/;"	m	struct:ImFontAtlas	typeref:typename:ImVec2
TexUvWhitePixel	interface/imgui_internal.h	/^    ImVec2          TexUvWhitePixel;            \/\/ UV of white pixel in the atlas$/;"	m	struct:ImDrawListSharedData	typeref:typename:ImVec2
TexWidth	interface/imgui.h	/^    int                         TexWidth;           \/\/ Texture width calculated during Build()/;"	m	struct:ImFontAtlas	typeref:typename:int
Text	interface/imgui_widgets.cpp	/^void ImGui::Text(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
TextA	interface/imgui_internal.h	/^    ImVector<char>          TextA;                  \/\/ temporary UTF8 buffer for callbacks and/;"	m	struct:ImGuiInputTextState	typeref:typename:ImVector<char>
TextAIsValid	interface/imgui_internal.h	/^    bool                    TextAIsValid;           \/\/ temporary UTF8 buffer is not initially /;"	m	struct:ImGuiInputTextState	typeref:typename:bool
TextColored	interface/imgui_widgets.cpp	/^void ImGui::TextColored(const ImVec4& col, const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
TextColoredV	interface/imgui_widgets.cpp	/^void ImGui::TextColoredV(const ImVec4& col, const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
TextDisabled	interface/imgui_widgets.cpp	/^void ImGui::TextDisabled(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
TextDisabledV	interface/imgui_widgets.cpp	/^void ImGui::TextDisabledV(const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
TextEx	interface/imgui_widgets.cpp	/^void ImGui::TextEx(const char* text, const char* text_end, ImGuiTextFlags flags)$/;"	f	class:ImGui	typeref:typename:void
TextUnformatted	interface/imgui_widgets.cpp	/^void ImGui::TextUnformatted(const char* text, const char* text_end)$/;"	f	class:ImGui	typeref:typename:void
TextV	interface/imgui_widgets.cpp	/^void ImGui::TextV(const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
TextW	interface/imgui_internal.h	/^    ImVector<ImWchar>       TextW;                  \/\/ edit buffer, we need to persist but can/;"	m	struct:ImGuiInputTextState	typeref:typename:ImVector<ImWchar>
TextWrapPos	interface/imgui_internal.h	/^    float                   TextWrapPos;            \/\/ == TextWrapPosStack.back() [empty == -1/;"	m	struct:ImGuiWindowTempData	typeref:typename:float
TextWrapPosStack	interface/imgui_internal.h	/^    ImVector<float>         TextWrapPosStack;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVector<float>
TextWrapped	interface/imgui_widgets.cpp	/^void ImGui::TextWrapped(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
TextWrappedV	interface/imgui_widgets.cpp	/^void ImGui::TextWrappedV(const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
TextureId	interface/imgui.h	/^    ImTextureID     TextureId;          \/\/ 4-8  \/\/ User-provided texture ID. Set by user in /;"	m	struct:ImDrawCmd	typeref:typename:ImTextureID
Time	interface/imgui_internal.h	/^    double                  Time;$/;"	m	struct:ImGuiContext	typeref:typename:double
TitleBarHeight	interface/imgui_internal.h	/^    float       TitleBarHeight() const  { ImGuiContext& g = *GImGui; return (Flags & ImGuiWindow/;"	f	struct:ImGuiWindow	typeref:typename:float
TitleBarRect	interface/imgui_internal.h	/^    ImRect      TitleBarRect() const    { return ImRect(Pos, ImVec2(Pos.x + SizeFull.x, Pos.y + /;"	f	struct:ImGuiWindow	typeref:typename:ImRect
ToVec4	interface/imgui_internal.h	/^    ImVec4      ToVec4() const                      { return ImVec4(Min.x, Min.y, Max.x, Max.y);/;"	f	struct:ImRect	typeref:typename:ImVec4
TooltipOverrideCount	interface/imgui_internal.h	/^    int                     TooltipOverrideCount;$/;"	m	struct:ImGuiContext	typeref:typename:int
TotalIdxCount	interface/imgui.h	/^    int             TotalIdxCount;          \/\/ For convenience, sum of all ImDrawList's IdxBuf/;"	m	struct:ImDrawData	typeref:typename:int
TotalVtxCount	interface/imgui.h	/^    int             TotalVtxCount;          \/\/ For convenience, sum of all ImDrawList's VtxBuf/;"	m	struct:ImDrawData	typeref:typename:int
TouchExtraPadding	interface/imgui.h	/^    ImVec2      TouchExtraPadding;          \/\/ Expand reactive bounding box for touch-based sy/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
Translate	interface/imgui_internal.h	/^    void        Translate(const ImVec2& d)          { Min.x += d.x; Min.y += d.y; Max.x += d.x; /;"	f	struct:ImRect	typeref:typename:void
TranslateX	interface/imgui_internal.h	/^    void        TranslateX(float dx)                { Min.x += dx; Max.x += dx; }$/;"	f	struct:ImRect	typeref:typename:void
TranslateY	interface/imgui_internal.h	/^    void        TranslateY(float dy)                { Min.y += dy; Max.y += dy; }$/;"	f	struct:ImRect	typeref:typename:void
TreeAdvanceToLabelPos	interface/imgui.h	/^    static inline void  TreeAdvanceToLabelPos()               { SetCursorPosX(GetCursorPosX() + /;"	f	namespace:ImGui	typeref:typename:void
TreeDepth	interface/imgui_internal.h	/^    int                     TreeDepth;              \/\/ Current tree depth.$/;"	m	struct:ImGuiWindowTempData	typeref:typename:int
TreeJumpToParentOnPopMask	interface/imgui_internal.h	/^    ImU32                   TreeJumpToParentOnPopMask; \/\/ Store a copy of !g.NavIdIsAlive for /;"	m	struct:ImGuiWindowTempData	typeref:typename:ImU32
TreeNode	interface/imgui_widgets.cpp	/^bool ImGui::TreeNode(const char* label)$/;"	f	class:ImGui	typeref:typename:bool
TreeNode	interface/imgui_widgets.cpp	/^bool ImGui::TreeNode(const char* str_id, const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:bool
TreeNode	interface/imgui_widgets.cpp	/^bool ImGui::TreeNode(const void* ptr_id, const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:bool
TreeNodeBehavior	interface/imgui_widgets.cpp	/^bool ImGui::TreeNodeBehavior(ImGuiID id, ImGuiTreeNodeFlags flags, const char* label, const char/;"	f	class:ImGui	typeref:typename:bool
TreeNodeBehaviorIsOpen	interface/imgui_widgets.cpp	/^bool ImGui::TreeNodeBehaviorIsOpen(ImGuiID id, ImGuiTreeNodeFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
TreeNodeEx	interface/imgui_widgets.cpp	/^bool ImGui::TreeNodeEx(const char* label, ImGuiTreeNodeFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
TreeNodeEx	interface/imgui_widgets.cpp	/^bool ImGui::TreeNodeEx(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:bool
TreeNodeEx	interface/imgui_widgets.cpp	/^bool ImGui::TreeNodeEx(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:bool
TreeNodeExV	interface/imgui_widgets.cpp	/^bool ImGui::TreeNodeExV(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list a/;"	f	class:ImGui	typeref:typename:bool
TreeNodeExV	interface/imgui_widgets.cpp	/^bool ImGui::TreeNodeExV(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list a/;"	f	class:ImGui	typeref:typename:bool
TreeNodeV	interface/imgui_widgets.cpp	/^bool ImGui::TreeNodeV(const char* str_id, const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:bool
TreeNodeV	interface/imgui_widgets.cpp	/^bool ImGui::TreeNodeV(const void* ptr_id, const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:bool
TreePop	interface/imgui_widgets.cpp	/^void ImGui::TreePop()$/;"	f	class:ImGui	typeref:typename:void
TreePush	interface/imgui_widgets.cpp	/^void ImGui::TreePush(const char* str_id)$/;"	f	class:ImGui	typeref:typename:void
TreePush	interface/imgui_widgets.cpp	/^void ImGui::TreePush(const void* ptr_id)$/;"	f	class:ImGui	typeref:typename:void
TreePushOverrideID	interface/imgui_widgets.cpp	/^void ImGui::TreePushOverrideID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
Type	interface/imgui.cpp	/^    ImGuiDataType   Type;$/;"	m	struct:ImGuiStyleVarInfo	typeref:typename:ImGuiDataType	file:
Type	interface/imgui_internal.h	/^    ImGuiContextHookType        Type;$/;"	m	struct:ImGuiContextHook	typeref:typename:ImGuiContextHookType
TypeHash	interface/imgui_internal.h	/^    ImGuiID     TypeHash;       \/\/ == ImHashStr(TypeName)$/;"	m	struct:ImGuiSettingsHandler	typeref:typename:ImGuiID
TypeName	interface/imgui_internal.h	/^    const char* TypeName;       \/\/ Short description stored in .ini file. Disallowed character/;"	m	struct:ImGuiSettingsHandler	typeref:typename:const char *
U0	interface/imgui.h	/^    float           U0, V0, U1, V1;     \/\/ Texture coordinates$/;"	m	struct:ImFontGlyph	typeref:typename:float
U1	interface/imgui.h	/^    float           U0, V0, U1, V1;     \/\/ Texture coordinates$/;"	m	struct:ImFontGlyph	typeref:typename:float
UND	arm.hpp	/^            UND,$/;"	e	enum:Cpu::Mode
UNDEFINED_INSTRUCTION	arm.hpp	/^            UNDEFINED_INSTRUCTION,$/;"	e	enum:Cpu::Interrupt
USR	arm.hpp	/^            USR,$/;"	e	enum:Cpu::Mode
Unindent	interface/imgui.cpp	/^void ImGui::Unindent(float indent_w)$/;"	f	class:ImGui	typeref:typename:void
UnpackAccumulativeOffsetsIntoRanges	interface/imgui_draw.cpp	/^static void UnpackAccumulativeOffsetsIntoRanges(int base_codepoint, const short* accumulative_of/;"	f	typeref:typename:void	file:
UnpackBitVectorToFlatIndexList	interface/imgui_draw.cpp	/^static void UnpackBitVectorToFlatIndexList(const ImBitVector* in, ImVector<int>* out)$/;"	f	typeref:typename:void	file:
Update	interface/imgui_widgets.cpp	/^void ImGuiMenuColumns::Update(int count, float spacing, bool clear)$/;"	f	class:ImGuiMenuColumns	typeref:typename:void
UpdateDebugToolItemPicker	interface/imgui.cpp	/^void ImGui::UpdateDebugToolItemPicker()$/;"	f	class:ImGui	typeref:typename:void
UpdateHoveredWindowAndCaptureFlags	interface/imgui.cpp	/^void ImGui::UpdateHoveredWindowAndCaptureFlags()$/;"	f	class:ImGui	typeref:typename:void
UpdateMouseInputs	interface/imgui.cpp	/^static void ImGui::UpdateMouseInputs()$/;"	f	class:ImGui	typeref:typename:void	file:
UpdateMouseMovingWindowEndFrame	interface/imgui.cpp	/^void ImGui::UpdateMouseMovingWindowEndFrame()$/;"	f	class:ImGui	typeref:typename:void
UpdateMouseMovingWindowNewFrame	interface/imgui.cpp	/^void ImGui::UpdateMouseMovingWindowNewFrame()$/;"	f	class:ImGui	typeref:typename:void
UpdateMouseWheel	interface/imgui.cpp	/^void ImGui::UpdateMouseWheel()$/;"	f	class:ImGui	typeref:typename:void
UpdateSettings	interface/imgui.cpp	/^void ImGui::UpdateSettings()$/;"	f	class:ImGui	typeref:typename:void
UpdateTabFocus	interface/imgui.cpp	/^void ImGui::UpdateTabFocus()$/;"	f	class:ImGui	typeref:typename:void
UpdateWindowManualResize	interface/imgui.cpp	/^static bool ImGui::UpdateWindowManualResize(ImGuiWindow* window, const ImVec2& size_auto_fit, in/;"	f	class:ImGui	typeref:typename:bool	file:
UpdateWindowParentAndRootLinks	interface/imgui.cpp	/^void ImGui::UpdateWindowParentAndRootLinks(ImGuiWindow* window, ImGuiWindowFlags flags, ImGuiWin/;"	f	class:ImGui	typeref:typename:void
Used4kPagesMap	interface/imgui.h	/^    ImU8                        Used4kPagesMap[(IM_UNICODE_CODEPOINT_MAX+1)\/4096\/8]; \/\/ 2 by/;"	m	struct:ImFont	typeref:typename:ImU8[]
UsedChars	interface/imgui.h	/^    ImVector<ImU32> UsedChars;            \/\/ Store 1-bit per Unicode code point (0=unused, 1=u/;"	m	struct:ImFontGlyphRangesBuilder	typeref:typename:ImVector<ImU32>
UserCallback	interface/imgui.h	/^    ImDrawCallback  UserCallback;       \/\/ 4-8  \/\/ If != NULL, call the function instead of /;"	m	struct:ImDrawCmd	typeref:typename:ImDrawCallback
UserCallback	interface/imgui_internal.h	/^    ImGuiInputTextCallback  UserCallback;           \/\/ "$/;"	m	struct:ImGuiInputTextState	typeref:typename:ImGuiInputTextCallback
UserCallbackData	interface/imgui.h	/^    void*           UserCallbackData;   \/\/ 4-8  \/\/ The draw callback code can access this.$/;"	m	struct:ImDrawCmd	typeref:typename:void *
UserCallbackData	interface/imgui_internal.h	/^    void*                   UserCallbackData;       \/\/ "$/;"	m	struct:ImGuiInputTextState	typeref:typename:void *
UserData	interface/imgui.h	/^    void*               UserData;       \/\/ What user passed to InputText()      \/\/ Read-only$/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:void *
UserData	interface/imgui.h	/^    void*       UserData;                       \/\/ = NULL           \/\/ Store your own data f/;"	m	struct:ImGuiIO	typeref:typename:void *
UserData	interface/imgui.h	/^    void*   UserData;       \/\/ Read-only.   What user passed to SetNextWindowSizeConstraints()$/;"	m	struct:ImGuiSizeCallbackData	typeref:typename:void *
UserData	interface/imgui_internal.h	/^    void*                       UserData;$/;"	m	struct:ImGuiContextHook	typeref:typename:void *
UserData	interface/imgui_internal.h	/^    void*       UserData;$/;"	m	struct:ImGuiSettingsHandler	typeref:typename:void *
UserFlags	interface/imgui_internal.h	/^    ImGuiInputTextFlags     UserFlags;              \/\/ Temporarily set while we call user's ca/;"	m	struct:ImGuiInputTextState	typeref:typename:ImGuiInputTextFlags
V0	interface/imgui.h	/^    float           U0, V0, U1, V1;     \/\/ Texture coordinates$/;"	m	struct:ImFontGlyph	typeref:typename:float
V1	interface/imgui.h	/^    float           U0, V0, U1, V1;     \/\/ Texture coordinates$/;"	m	struct:ImFontGlyph	typeref:typename:float
VSliderFloat	interface/imgui_widgets.cpp	/^bool ImGui::VSliderFloat(const char* label, const ImVec2& size, float* v, float v_min, float v_m/;"	f	class:ImGui	typeref:typename:bool
VSliderInt	interface/imgui_widgets.cpp	/^bool ImGui::VSliderInt(const char* label, const ImVec2& size, int* v, int v_min, int v_max, cons/;"	f	class:ImGui	typeref:typename:bool
VSliderScalar	interface/imgui_widgets.cpp	/^bool ImGui::VSliderScalar(const char* label, const ImVec2& size, ImGuiDataType data_type, void* /;"	f	class:ImGui	typeref:typename:bool
Valid	interface/imgui.h	/^    bool            Valid;                  \/\/ Only valid after Render() is called and before /;"	m	struct:ImDrawData	typeref:typename:bool
Value	interface/imgui.h	/^    ImVec4              Value;$/;"	m	struct:ImColor	typeref:typename:ImVec4
Value	interface/imgui_widgets.cpp	/^void ImGui::Value(const char* prefix, bool b)$/;"	f	class:ImGui	typeref:typename:void
Value	interface/imgui_widgets.cpp	/^void ImGui::Value(const char* prefix, float v, const char* float_format)$/;"	f	class:ImGui	typeref:typename:void
Value	interface/imgui_widgets.cpp	/^void ImGui::Value(const char* prefix, int v)$/;"	f	class:ImGui	typeref:typename:void
Value	interface/imgui_widgets.cpp	/^void ImGui::Value(const char* prefix, unsigned int v)$/;"	f	class:ImGui	typeref:typename:void
Values	interface/imgui_widgets.cpp	/^    const float* Values;$/;"	m	struct:ImGuiPlotArrayGetterData	typeref:typename:const float *	file:
VarIdx	interface/imgui_internal.h	/^    ImGuiStyleVar   VarIdx;$/;"	m	struct:ImGuiStyleMod	typeref:typename:ImGuiStyleVar
VertexBuffer	interface/imgui_impl_vulkan.cpp	/^    VkBuffer            VertexBuffer;$/;"	m	struct:ImGui_ImplVulkanH_FrameRenderBuffers	typeref:typename:VkBuffer	file:
VertexBufferMemory	interface/imgui_impl_vulkan.cpp	/^    VkDeviceMemory      VertexBufferMemory;$/;"	m	struct:ImGui_ImplVulkanH_FrameRenderBuffers	typeref:typename:VkDeviceMemory	file:
VertexBufferSize	interface/imgui_impl_vulkan.cpp	/^    VkDeviceSize        VertexBufferSize;$/;"	m	struct:ImGui_ImplVulkanH_FrameRenderBuffers	typeref:typename:VkDeviceSize	file:
Visible	interface/imgui.h	/^    unsigned int    Visible : 1;        \/\/ Flag to allow early out when rendering$/;"	m	struct:ImFontGlyph	typeref:typename:unsigned int:1
VisibleTabId	interface/imgui_internal.h	/^    ImGuiID             VisibleTabId;           \/\/ Can occasionally be != SelectedTabId (e.g. /;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiID
VisibleTabWasSubmitted	interface/imgui_internal.h	/^    bool                VisibleTabWasSubmitted;$/;"	m	struct:ImGuiTabBar	typeref:typename:bool
VtxBuffer	interface/imgui.h	/^    ImVector<ImDrawVert>    VtxBuffer;          \/\/ Vertex buffer.$/;"	m	struct:ImDrawList	typeref:typename:ImVector<ImDrawVert>
VtxOffset	interface/imgui.h	/^    unsigned int    VtxOffset;          \/\/ 4    \/\/ Start offset in vertex buffer. ImGuiBacke/;"	m	struct:ImDrawCmd	typeref:typename:unsigned int
WIN32_LEAN_AND_MEAN	interface/imgui.cpp	/^#define WIN32_LEAN_AND_MEAN$/;"	d	file:
WINDOWS_MOUSE_WHEEL_SCROLL_LOCK_TIMER	interface/imgui.cpp	/^static const float WINDOWS_MOUSE_WHEEL_SCROLL_LOCK_TIMER    = 2.00f;    \/\/ Lock scrolled windo/;"	v	typeref:typename:const float	file:
WINDOWS_RESIZE_FROM_EDGES_FEEDBACK_TIMER	interface/imgui.cpp	/^static const float WINDOWS_RESIZE_FROM_EDGES_FEEDBACK_TIMER = 0.04f;    \/\/ Reduce visual noise/;"	v	typeref:typename:const float	file:
WINDOWS_RESIZE_FROM_EDGES_HALF_THICKNESS	interface/imgui.cpp	/^static const float WINDOWS_RESIZE_FROM_EDGES_HALF_THICKNESS = 4.0f;     \/\/ Extend outside and /;"	v	typeref:typename:const float	file:
WORD	arm.hpp	/^    WORD,$/;"	e	enum:Width
WRT_Content	interface/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anon849780f10103	file:
WRT_ContentRegionRect	interface/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anon849780f10103	file:
WRT_Count	interface/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anon849780f10103	file:
WRT_InnerClipRect	interface/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anon849780f10103	file:
WRT_InnerRect	interface/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anon849780f10103	file:
WRT_OuterRect	interface/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anon849780f10103	file:
WRT_OuterRectClipped	interface/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anon849780f10103	file:
WRT_WorkRect	interface/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anon849780f10103	file:
WantApply	interface/imgui_internal.h	/^    bool        WantApply;      \/\/ Set when loaded from .ini data (to enable merging\/loading /;"	m	struct:ImGuiWindowSettings	typeref:typename:bool
WantCaptureKeyboard	interface/imgui.h	/^    bool        WantCaptureKeyboard;            \/\/ Set when Dear ImGui will use keyboard input/;"	m	struct:ImGuiIO	typeref:typename:bool
WantCaptureKeyboardNextFrame	interface/imgui_internal.h	/^    int                     WantCaptureKeyboardNextFrame;$/;"	m	struct:ImGuiContext	typeref:typename:int
WantCaptureMouse	interface/imgui.h	/^    bool        WantCaptureMouse;               \/\/ Set when Dear ImGui will use mouse inputs, /;"	m	struct:ImGuiIO	typeref:typename:bool
WantCaptureMouseNextFrame	interface/imgui_internal.h	/^    int                     WantCaptureMouseNextFrame;          \/\/ Explicit capture via Captur/;"	m	struct:ImGuiContext	typeref:typename:int
WantClose	interface/imgui_internal.h	/^    bool                WantClose;              \/\/ Marked as closed by SetTabItemClosed()$/;"	m	struct:ImGuiTabItem	typeref:typename:bool
WantCollapseToggle	interface/imgui_internal.h	/^    bool                    WantCollapseToggle;$/;"	m	struct:ImGuiWindow	typeref:typename:bool
WantLayout	interface/imgui_internal.h	/^    bool                WantLayout;$/;"	m	struct:ImGuiTabBar	typeref:typename:bool
WantSaveIniSettings	interface/imgui.h	/^    bool        WantSaveIniSettings;            \/\/ When manual .ini load\/save is active (io.I/;"	m	struct:ImGuiIO	typeref:typename:bool
WantSetMousePos	interface/imgui.h	/^    bool        WantSetMousePos;                \/\/ MousePos has been altered, backend should r/;"	m	struct:ImGuiIO	typeref:typename:bool
WantTextInput	interface/imgui.h	/^    bool        WantTextInput;                  \/\/ Mobile\/console: when set, you may display /;"	m	struct:ImGuiIO	typeref:typename:bool
WantTextInputNextFrame	interface/imgui_internal.h	/^    int                     WantTextInputNextFrame;$/;"	m	struct:ImGuiContext	typeref:typename:int
WasActive	interface/imgui_internal.h	/^    bool                    WasActive;$/;"	m	struct:ImGuiWindow	typeref:typename:bool
WheelingWindow	interface/imgui_internal.h	/^    ImGuiWindow*            WheelingWindow;                     \/\/ Track the window we started/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
WheelingWindowRefMousePos	interface/imgui_internal.h	/^    ImVec2                  WheelingWindowRefMousePos;$/;"	m	struct:ImGuiContext	typeref:typename:ImVec2
WheelingWindowTimer	interface/imgui_internal.h	/^    float                   WheelingWindowTimer;$/;"	m	struct:ImGuiContext	typeref:typename:float
Width	arm.hpp	/^enum class Width : u8 {$/;"	g	typeref:typename:u8
Width	interface/imgui.h	/^    unsigned short  Width, Height;  \/\/ Input    \/\/ Desired rectangle dimension$/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:unsigned short
Width	interface/imgui_impl_vulkan.h	/^    int                 Width;$/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:int
Width	interface/imgui_internal.h	/^    float                       Width;          \/\/ Set by SetNextItemWidth()$/;"	m	struct:ImGuiNextItemData	typeref:typename:float
Width	interface/imgui_internal.h	/^    float               Width;                  \/\/ Width currently displayed$/;"	m	struct:ImGuiTabItem	typeref:typename:float
Width	interface/imgui_internal.h	/^    float       Width, NextWidth;$/;"	m	struct:ImGuiMenuColumns	typeref:typename:float
Width	interface/imgui_internal.h	/^    float       Width;$/;"	m	struct:ImGuiShrinkWidthItem	typeref:typename:float
Width	interface/imgui_widgets.cpp	/^    float               Width;                  \/\/ Sum of width of tabs in this section (after/;"	m	struct:ImGuiTabBarSection	typeref:typename:float	file:
WidthAllTabs	interface/imgui_internal.h	/^    float               WidthAllTabs;           \/\/ Actual width of all tabs (locked during lay/;"	m	struct:ImGuiTabBar	typeref:typename:float
WidthAllTabsIdeal	interface/imgui_internal.h	/^    float               WidthAllTabsIdeal;      \/\/ Ideal width if all tabs were visible and no/;"	m	struct:ImGuiTabBar	typeref:typename:float
Window	interface/imgui_internal.h	/^    ImGuiWindow*        Window;         \/\/ Resolved on BeginPopup() - may stay unresolved if u/;"	m	struct:ImGuiPopupData	typeref:typename:ImGuiWindow *
Window	interface/imgui_internal.h	/^    ImGuiWindow*    Window;             \/\/ Best candidate window$/;"	m	struct:ImGuiNavMoveResult	typeref:typename:ImGuiWindow *
WindowBorderSize	interface/imgui.h	/^    float       WindowBorderSize;           \/\/ Thickness of border around windows. Generally s/;"	m	struct:ImGuiStyle	typeref:typename:float
WindowBorderSize	interface/imgui_internal.h	/^    float                   WindowBorderSize;                   \/\/ Window border size at the t/;"	m	struct:ImGuiWindow	typeref:typename:float
WindowMenuButtonPosition	interface/imgui.h	/^    ImGuiDir    WindowMenuButtonPosition;   \/\/ Side of the collapsing\/docking button in the t/;"	m	struct:ImGuiStyle	typeref:typename:ImGuiDir
WindowMinSize	interface/imgui.h	/^    ImVec2      WindowMinSize;              \/\/ Minimum window size. This is a global setting. /;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
WindowPadding	interface/imgui.h	/^    ImVec2      WindowPadding;              \/\/ Padding within a window.$/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
WindowPadding	interface/imgui_internal.h	/^    ImVec2                  WindowPadding;                      \/\/ Window padding at the time /;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
WindowRounding	interface/imgui.h	/^    float       WindowRounding;             \/\/ Radius of window corners rounding. Set to 0.0f /;"	m	struct:ImGuiStyle	typeref:typename:float
WindowRounding	interface/imgui_internal.h	/^    float                   WindowRounding;                     \/\/ Window rounding at the time/;"	m	struct:ImGuiWindow	typeref:typename:float
WindowSettingsHandler_ApplyAll	interface/imgui.cpp	/^static void WindowSettingsHandler_ApplyAll(ImGuiContext* ctx, ImGuiSettingsHandler*)$/;"	f	typeref:typename:void	file:
WindowSettingsHandler_ClearAll	interface/imgui.cpp	/^static void WindowSettingsHandler_ClearAll(ImGuiContext* ctx, ImGuiSettingsHandler*)$/;"	f	typeref:typename:void	file:
WindowSettingsHandler_ReadLine	interface/imgui.cpp	/^static void WindowSettingsHandler_ReadLine(ImGuiContext*, ImGuiSettingsHandler*, void* entry, co/;"	f	typeref:typename:void	file:
WindowSettingsHandler_ReadOpen	interface/imgui.cpp	/^static void* WindowSettingsHandler_ReadOpen(ImGuiContext*, ImGuiSettingsHandler*, const char* na/;"	f	typeref:typename:void *	file:
WindowSettingsHandler_WriteAll	interface/imgui.cpp	/^static void WindowSettingsHandler_WriteAll(ImGuiContext* ctx, ImGuiSettingsHandler* handler, ImG/;"	f	typeref:typename:void	file:
WindowTitleAlign	interface/imgui.h	/^    ImVec2      WindowTitleAlign;           \/\/ Alignment for title bar text. Defaults to (0.0f/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
Windows	interface/imgui_internal.h	/^    ImVector<ImGuiWindow*>  Windows;                            \/\/ Windows, sorted in display /;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiWindow * >
WindowsActiveCount	interface/imgui_internal.h	/^    int                     WindowsActiveCount;                 \/\/ Number of unique windows su/;"	m	struct:ImGuiContext	typeref:typename:int
WindowsById	interface/imgui_internal.h	/^    ImGuiStorage            WindowsById;                        \/\/ Map window's ImGuiID to ImG/;"	m	struct:ImGuiContext	typeref:typename:ImGuiStorage
WindowsFocusOrder	interface/imgui_internal.h	/^    ImVector<ImGuiWindow*>  WindowsFocusOrder;                  \/\/ Windows, sorted in focus or/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiWindow * >
WindowsTempSortBuffer	interface/imgui_internal.h	/^    ImVector<ImGuiWindow*>  WindowsTempSortBuffer;              \/\/ Temporary buffer used in En/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiWindow * >
WithinEndChild	interface/imgui_internal.h	/^    bool                    WithinEndChild;                     \/\/ Set within EndChild()$/;"	m	struct:ImGuiContext	typeref:typename:bool
WithinFrameScope	interface/imgui_internal.h	/^    bool                    WithinFrameScope;                   \/\/ Set by NewFrame(), cleared /;"	m	struct:ImGuiContext	typeref:typename:bool
WithinFrameScopeWithImplicitWindow	interface/imgui_internal.h	/^    bool                    WithinFrameScopeWithImplicitWindow; \/\/ Set by NewFrame(), cleared /;"	m	struct:ImGuiContext	typeref:typename:bool
WorkRect	interface/imgui_internal.h	/^    ImRect                  WorkRect;                           \/\/ Initially covers the whole /;"	m	struct:ImGuiWindow	typeref:typename:ImRect
WriteAccessed	interface/imgui_internal.h	/^    bool                    WriteAccessed;                      \/\/ Set to true when any widget/;"	m	struct:ImGuiWindow	typeref:typename:bool
WriteAllFn	interface/imgui_internal.h	/^    void        (*WriteAllFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler, ImGuiTextBuffer*/;"	m	struct:ImGuiSettingsHandler	typeref:typename:void (*)(ImGuiContext * ctx,ImGuiSettingsHandler * handler,ImGuiTextBuffer * out_buf)
X	interface/imgui.h	/^    unsigned short  X, Y;           \/\/ Output   \/\/ Packed position in Atlas$/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:unsigned short
X0	interface/imgui.h	/^    float           X0, Y0, X1, Y1;     \/\/ Glyph corners$/;"	m	struct:ImFontGlyph	typeref:typename:float
X1	interface/imgui.h	/^    float           X0, Y0, X1, Y1;     \/\/ Glyph corners$/;"	m	struct:ImFontGlyph	typeref:typename:float
Y	interface/imgui.h	/^    unsigned short  X, Y;           \/\/ Output   \/\/ Packed position in Atlas$/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:unsigned short
Y0	interface/imgui.h	/^    float           X0, Y0, X1, Y1;     \/\/ Glyph corners$/;"	m	struct:ImFontGlyph	typeref:typename:float
Y1	interface/imgui.h	/^    float           X0, Y0, X1, Y1;     \/\/ Glyph corners$/;"	m	struct:ImFontGlyph	typeref:typename:float
ZERO	arm.hpp	/^            ZERO,$/;"	e	enum:Cpu::Flag
_CRT_SECURE_NO_WARNINGS	interface/imgui.cpp	/^#define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_CRT_SECURE_NO_WARNINGS	interface/imgui_draw.cpp	/^#define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_CRT_SECURE_NO_WARNINGS	interface/imgui_widgets.cpp	/^#define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_Channels	interface/imgui.h	/^    ImVector<ImDrawChannel>     _Channels;   \/\/ Draw channels (not resized down so _Count migh/;"	m	struct:ImDrawListSplitter	typeref:typename:ImVector<ImDrawChannel>
_ClearFreeMemory	interface/imgui_draw.cpp	/^void ImDrawList::_ClearFreeMemory()$/;"	f	class:ImDrawList	typeref:typename:void
_ClipRectStack	interface/imgui.h	/^    ImVector<ImVec4>        _ClipRectStack;     \/\/ [Internal]$/;"	m	struct:ImDrawList	typeref:typename:ImVector<ImVec4>
_CmdBuffer	interface/imgui.h	/^    ImVector<ImDrawCmd>         _CmdBuffer;$/;"	m	struct:ImDrawChannel	typeref:typename:ImVector<ImDrawCmd>
_CmdHeader	interface/imgui.h	/^    ImDrawCmd               _CmdHeader;         \/\/ [Internal] Template of active commands. Fie/;"	m	struct:ImDrawList	typeref:typename:ImDrawCmd
_Count	interface/imgui.h	/^    int                         _Count;      \/\/ Number of active channels (1+)$/;"	m	struct:ImDrawListSplitter	typeref:typename:int
_Current	interface/imgui.h	/^    int                         _Current;    \/\/ Current channel number (0)$/;"	m	struct:ImDrawListSplitter	typeref:typename:int
_Data	interface/imgui.h	/^    const ImDrawListSharedData* _Data;          \/\/ Pointer to shared draw data (you can use Im/;"	m	struct:ImDrawList	typeref:typename:const ImDrawListSharedData *
_IdxBuffer	interface/imgui.h	/^    ImVector<ImDrawIdx>         _IdxBuffer;$/;"	m	struct:ImDrawChannel	typeref:typename:ImVector<ImDrawIdx>
_IdxWritePtr	interface/imgui.h	/^    ImDrawIdx*              _IdxWritePtr;       \/\/ [Internal] point within IdxBuffer.Data afte/;"	m	struct:ImDrawList	typeref:typename:ImDrawIdx *
_OnChangedClipRect	interface/imgui_draw.cpp	/^void ImDrawList::_OnChangedClipRect()$/;"	f	class:ImDrawList	typeref:typename:void
_OnChangedTextureID	interface/imgui_draw.cpp	/^void ImDrawList::_OnChangedTextureID()$/;"	f	class:ImDrawList	typeref:typename:void
_OnChangedVtxOffset	interface/imgui_draw.cpp	/^void ImDrawList::_OnChangedVtxOffset()$/;"	f	class:ImDrawList	typeref:typename:void
_OwnerName	interface/imgui.h	/^    const char*             _OwnerName;         \/\/ Pointer to owner window's name for debuggin/;"	m	struct:ImDrawList	typeref:typename:const char *
_Path	interface/imgui.h	/^    ImVector<ImVec2>        _Path;              \/\/ [Internal] current path building$/;"	m	struct:ImDrawList	typeref:typename:ImVector<ImVec2>
_PopUnusedDrawCmd	interface/imgui_draw.cpp	/^void ImDrawList::_PopUnusedDrawCmd()$/;"	f	class:ImDrawList	typeref:typename:void
_ResetForNewFrame	interface/imgui_draw.cpp	/^void ImDrawList::_ResetForNewFrame()$/;"	f	class:ImDrawList	typeref:typename:void
_Splitter	interface/imgui.h	/^    ImDrawListSplitter      _Splitter;          \/\/ [Internal] for channels api (note: prefer u/;"	m	struct:ImDrawList	typeref:typename:ImDrawListSplitter
_TextureIdStack	interface/imgui.h	/^    ImVector<ImTextureID>   _TextureIdStack;    \/\/ [Internal]$/;"	m	struct:ImDrawList	typeref:typename:ImVector<ImTextureID>
_VtxCurrentIdx	interface/imgui.h	/^    unsigned int            _VtxCurrentIdx;     \/\/ [Internal] Generally == VtxBuffer.Size unle/;"	m	struct:ImDrawList	typeref:typename:unsigned int
_VtxWritePtr	interface/imgui.h	/^    ImDrawVert*             _VtxWritePtr;       \/\/ [Internal] point within VtxBuffer.Data afte/;"	m	struct:ImDrawList	typeref:typename:ImDrawVert *
__STB_INCLUDE_STB_TRUETYPE_H__	interface/imstb_truetype.h	/^#define __STB_INCLUDE_STB_TRUETYPE_H__$/;"	d
__anon0a8ecdc40108	interface/imstb_textedit.h	/^{$/;"	s
__anon0a8ecdc40208	interface/imstb_textedit.h	/^{$/;"	s
__anon0a8ecdc40308	interface/imstb_textedit.h	/^{$/;"	s
__anon0a8ecdc40408	interface/imstb_textedit.h	/^{$/;"	s
__anon0a8ecdc40508	interface/imstb_textedit.h	/^{$/;"	s
__anon2d41b9d6010a	interface/imgui.h	/^        union { int val_i; float val_f; void* val_p; };$/;"	u	struct:ImGuiStorage::ImGuiStoragePair
__anon849780f10103	interface/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	g	function:ImGui::ShowMetricsWindow	file:
__anon849780f10203	interface/imgui.cpp	/^    enum { TRT_OuterRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_BackgroundClipR/;"	g	function:ImGui::ShowMetricsWindow	file:
__anonba8239e60103	interface/imstb_rectpack.h	/^{$/;"	g
__anonba8239e60203	interface/imstb_rectpack.h	/^{$/;"	g
__anonba8239e60308	interface/imstb_rectpack.h	/^{$/;"	s
__anonc0d10b52010a	interface/imgui_internal.h	/^    union           { int BackupInt[2]; float BackupFloat[2]; };$/;"	u	struct:ImGuiStyleMod
__anond1ee77bb0108	interface/imstb_truetype.h	/^{$/;"	s
__anond1ee77bb0208	interface/imstb_truetype.h	/^{$/;"	s
__anond1ee77bb0308	interface/imstb_truetype.h	/^{$/;"	s
__anond1ee77bb0408	interface/imstb_truetype.h	/^{$/;"	s
__anond1ee77bb0508	interface/imstb_truetype.h	/^{$/;"	s
__anond1ee77bb0603	interface/imstb_truetype.h	/^   enum {$/;"	g
__anond1ee77bb0708	interface/imstb_truetype.h	/^   {$/;"	s
__anond1ee77bb0808	interface/imstb_truetype.h	/^{$/;"	s
__anond1ee77bb0903	interface/imstb_truetype.h	/^enum { \/\/ platformID$/;"	g
__anond1ee77bb0a03	interface/imstb_truetype.h	/^enum { \/\/ encodingID for STBTT_PLATFORM_ID_UNICODE$/;"	g
__anond1ee77bb0b03	interface/imstb_truetype.h	/^enum { \/\/ encodingID for STBTT_PLATFORM_ID_MICROSOFT$/;"	g
__anond1ee77bb0c03	interface/imstb_truetype.h	/^enum { \/\/ encodingID for STBTT_PLATFORM_ID_MAC; same as Script Manager codes$/;"	g
__anond1ee77bb0d03	interface/imstb_truetype.h	/^enum { \/\/ languageID for STBTT_PLATFORM_ID_MICROSOFT; same as LCID...$/;"	g
__anond1ee77bb0e03	interface/imstb_truetype.h	/^enum { \/\/ languageID for STBTT_PLATFORM_ID_MAC$/;"	g
__anond1ee77bb0f08	interface/imstb_truetype.h	/^{$/;"	s
__anond1ee77bb1008	interface/imstb_truetype.h	/^{$/;"	s
__anond1ee77bb1108	interface/imstb_truetype.h	/^{$/;"	s
__anond1ee77bb1208	interface/imstb_truetype.h	/^{$/;"	s
__glsl_shader_frag_spv	interface/imgui_impl_vulkan.cpp	/^static uint32_t __glsl_shader_frag_spv[] =$/;"	v	typeref:typename:uint32_t[]	file:
__glsl_shader_vert_spv	interface/imgui_impl_vulkan.cpp	/^static uint32_t __glsl_shader_vert_spv[] =$/;"	v	typeref:typename:uint32_t[]	file:
_grow_capacity	interface/imgui.h	/^    inline int          _grow_capacity(int sz) const        { int new_capacity = Capacity ? (Cap/;"	f	struct:ImVector	typeref:typename:int
active_head	interface/imstb_rectpack.h	/^   stbrp_node *active_head;$/;"	m	struct:stbrp_context	typeref:typename:stbrp_node *
align	interface/imstb_rectpack.h	/^   int align;$/;"	m	struct:stbrp_context	typeref:typename:int
alloc_chunk	interface/imgui_internal.h	/^    T*      alloc_chunk(size_t sz)      { size_t HDR_SZ = 4; sz = ((HDR_SZ + sz) + 3u) & ~3u; in/;"	f	struct:ImChunkStream	typeref:typename:T *
alloca	interface/imgui_draw.cpp	/^#define alloca /;"	d	file:
append	interface/imgui.cpp	/^void ImGuiTextBuffer::append(const char* str, const char* str_end)$/;"	f	class:ImGuiTextBuffer	typeref:typename:void
appendf	interface/imgui.cpp	/^void ImGuiTextBuffer::appendf(const char* fmt, ...)$/;"	f	class:ImGuiTextBuffer	typeref:typename:void
appendfv	interface/imgui.cpp	/^void ImGuiTextBuffer::appendfv(const char* fmt, va_list args)$/;"	f	class:ImGuiTextBuffer	typeref:typename:void
array_of_unicode_codepoints	interface/imstb_truetype.h	/^   int *array_of_unicode_codepoints;       \/\/ if non-zero, then this is an array of unicode co/;"	m	struct:__anond1ee77bb0508	typeref:typename:int *
b	interface/imgui.h	/^        const char*     b;$/;"	m	struct:ImGuiTextFilter::ImGuiTextRange	typeref:typename:const char *
back	interface/imgui.h	/^    inline T&           back()                              { IM_ASSERT(Size > 0); return Data[S/;"	f	struct:ImVector	typeref:typename:T &
back	interface/imgui.h	/^    inline const T&     back() const                        { IM_ASSERT(Size > 0); return Data[S/;"	f	struct:ImVector	typeref:typename:const T &
bank	bank.hpp	/^        std::array<SizeType, modeCount * virtualSize> bank; $/;"	m	class:Bank	typeref:typename:std::array<SizeType,modeCount * virtualSize>
baseline_y_delta	interface/imstb_textedit.h	/^   float baseline_y_delta;  \/\/ position of baseline relative to previous row's baseline$/;"	m	struct:__anon0a8ecdc40408	typeref:typename:float
begin	interface/imgui.h	/^    const char*         begin() const           { return Buf.Data ? &Buf.front() : EmptyString; /;"	f	struct:ImGuiTextBuffer	typeref:typename:const char *
begin	interface/imgui.h	/^    inline T*           begin()                             { return Data; }$/;"	f	struct:ImVector	typeref:typename:T *
begin	interface/imgui.h	/^    inline const T*     begin() const                       { return Data; }$/;"	f	struct:ImVector	typeref:typename:const T *
begin	interface/imgui_internal.h	/^    T*      begin()                     { size_t HDR_SZ = 4; if (!Buf.Data) return NULL; return /;"	f	struct:ImChunkStream	typeref:typename:T *
bottom_y	interface/imstb_truetype.h	/^   int x,y,bottom_y;$/;"	m	struct:__anond1ee77bb1108	typeref:typename:int
bounds	interface/imstb_truetype.h	/^   int bounds;$/;"	m	struct:__anond1ee77bb0f08	typeref:typename:int
bufferability	arm.hpp	/^        u32 bufferability;$/;"	m	class:CP15	typeref:typename:u32
c_str	interface/imgui.h	/^    const char*         c_str() const           { return Buf.Data ? Buf.Data : EmptyString; }$/;"	f	struct:ImGuiTextBuffer	typeref:typename:const char *
cacheType	arm.hpp	/^        u32 cacheType;$/;"	m	class:CP15	typeref:typename:u32
capacity	interface/imgui.h	/^    inline int          capacity() const                    { return Capacity; }$/;"	f	struct:ImVector	typeref:typename:int
cff	interface/imstb_truetype.h	/^   stbtt__buf cff;                    \/\/ cff font data$/;"	m	struct:stbtt_fontinfo	typeref:typename:stbtt__buf
char_storage	interface/imstb_textedit.h	/^   int                        char_storage;$/;"	m	struct:__anon0a8ecdc40108	typeref:typename:int
chardata_for_range	interface/imstb_truetype.h	/^   stbtt_packedchar *chardata_for_range; \/\/ output$/;"	m	struct:__anond1ee77bb0508	typeref:typename:stbtt_packedchar *
charstrings	interface/imstb_truetype.h	/^   stbtt__buf charstrings;            \/\/ the charstring index$/;"	m	struct:stbtt_fontinfo	typeref:typename:stbtt__buf
check_vk_result	interface/imgui_impl_vulkan.cpp	/^static void check_vk_result(VkResult err)$/;"	f	typeref:typename:void	file:
chunk_size	interface/imgui_internal.h	/^    int     chunk_size(const T* p)      { return ((const int*)p)[-1]; }$/;"	f	struct:ImChunkStream	typeref:typename:int
clear	interface/imgui.h	/^    inline void         clear()                             { if (Data) { Size = Capacity = 0; I/;"	f	struct:ImVector	typeref:typename:void
clear	interface/imgui.h	/^    void                clear()                 { Buf.clear(); }$/;"	f	struct:ImGuiTextBuffer	typeref:typename:void
clear	interface/imgui_internal.h	/^    void    clear()                     { Buf.clear(); }$/;"	f	struct:ImChunkStream	typeref:typename:void
col	interface/imgui.h	/^    ImU32   col;$/;"	m	struct:ImDrawVert	typeref:typename:ImU32
const_iterator	interface/imgui.h	/^    typedef const value_type*   const_iterator;$/;"	t	struct:ImVector	typeref:typename:const value_type *
contains	interface/imgui.h	/^    inline bool         contains(const T& v) const          { const T* data = Data;  const T* da/;"	f	struct:ImVector	typeref:typename:bool
control	arm.hpp	/^        u32 control;$/;"	m	class:CP15	typeref:typename:u32
coprocessors	arm.hpp	/^        std::array<std::unique_ptr<Coprocessor>, 16> coprocessors {};$/;"	m	class:Cpu	typeref:typename:std::array<std::unique_ptr<Coprocessor>,16>
current_frame	interface/imgui.h	/^    operator bool() const { int current_frame = ImGui::GetFrameCount(); if (RefFrame == current_/;"	m	struct:ImGuiOnceUponAFrame	typeref:typename:int
cursor	interface/imstb_textedit.h	/^   int cursor;$/;"	m	struct:__anon0a8ecdc40308	typeref:typename:int
cursor	interface/imstb_truetype.h	/^   int cursor;$/;"	m	struct:__anond1ee77bb0108	typeref:typename:int
cursor_at_end_of_line	interface/imstb_textedit.h	/^   unsigned char cursor_at_end_of_line; \/\/ not implemented yet$/;"	m	struct:__anon0a8ecdc40308	typeref:typename:unsigned char
cx	interface/imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anond1ee77bb0708	typeref:typename:stbtt_vertex_type
cx1	interface/imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anond1ee77bb0708	typeref:typename:stbtt_vertex_type
cy	interface/imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anond1ee77bb0708	typeref:typename:stbtt_vertex_type
cy1	interface/imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anond1ee77bb0708	typeref:typename:stbtt_vertex_type
data	bank.hpp	/^        std::array<DataType, actualSize> data;$/;"	m	class:Bank	typeref:typename:std::array<DataType,actualSize>
data	interface/imstb_truetype.h	/^   unsigned char  * data;              \/\/ pointer to .ttf file$/;"	m	struct:stbtt_fontinfo	typeref:typename:unsigned char *
data	interface/imstb_truetype.h	/^   unsigned char *data;$/;"	m	struct:__anond1ee77bb0108	typeref:typename:unsigned char *
dataAccessPermission	arm.hpp	/^        u32 dataAccessPermission;$/;"	m	class:CP15	typeref:typename:u32
dataCachability	arm.hpp	/^        u32 dataCachability;$/;"	m	class:CP15	typeref:typename:u32
dataLockdown	arm.hpp	/^        u32 dataLockdown;$/;"	m	class:CP15	typeref:typename:u32
dataProtectionRegions	arm.hpp	/^        std::array<u32, 8> dataProtectionRegions;$/;"	m	class:CP15	typeref:typename:std::array<u32,8>
dataTcmControl	arm.hpp	/^        u32 dataTcmControl;$/;"	m	class:CP15	typeref:typename:u32
debug	debug.hpp	/^namespace debug {$/;"	n
delete_length	interface/imstb_textedit.h	/^   STB_TEXTEDIT_POSITIONTYPE  delete_length;$/;"	m	struct:__anon0a8ecdc40108	typeref:typename:STB_TEXTEDIT_POSITIONTYPE
direction	interface/imstb_truetype.h	/^   float direction;$/;"	m	struct:stbtt__active_edge	typeref:typename:float
direction	interface/imstb_truetype.h	/^   int direction;$/;"	m	struct:stbtt__active_edge	typeref:typename:int
dx	interface/imstb_truetype.h	/^   int x,dx;$/;"	m	struct:stbtt__active_edge	typeref:typename:int
e	interface/imgui.h	/^        const char*     e;$/;"	m	struct:ImGuiTextFilter::ImGuiTextRange	typeref:typename:const char *
empty	interface/imgui.h	/^        bool            empty() const                   { return b == e; }$/;"	f	struct:ImGuiTextFilter::ImGuiTextRange	typeref:typename:bool
empty	interface/imgui.h	/^    bool                empty() const           { return Buf.Size <= 1; }$/;"	f	struct:ImGuiTextBuffer	typeref:typename:bool
empty	interface/imgui.h	/^    inline bool         empty() const                       { return Size == 0; }$/;"	f	struct:ImVector	typeref:typename:bool
empty	interface/imgui_internal.h	/^    bool    empty() const               { return Buf.Size == 0; }$/;"	f	struct:ImChunkStream	typeref:typename:bool
end	interface/imgui.h	/^    const char*         end() const             { return Buf.Data ? &Buf.back() : EmptyString; }/;"	f	struct:ImGuiTextBuffer	typeref:typename:const char *
end	interface/imgui.h	/^    inline T*           end()                               { return Data + Size; }$/;"	f	struct:ImVector	typeref:typename:T *
end	interface/imgui.h	/^    inline const T*     end() const                         { return Data + Size; }$/;"	f	struct:ImVector	typeref:typename:const T *
end	interface/imgui_internal.h	/^    T*      end()                       { return (T*)(void*)(Buf.Data + Buf.Size); }$/;"	f	struct:ImChunkStream	typeref:typename:T *
equal	interface/imstb_truetype.h	/^static int equal(float *a, float *b)$/;"	f	typeref:typename:int
erase	interface/imgui.h	/^    inline T*           erase(const T* it)                  { IM_ASSERT(it >= Data && it < Data /;"	f	struct:ImVector	typeref:typename:T *
erase	interface/imgui.h	/^    inline T*           erase(const T* it, const T* it_last){ IM_ASSERT(it >= Data && it < Data /;"	f	struct:ImVector	typeref:typename:T *
erase_unsorted	interface/imgui.h	/^    inline T*           erase_unsorted(const T* it)         { IM_ASSERT(it >= Data && it < Data /;"	f	struct:ImVector	typeref:typename:T *
error	debug.hpp	/^        inline void error() {}$/;"	f	namespace:debug	typeref:typename:void
extra	interface/imstb_rectpack.h	/^   stbrp_node extra[2]; \/\/ we allocate two extra nodes so optimal user-node-count is 'width' n/;"	m	struct:stbrp_context	typeref:typename:stbrp_node[2]
ey	interface/imstb_truetype.h	/^   float ey;$/;"	m	struct:stbtt__active_edge	typeref:typename:float
fdselect	interface/imstb_truetype.h	/^   stbtt__buf fdselect;               \/\/ map from glyph to fontdict$/;"	m	struct:stbtt_fontinfo	typeref:typename:stbtt__buf
fdx	interface/imstb_truetype.h	/^   float fx,fdx,fdy;$/;"	m	struct:stbtt__active_edge	typeref:typename:float
fdy	interface/imstb_truetype.h	/^   float fx,fdx,fdy;$/;"	m	struct:stbtt__active_edge	typeref:typename:float
find	interface/imgui.h	/^    inline T*           find(const T& v)                    { T* data = Data;  const T* data_end/;"	f	struct:ImVector	typeref:typename:T *
find	interface/imgui.h	/^    inline const T*     find(const T& v) const              { const T* data = Data;  const T* da/;"	f	struct:ImVector	typeref:typename:const T *
find_erase	interface/imgui.h	/^    inline bool         find_erase(const T& v)              { const T* it = find(v); if (it < Da/;"	f	struct:ImVector	typeref:typename:bool
find_erase_unsorted	interface/imgui.h	/^    inline bool         find_erase_unsorted(const T& v)     { const T* it = find(v); if (it < Da/;"	f	struct:ImVector	typeref:typename:bool
first_char	interface/imstb_textedit.h	/^   int first_char, length; \/\/ first char of row, and length$/;"	m	struct:__anon0a8ecdc40508	typeref:typename:int
first_free	interface/imstb_truetype.h	/^   void   *first_free;$/;"	m	struct:stbtt__hheap	typeref:typename:void *
first_unicode_codepoint_in_range	interface/imstb_truetype.h	/^   int first_unicode_codepoint_in_range;  \/\/ if non-zero, then the chars are continuous, and t/;"	m	struct:__anond1ee77bb0508	typeref:typename:int
first_x	interface/imstb_truetype.h	/^   float first_x, first_y;$/;"	m	struct:__anond1ee77bb0f08	typeref:typename:float
first_y	interface/imstb_truetype.h	/^   float first_x, first_y;$/;"	m	struct:__anond1ee77bb0f08	typeref:typename:float
font_size	interface/imstb_truetype.h	/^   float font_size;$/;"	m	struct:__anond1ee77bb0508	typeref:typename:float
fontdicts	interface/imstb_truetype.h	/^   stbtt__buf fontdicts;              \/\/ array of font dicts$/;"	m	struct:stbtt_fontinfo	typeref:typename:stbtt__buf
fontstart	interface/imstb_truetype.h	/^   int              fontstart;         \/\/ offset of start of font$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
free_head	interface/imstb_rectpack.h	/^   stbrp_node *free_head;$/;"	m	struct:stbrp_context	typeref:typename:stbrp_node *
front	interface/imgui.h	/^    inline T&           front()                             { IM_ASSERT(Size > 0); return Data[0/;"	f	struct:ImVector	typeref:typename:T &
front	interface/imgui.h	/^    inline const T&     front() const                       { IM_ASSERT(Size > 0); return Data[0/;"	f	struct:ImVector	typeref:typename:const T &
fx	interface/imstb_truetype.h	/^   float fx,fdx,fdy;$/;"	m	struct:stbtt__active_edge	typeref:typename:float
g_BufferMemoryAlignment	interface/imgui_impl_vulkan.cpp	/^static VkDeviceSize             g_BufferMemoryAlignment = 256;$/;"	v	typeref:typename:VkDeviceSize	file:
g_ClipboardTextData	interface/imgui_impl_sdl.cpp	/^static char*        g_ClipboardTextData = NULL;$/;"	v	typeref:typename:char *	file:
g_DescriptorSet	interface/imgui_impl_vulkan.cpp	/^static VkDescriptorSet          g_DescriptorSet = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkDescriptorSet	file:
g_DescriptorSetLayout	interface/imgui_impl_vulkan.cpp	/^static VkDescriptorSetLayout    g_DescriptorSetLayout = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkDescriptorSetLayout	file:
g_FontImage	interface/imgui_impl_vulkan.cpp	/^static VkImage                  g_FontImage = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkImage	file:
g_FontMemory	interface/imgui_impl_vulkan.cpp	/^static VkDeviceMemory           g_FontMemory = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkDeviceMemory	file:
g_FontSampler	interface/imgui_impl_vulkan.cpp	/^static VkSampler                g_FontSampler = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkSampler	file:
g_FontView	interface/imgui_impl_vulkan.cpp	/^static VkImageView              g_FontView = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkImageView	file:
g_MainWindowRenderBuffers	interface/imgui_impl_vulkan.cpp	/^static ImGui_ImplVulkanH_WindowRenderBuffers    g_MainWindowRenderBuffers;$/;"	v	typeref:typename:ImGui_ImplVulkanH_WindowRenderBuffers	file:
g_MouseCanUseGlobalState	interface/imgui_impl_sdl.cpp	/^static bool         g_MouseCanUseGlobalState = true;$/;"	v	typeref:typename:bool	file:
g_MouseCursors	interface/imgui_impl_sdl.cpp	/^static SDL_Cursor*  g_MouseCursors[ImGuiMouseCursor_COUNT] = {};$/;"	v	typeref:typename:SDL_Cursor * []	file:
g_MousePressed	interface/imgui_impl_sdl.cpp	/^static bool         g_MousePressed[3] = { false, false, false };$/;"	v	typeref:typename:bool[3]	file:
g_Pipeline	interface/imgui_impl_vulkan.cpp	/^static VkPipeline               g_Pipeline = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkPipeline	file:
g_PipelineCreateFlags	interface/imgui_impl_vulkan.cpp	/^static VkPipelineCreateFlags    g_PipelineCreateFlags = 0x00;$/;"	v	typeref:typename:VkPipelineCreateFlags	file:
g_PipelineLayout	interface/imgui_impl_vulkan.cpp	/^static VkPipelineLayout         g_PipelineLayout = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkPipelineLayout	file:
g_RenderPass	interface/imgui_impl_vulkan.cpp	/^static VkRenderPass             g_RenderPass = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkRenderPass	file:
g_ShaderModuleFrag	interface/imgui_impl_vulkan.cpp	/^static VkShaderModule           g_ShaderModuleFrag;$/;"	v	typeref:typename:VkShaderModule	file:
g_ShaderModuleVert	interface/imgui_impl_vulkan.cpp	/^static VkShaderModule           g_ShaderModuleVert;$/;"	v	typeref:typename:VkShaderModule	file:
g_Time	interface/imgui_impl_sdl.cpp	/^static Uint64       g_Time = 0;$/;"	v	typeref:typename:Uint64	file:
g_UploadBuffer	interface/imgui_impl_vulkan.cpp	/^static VkBuffer                 g_UploadBuffer = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkBuffer	file:
g_UploadBufferMemory	interface/imgui_impl_vulkan.cpp	/^static VkDeviceMemory           g_UploadBufferMemory = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkDeviceMemory	file:
g_VulkanInitInfo	interface/imgui_impl_vulkan.cpp	/^static ImGui_ImplVulkan_InitInfo g_VulkanInitInfo = {};$/;"	v	typeref:typename:ImGui_ImplVulkan_InitInfo	file:
g_Window	interface/imgui_impl_sdl.cpp	/^static SDL_Window*  g_Window = NULL;$/;"	v	typeref:typename:SDL_Window *	file:
glyf	interface/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
gpos	interface/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
gsubrs	interface/imstb_truetype.h	/^   stbtt__buf gsubrs;                 \/\/ global charstring subroutines index$/;"	m	struct:stbtt_fontinfo	typeref:typename:stbtt__buf
h	interface/imstb_rectpack.h	/^   stbrp_coord    w, h;$/;"	m	struct:stbrp_rect	typeref:typename:stbrp_coord
h	interface/imstb_truetype.h	/^   int id,w,h,was_packed;$/;"	m	struct:stbrp_rect	typeref:typename:int
h	interface/imstb_truetype.h	/^   int w,h,stride;$/;"	m	struct:__anond1ee77bb0808	typeref:typename:int
h_oversample	interface/imstb_truetype.h	/^   unsigned char h_oversample, v_oversample; \/\/ don't set these, they're used internally$/;"	m	struct:__anond1ee77bb0508	typeref:typename:unsigned char
h_oversample	interface/imstb_truetype.h	/^   unsigned int   h_oversample, v_oversample;$/;"	m	struct:stbtt_pack_context	typeref:typename:unsigned int
has_preferred_x	interface/imstb_textedit.h	/^   unsigned char has_preferred_x;$/;"	m	struct:__anon0a8ecdc40308	typeref:typename:unsigned char
head	interface/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
head	interface/imstb_truetype.h	/^   struct stbtt__hheap_chunk *head;$/;"	m	struct:stbtt__hheap	typeref:struct:stbtt__hheap_chunk *
height	interface/imstb_rectpack.h	/^   int height;$/;"	m	struct:stbrp_context	typeref:typename:int
height	interface/imstb_textedit.h	/^   float height; \/\/ height of line$/;"	m	struct:__anon0a8ecdc40508	typeref:typename:float
height	interface/imstb_truetype.h	/^   int   height;$/;"	m	struct:stbtt_pack_context	typeref:typename:int
height	interface/imstb_truetype.h	/^   int width,height;$/;"	m	struct:__anond1ee77bb1108	typeref:typename:int
heuristic	interface/imstb_rectpack.h	/^   int heuristic;$/;"	m	struct:stbrp_context	typeref:typename:int
hhea	interface/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
hmtx	interface/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
id	interface/imstb_rectpack.h	/^   int            id;$/;"	m	struct:stbrp_rect	typeref:typename:int
id	interface/imstb_truetype.h	/^   int id,w,h,was_packed;$/;"	m	struct:stbrp_rect	typeref:typename:int
idCode	arm.hpp	/^        u32 idCode;$/;"	m	class:CP15	typeref:typename:u32
indexToLocFormat	interface/imstb_truetype.h	/^   int indexToLocFormat;              \/\/ format needed to map from glyph index to glyph$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
index_from_ptr	interface/imgui.h	/^    inline int          index_from_ptr(const T* it) const   { IM_ASSERT(it >= Data && it < Data /;"	f	struct:ImVector	typeref:typename:int
index_map	interface/imstb_truetype.h	/^   int index_map;                     \/\/ a cmap mapping for our chosen character encoding$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
info	debug.hpp	/^        inline void info() {}$/;"	f	namespace:debug	typeref:typename:void
init_mode	interface/imstb_rectpack.h	/^   int init_mode;$/;"	m	struct:stbrp_context	typeref:typename:int
initialized	interface/imstb_textedit.h	/^   unsigned char initialized;$/;"	m	struct:__anon0a8ecdc40308	typeref:typename:unsigned char
insert	interface/imgui.h	/^    inline T*           insert(const T* it, const T& v)     { IM_ASSERT(it >= Data && it <= Data/;"	f	struct:ImVector	typeref:typename:T *
insert_length	interface/imstb_textedit.h	/^   STB_TEXTEDIT_POSITIONTYPE  insert_length;$/;"	m	struct:__anon0a8ecdc40108	typeref:typename:STB_TEXTEDIT_POSITIONTYPE
insert_mode	interface/imstb_textedit.h	/^   unsigned char insert_mode;$/;"	m	struct:__anon0a8ecdc40308	typeref:typename:unsigned char
instructionAccessPermission	arm.hpp	/^        u32 instructionAccessPermission;$/;"	m	class:CP15	typeref:typename:u32
instructionCachability	arm.hpp	/^        u32 instructionCachability;$/;"	m	class:CP15	typeref:typename:u32
instructionLockdown	arm.hpp	/^        u32 instructionLockdown;$/;"	m	class:CP15	typeref:typename:u32
instructionProtectionRegions	arm.hpp	/^        std::array<u32, 8> instructionProtectionRegions;$/;"	m	class:CP15	typeref:typename:std::array<u32,8>
instructionSetFromCore	arm.hpp	/^        static inline InstructionSet instructionSetFromCore($/;"	f	class:Cpu	typeref:typename:InstructionSet
instructionTcmControl	arm.hpp	/^        u32 instructionTcmControl;$/;"	m	class:CP15	typeref:typename:u32
invert	interface/imstb_truetype.h	/^   int invert;$/;"	m	struct:stbtt__edge	typeref:typename:int
is_separator	interface/imgui_widgets.cpp	/^static bool is_separator(unsigned int c)                                        { return ImCharI/;"	f	namespace:ImStb	typeref:typename:bool	file:
is_word_boundary	interface/imstb_textedit.h	/^static int is_word_boundary( STB_TEXTEDIT_STRING *str, int idx )$/;"	f	typeref:typename:int
is_word_boundary_from_left	interface/imgui_widgets.cpp	/^static int  is_word_boundary_from_left(STB_TEXTEDIT_STRING* obj, int idx)       { return idx > 0/;"	f	namespace:ImStb	typeref:typename:int	file:
is_word_boundary_from_right	interface/imgui_widgets.cpp	/^static int  is_word_boundary_from_right(STB_TEXTEDIT_STRING* obj, int idx)      { return idx > 0/;"	f	namespace:ImStb	typeref:typename:int	file:
iterator	interface/imgui.h	/^    typedef value_type*         iterator;$/;"	t	struct:ImVector	typeref:typename:value_type *
kern	interface/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
key	interface/imgui.h	/^        ImGuiID key;$/;"	m	struct:ImGuiStorage::ImGuiStoragePair	typeref:typename:ImGuiID
length	interface/imstb_textedit.h	/^   int first_char, length; \/\/ first char of row, and length$/;"	m	struct:__anon0a8ecdc40508	typeref:typename:int
loca	interface/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
main	interface/cli.cpp	/^int main(int argc, char* argv[]) {$/;"	f	typeref:typename:int
main	interface/gui.cpp	/^int main(int argc, char* argv[]) {$/;"	f	typeref:typename:int
main	interface/test.cpp	/^int main(int argc, char* argv[]) {$/;"	f	typeref:typename:int
main_clipboard	interface/imgui.cpp	/^static PasteboardRef main_clipboard = 0;$/;"	v	typeref:typename:PasteboardRef	file:
max_size	interface/imgui.h	/^    inline int          max_size() const                    { return 0x7FFFFFFF \/ (int)sizeof(T/;"	f	struct:ImVector	typeref:typename:int
max_x	interface/imstb_truetype.h	/^   stbtt_int32 min_x, max_x, min_y, max_y;$/;"	m	struct:__anond1ee77bb0f08	typeref:typename:stbtt_int32
max_y	interface/imstb_truetype.h	/^   stbtt_int32 min_x, max_x, min_y, max_y;$/;"	m	struct:__anond1ee77bb0f08	typeref:typename:stbtt_int32
mcr	arm.hpp	/^        void mcr($/;"	f	class:CP15	typeref:typename:void
message	debug.hpp	/^        constexpr char* message {nullptr};$/;"	v	namespace:debug	typeref:typename:char *
min_x	interface/imstb_truetype.h	/^   stbtt_int32 min_x, max_x, min_y, max_y;$/;"	m	struct:__anond1ee77bb0f08	typeref:typename:stbtt_int32
min_y	interface/imstb_truetype.h	/^   stbtt_int32 min_x, max_x, min_y, max_y;$/;"	m	struct:__anond1ee77bb0f08	typeref:typename:stbtt_int32
mode	bank.hpp	/^        SizeType mode; $/;"	m	class:Bank	typeref:typename:SizeType
modeBitsFromMode	arm.hpp	/^        static inline u8 modeBitsFromMode($/;"	f	class:Cpu	typeref:typename:u8
modeFromInterrupt	arm.hpp	/^        static inline Mode modeFromInterrupt($/;"	f	class:Cpu	typeref:typename:Mode
next	interface/imstb_rectpack.h	/^   stbrp_node  *next;$/;"	m	struct:stbrp_node	typeref:typename:stbrp_node *
next	interface/imstb_truetype.h	/^   struct stbtt__active_edge *next;$/;"	m	struct:stbtt__active_edge	typeref:struct:stbtt__active_edge *
next	interface/imstb_truetype.h	/^   struct stbtt__hheap_chunk *next;$/;"	m	struct:stbtt__hheap_chunk	typeref:struct:stbtt__hheap_chunk *
next_chunk	interface/imgui_internal.h	/^    T*      next_chunk(T* p)            { size_t HDR_SZ = 4; IM_ASSERT(p >= begin() && p < end()/;"	f	struct:ImChunkStream	typeref:typename:T *
nodes	interface/imstb_truetype.h	/^   void  *nodes;$/;"	m	struct:stbtt_pack_context	typeref:typename:void *
numGlyphs	interface/imstb_truetype.h	/^   int numGlyphs;                     \/\/ number of glyphs, needed for range checking$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
num_chars	interface/imstb_textedit.h	/^   int num_chars;$/;"	m	struct:__anon0a8ecdc40408	typeref:typename:int
num_chars	interface/imstb_truetype.h	/^   int num_chars;$/;"	m	struct:__anond1ee77bb0508	typeref:typename:int
num_nodes	interface/imstb_rectpack.h	/^   int num_nodes;$/;"	m	struct:stbrp_context	typeref:typename:int
num_remaining_in_head_chunk	interface/imstb_truetype.h	/^   int    num_remaining_in_head_chunk;$/;"	m	struct:stbtt__hheap	typeref:typename:int
num_vertices	interface/imstb_truetype.h	/^   int num_vertices;$/;"	m	struct:__anond1ee77bb0f08	typeref:typename:int
offset_from_ptr	interface/imgui_internal.h	/^    int     offset_from_ptr(const T* p) { IM_ASSERT(p >= begin() && p < end()); const ptrdiff_t /;"	f	struct:ImChunkStream	typeref:typename:int
operator *	interface/imgui_internal.h	/^static inline ImVec2 operator*(const ImVec2& lhs, const ImVec2& rhs)            { return ImVec2(/;"	f	typeref:typename:ImVec2
operator *	interface/imgui_internal.h	/^static inline ImVec2 operator*(const ImVec2& lhs, const float rhs)              { return ImVec2(/;"	f	typeref:typename:ImVec2
operator *	interface/imgui_internal.h	/^static inline ImVec4 operator*(const ImVec4& lhs, const ImVec4& rhs)            { return ImVec4(/;"	f	typeref:typename:ImVec4
operator *=	interface/imgui_internal.h	/^static inline ImVec2& operator*=(ImVec2& lhs, const ImVec2& rhs)                { lhs.x *= rhs.x/;"	f	typeref:typename:ImVec2 &
operator *=	interface/imgui_internal.h	/^static inline ImVec2& operator*=(ImVec2& lhs, const float rhs)                  { lhs.x *= rhs; /;"	f	typeref:typename:ImVec2 &
operator +	interface/imgui_internal.h	/^static inline ImVec2 operator+(const ImVec2& lhs, const ImVec2& rhs)            { return ImVec2(/;"	f	typeref:typename:ImVec2
operator +	interface/imgui_internal.h	/^static inline ImVec4 operator+(const ImVec4& lhs, const ImVec4& rhs)            { return ImVec4(/;"	f	typeref:typename:ImVec4
operator +=	interface/imgui_internal.h	/^static inline ImVec2& operator+=(ImVec2& lhs, const ImVec2& rhs)                { lhs.x += rhs.x/;"	f	typeref:typename:ImVec2 &
operator -	interface/imgui_internal.h	/^static inline ImVec2 operator-(const ImVec2& lhs, const ImVec2& rhs)            { return ImVec2(/;"	f	typeref:typename:ImVec2
operator -	interface/imgui_internal.h	/^static inline ImVec4 operator-(const ImVec4& lhs, const ImVec4& rhs)            { return ImVec4(/;"	f	typeref:typename:ImVec4
operator -=	interface/imgui_internal.h	/^static inline ImVec2& operator-=(ImVec2& lhs, const ImVec2& rhs)                { lhs.x -= rhs.x/;"	f	typeref:typename:ImVec2 &
operator /	interface/imgui_internal.h	/^static inline ImVec2 operator\/(const ImVec2& lhs, const ImVec2& rhs)            { return ImVec2/;"	f	typeref:typename:ImVec2
operator /	interface/imgui_internal.h	/^static inline ImVec2 operator\/(const ImVec2& lhs, const float rhs)              { return ImVec2/;"	f	typeref:typename:ImVec2
operator /=	interface/imgui_internal.h	/^static inline ImVec2& operator\/=(ImVec2& lhs, const ImVec2& rhs)                { lhs.x \/= rhs/;"	f	typeref:typename:ImVec2 &
operator /=	interface/imgui_internal.h	/^static inline ImVec2& operator\/=(ImVec2& lhs, const float rhs)                  { lhs.x \/= rhs/;"	f	typeref:typename:ImVec2 &
operator =	interface/imgui.h	/^    inline ImVector<T>& operator=(const ImVector<T>& src)   { clear(); resize(src.Size); memcpy(/;"	f	struct:ImVector	typeref:typename:ImVector<T> &
operator ImU32	interface/imgui.h	/^    inline operator ImU32() const                                   { return ImGui::ColorConvert/;"	f	struct:ImColor
operator ImVec4	interface/imgui.h	/^    inline operator ImVec4() const                                  { return Value; }$/;"	f	struct:ImColor
operator []	bank.hpp	/^        DataType& operator[](const SizeType& index) const { $/;"	f	class:Bank	typeref:typename:DataType &
operator []	interface/imgui.h	/^    inline T&           operator[](int i)                   { IM_ASSERT(i >= 0 && i < Size); ret/;"	f	struct:ImVector	typeref:typename:T &
operator []	interface/imgui.h	/^    inline char         operator[](int i) const { IM_ASSERT(Buf.Data != NULL); return Buf.Data[i/;"	f	struct:ImGuiTextBuffer	typeref:typename:char
operator []	interface/imgui.h	/^    inline const T&     operator[](int i) const             { IM_ASSERT(i >= 0 && i < Size); ret/;"	f	struct:ImVector	typeref:typename:const T &
operator [] 	interface/imgui.h	/^    float  operator[] (size_t idx) const    { IM_ASSERT(idx <= 1); return (&x)[idx]; }    \/\/ W/;"	f	struct:ImVec2	typeref:typename:float
operator [] 	interface/imgui.h	/^    float& operator[] (size_t idx)          { IM_ASSERT(idx <= 1); return (&x)[idx]; }    \/\/ W/;"	f	struct:ImVec2	typeref:typename:float &
operator delete	interface/imgui.h	/^inline void  operator delete(void*, ImNewWrapper, void*)   {} \/\/ This is only required so we c/;"	f	typeref:typename:void
operator new	interface/imgui.h	/^inline void* operator new(size_t, ImNewWrapper, void* ptr) { return ptr; }$/;"	f	typeref:typename:void *
pack_info	interface/imstb_truetype.h	/^   void *pack_info;$/;"	m	struct:stbtt_pack_context	typeref:typename:void *
padding	interface/imstb_truetype.h	/^      unsigned char type,padding;$/;"	m	struct:__anond1ee77bb0708	typeref:typename:unsigned char
padding	interface/imstb_truetype.h	/^   int   padding;$/;"	m	struct:stbtt_pack_context	typeref:typename:int
padding1	interface/imstb_textedit.h	/^   unsigned char padding1, padding2, padding3;$/;"	m	struct:__anon0a8ecdc40308	typeref:typename:unsigned char
padding2	interface/imstb_textedit.h	/^   unsigned char padding1, padding2, padding3;$/;"	m	struct:__anon0a8ecdc40308	typeref:typename:unsigned char
padding3	interface/imstb_textedit.h	/^   unsigned char padding1, padding2, padding3;$/;"	m	struct:__anon0a8ecdc40308	typeref:typename:unsigned char
pixels	interface/imstb_truetype.h	/^   unsigned char *pixels;$/;"	m	struct:__anond1ee77bb0808	typeref:typename:unsigned char *
pixels	interface/imstb_truetype.h	/^   unsigned char *pixels;$/;"	m	struct:stbtt_pack_context	typeref:typename:unsigned char *
pop_back	interface/imgui.h	/^    inline void         pop_back()                          { IM_ASSERT(Size > 0); Size--; }$/;"	f	struct:ImVector	typeref:typename:void
pos	interface/imgui.h	/^    ImVec2  pos;$/;"	m	struct:ImDrawVert	typeref:typename:ImVec2
preferred_x	interface/imstb_textedit.h	/^   float preferred_x; \/\/ this determines where the cursor up\/down tries to seek to along x$/;"	m	struct:__anon0a8ecdc40308	typeref:typename:float
prev_first	interface/imstb_textedit.h	/^   int prev_first;  \/\/ first char of previous row$/;"	m	struct:__anon0a8ecdc40508	typeref:typename:int
prev_link	interface/imstb_rectpack.h	/^   stbrp_node **prev_link;$/;"	m	struct:__anonba8239e60308	typeref:typename:stbrp_node **
processId	arm.hpp	/^        u32 processId;$/;"	m	class:CP15	typeref:typename:u32
proggy_clean_ttf_compressed_data_base85	interface/imgui_draw.cpp	/^static const char proggy_clean_ttf_compressed_data_base85[11980 + 1] =$/;"	v	typeref:typename:const char[]	file:
ptr_from_offset	interface/imgui_internal.h	/^    T*      ptr_from_offset(int off)    { IM_ASSERT(off >= 4 && off < Buf.Size); return (T*)(voi/;"	f	struct:ImChunkStream	typeref:typename:T *
push_back	interface/imgui.h	/^    inline void         push_back(const T& v)               { if (Size == Capacity) reserve(_gro/;"	f	struct:ImVector	typeref:typename:void
push_front	interface/imgui.h	/^    inline void         push_front(const T& v)              { if (Size == 0) push_back(v); else /;"	f	struct:ImVector	typeref:typename:void
pvertices	interface/imstb_truetype.h	/^   stbtt_vertex *pvertices;$/;"	m	struct:__anond1ee77bb0f08	typeref:typename:stbtt_vertex *
rect_height_compare	interface/imstb_rectpack.h	/^static int STBRP__CDECL rect_height_compare(const void *a, const void *b)$/;"	f	typeref:typename:int STBRP__CDECL
rect_original_order	interface/imstb_rectpack.h	/^static int STBRP__CDECL rect_original_order(const void *a, const void *b)$/;"	f	typeref:typename:int STBRP__CDECL
redo_char_point	interface/imstb_textedit.h	/^   int undo_char_point, redo_char_point;$/;"	m	struct:__anon0a8ecdc40208	typeref:typename:int
redo_point	interface/imstb_textedit.h	/^   short undo_point, redo_point;$/;"	m	struct:__anon0a8ecdc40208	typeref:typename:short
registers	arm.hpp	/^        Bank<u32, u8, 7, 18, 37> registers {};$/;"	m	class:Cpu	typeref:typename:Bank<u32,u8,7,18,37>
reserve	interface/imgui.h	/^    inline void         reserve(int new_capacity)           { if (new_capacity <= Capacity) retu/;"	f	struct:ImVector	typeref:typename:void
reserve	interface/imgui.h	/^    void                reserve(int capacity)   { Buf.reserve(capacity); }$/;"	f	struct:ImGuiTextBuffer	typeref:typename:void
resize	interface/imgui.h	/^    inline void         resize(int new_size)                { if (new_size > Capacity) reserve(_/;"	f	struct:ImVector	typeref:typename:void
resize	interface/imgui.h	/^    inline void         resize(int new_size, const T& v)    { if (new_size > Capacity) reserve(_/;"	f	struct:ImVector	typeref:typename:void
resize_border_def	interface/imgui.cpp	/^static const ImGuiResizeBorderDef resize_border_def[4] =$/;"	v	typeref:typename:const ImGuiResizeBorderDef[4]	file:
resize_grip_def	interface/imgui.cpp	/^static const ImGuiResizeGripDef resize_grip_def[4] =$/;"	v	typeref:typename:const ImGuiResizeGripDef[4]	file:
row_count_per_page	interface/imstb_textedit.h	/^   int row_count_per_page;$/;"	m	struct:__anon0a8ecdc40308	typeref:typename:int
s0	interface/imstb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anond1ee77bb0308	typeref:typename:float
s1	interface/imstb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anond1ee77bb0308	typeref:typename:float
s16	types.hpp	/^using s16 = std::int16_t;$/;"	t	typeref:typename:std::int16_t
s16_fast	types.hpp	/^using s16_fast = std::int_fast16_t;$/;"	t	typeref:typename:std::int_fast16_t
s32	types.hpp	/^using s32 = std::int32_t;$/;"	t	typeref:typename:std::int32_t
s32_fast	types.hpp	/^using s32_fast = std::int_fast32_t;$/;"	t	typeref:typename:std::int_fast32_t
s64	types.hpp	/^using s64 = std::int64_t;$/;"	t	typeref:typename:std::int64_t
s64_fast	types.hpp	/^using s64_fast = std::int_fast64_t;$/;"	t	typeref:typename:std::int_fast64_t
s8	types.hpp	/^using s8 =  std::int8_t;$/;"	t	typeref:typename:std::int8_t
s8_fast	types.hpp	/^using s8_fast  = std::int_fast8_t;$/;"	t	typeref:typename:std::int_fast8_t
select_end	interface/imstb_textedit.h	/^   int select_end;$/;"	m	struct:__anon0a8ecdc40308	typeref:typename:int
select_start	interface/imstb_textedit.h	/^   int select_start;          \/\/ selection start point$/;"	m	struct:__anon0a8ecdc40308	typeref:typename:int
serviceInterrupt	arm.hpp	/^        void serviceInterrupt(const Interrupt& interrupt) {$/;"	f	class:Cpu	typeref:typename:void
setBit	bits.hpp	/^inline constexpr void setBit(DataType& data, const bool& value) {$/;"	f	typeref:typename:void
setBits	bits.hpp	/^inline constexpr void setBits($/;"	f	typeref:typename:void
shrink	interface/imgui.h	/^    inline void         shrink(int new_size)                { IM_ASSERT(new_size <= Size); Size /;"	f	struct:ImVector	typeref:typename:void
single_line	interface/imstb_textedit.h	/^   unsigned char single_line;$/;"	m	struct:__anon0a8ecdc40308	typeref:typename:unsigned char
size	interface/imgui.h	/^    inline int          size() const                        { return Size; }$/;"	f	struct:ImVector	typeref:typename:int
size	interface/imgui.h	/^    int                 size() const            { return Buf.Size ? Buf.Size - 1 : 0; }$/;"	f	struct:ImGuiTextBuffer	typeref:typename:int
size	interface/imgui_internal.h	/^    int     size() const                { return Buf.Size; }$/;"	f	struct:ImChunkStream	typeref:typename:int
size	interface/imstb_truetype.h	/^   int size;$/;"	m	struct:__anond1ee77bb0108	typeref:typename:int
size_in_bytes	interface/imgui.h	/^    inline int          size_in_bytes() const               { return Size * (int)sizeof(T); }$/;"	f	struct:ImVector	typeref:typename:int
skip_missing	interface/imstb_truetype.h	/^   int   skip_missing;$/;"	m	struct:stbtt_pack_context	typeref:typename:int
split	interface/imgui.cpp	/^void ImGuiTextFilter::ImGuiTextRange::split(char separator, ImVector<ImGuiTextRange>* out) const$/;"	f	class:ImGuiTextFilter::ImGuiTextRange	typeref:typename:void
started	interface/imstb_truetype.h	/^   int started;$/;"	m	struct:__anond1ee77bb0f08	typeref:typename:int
stb__barrier_in_b	interface/imgui_draw.cpp	/^static const unsigned char *stb__barrier_in_b;$/;"	v	typeref:typename:const unsigned char *	file:
stb__barrier_out_b	interface/imgui_draw.cpp	/^static unsigned char *stb__barrier_out_e, *stb__barrier_out_b;$/;"	v	typeref:typename:unsigned char *	file:
stb__barrier_out_e	interface/imgui_draw.cpp	/^static unsigned char *stb__barrier_out_e, *stb__barrier_out_b;$/;"	v	typeref:typename:unsigned char *	file:
stb__dout	interface/imgui_draw.cpp	/^static unsigned char *stb__dout;$/;"	v	typeref:typename:unsigned char *	file:
stb__in2	interface/imgui_draw.cpp	/^#define stb__in2(/;"	d	file:
stb__in3	interface/imgui_draw.cpp	/^#define stb__in3(/;"	d	file:
stb__in4	interface/imgui_draw.cpp	/^#define stb__in4(/;"	d	file:
stb__lit	interface/imgui_draw.cpp	/^static void stb__lit(const unsigned char *data, unsigned int length)$/;"	f	typeref:typename:void	file:
stb__match	interface/imgui_draw.cpp	/^static void stb__match(const unsigned char *data, unsigned int length)$/;"	f	typeref:typename:void	file:
stb_adler32	interface/imgui_draw.cpp	/^static unsigned int stb_adler32(unsigned int adler32, unsigned char *buffer, unsigned int buflen/;"	f	typeref:typename:unsigned int	file:
stb_decompress	interface/imgui_draw.cpp	/^static unsigned int stb_decompress(unsigned char *output, const unsigned char *i, unsigned int \//;"	f	typeref:typename:unsigned int	file:
stb_decompress_length	interface/imgui_draw.cpp	/^static unsigned int stb_decompress_length(const unsigned char *input)$/;"	f	typeref:typename:unsigned int	file:
stb_decompress_token	interface/imgui_draw.cpp	/^static const unsigned char *stb_decompress_token(const unsigned char *i)$/;"	f	typeref:typename:const unsigned char *	file:
stb_text_create_undo_record	interface/imstb_textedit.h	/^static StbUndoRecord *stb_text_create_undo_record(StbUndoState *state, int numchars)$/;"	f	typeref:typename:StbUndoRecord *
stb_text_createundo	interface/imstb_textedit.h	/^static STB_TEXTEDIT_CHARTYPE *stb_text_createundo(StbUndoState *state, int pos, int insert_len, /;"	f	typeref:typename:STB_TEXTEDIT_CHARTYPE *
stb_text_locate_coord	interface/imstb_textedit.h	/^static int stb_text_locate_coord(STB_TEXTEDIT_STRING *str, float x, float y)$/;"	f	typeref:typename:int
stb_text_makeundo_delete	interface/imstb_textedit.h	/^static void stb_text_makeundo_delete(STB_TEXTEDIT_STRING *str, STB_TexteditState *state, int whe/;"	f	typeref:typename:void
stb_text_makeundo_insert	interface/imstb_textedit.h	/^static void stb_text_makeundo_insert(STB_TexteditState *state, int where, int length)$/;"	f	typeref:typename:void
stb_text_makeundo_replace	interface/imstb_textedit.h	/^static void stb_text_makeundo_replace(STB_TEXTEDIT_STRING *str, STB_TexteditState *state, int wh/;"	f	typeref:typename:void
stb_text_redo	interface/imstb_textedit.h	/^static void stb_text_redo(STB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_text_undo	interface/imstb_textedit.h	/^static void stb_text_undo(STB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_textedit_clamp	interface/imstb_textedit.h	/^static void stb_textedit_clamp(STB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_textedit_clear_state	interface/imstb_textedit.h	/^static void stb_textedit_clear_state(STB_TexteditState *state, int is_single_line)$/;"	f	typeref:typename:void
stb_textedit_click	interface/imstb_textedit.h	/^static void stb_textedit_click(STB_TEXTEDIT_STRING *str, STB_TexteditState *state, float x, floa/;"	f	typeref:typename:void
stb_textedit_cut	interface/imstb_textedit.h	/^static int stb_textedit_cut(STB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f	typeref:typename:int
stb_textedit_delete	interface/imstb_textedit.h	/^static void stb_textedit_delete(STB_TEXTEDIT_STRING *str, STB_TexteditState *state, int where, i/;"	f	typeref:typename:void
stb_textedit_delete_selection	interface/imstb_textedit.h	/^static void stb_textedit_delete_selection(STB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_textedit_discard_redo	interface/imstb_textedit.h	/^static void stb_textedit_discard_redo(StbUndoState *state)$/;"	f	typeref:typename:void
stb_textedit_discard_undo	interface/imstb_textedit.h	/^static void stb_textedit_discard_undo(StbUndoState *state)$/;"	f	typeref:typename:void
stb_textedit_drag	interface/imstb_textedit.h	/^static void stb_textedit_drag(STB_TEXTEDIT_STRING *str, STB_TexteditState *state, float x, float/;"	f	typeref:typename:void
stb_textedit_find_charpos	interface/imstb_textedit.h	/^static void stb_textedit_find_charpos(StbFindState *find, STB_TEXTEDIT_STRING *str, int n, int s/;"	f	typeref:typename:void
stb_textedit_flush_redo	interface/imstb_textedit.h	/^static void stb_textedit_flush_redo(StbUndoState *state)$/;"	f	typeref:typename:void
stb_textedit_initialize_state	interface/imstb_textedit.h	/^static void stb_textedit_initialize_state(STB_TexteditState *state, int is_single_line)$/;"	f	typeref:typename:void
stb_textedit_key	interface/imstb_textedit.h	/^static void stb_textedit_key(STB_TEXTEDIT_STRING *str, STB_TexteditState *state, STB_TEXTEDIT_KE/;"	f	typeref:typename:void
stb_textedit_move_to_first	interface/imstb_textedit.h	/^static void stb_textedit_move_to_first(STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_textedit_move_to_last	interface/imstb_textedit.h	/^static void stb_textedit_move_to_last(STB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_textedit_move_to_word_next	interface/imstb_textedit.h	/^static int stb_textedit_move_to_word_next( STB_TEXTEDIT_STRING *str, int c )$/;"	f	typeref:typename:int
stb_textedit_move_to_word_previous	interface/imstb_textedit.h	/^static int stb_textedit_move_to_word_previous( STB_TEXTEDIT_STRING *str, int c )$/;"	f	typeref:typename:int
stb_textedit_paste	interface/imstb_textedit.h	/^static int stb_textedit_paste(STB_TEXTEDIT_STRING *str, STB_TexteditState *state, STB_TEXTEDIT_C/;"	f	typeref:typename:int
stb_textedit_paste_internal	interface/imstb_textedit.h	/^static int stb_textedit_paste_internal(STB_TEXTEDIT_STRING *str, STB_TexteditState *state, STB_T/;"	f	typeref:typename:int
stb_textedit_prep_selection_at_cursor	interface/imstb_textedit.h	/^static void stb_textedit_prep_selection_at_cursor(STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_textedit_replace	interface/imgui_widgets.cpp	/^static void stb_textedit_replace(STB_TEXTEDIT_STRING* str, STB_TexteditState* state, const STB_T/;"	f	namespace:ImStb	typeref:typename:void	file:
stb_textedit_sortselection	interface/imstb_textedit.h	/^static void stb_textedit_sortselection(STB_TexteditState *state)$/;"	f	typeref:typename:void
stbrp__findresult	interface/imstb_rectpack.h	/^} stbrp__findresult;$/;"	t	typeref:struct:__anonba8239e60308
stbrp__skyline_find_best_pos	interface/imstb_rectpack.h	/^static stbrp__findresult stbrp__skyline_find_best_pos(stbrp_context *c, int width, int height)$/;"	f	typeref:typename:stbrp__findresult
stbrp__skyline_find_min_y	interface/imstb_rectpack.h	/^static int stbrp__skyline_find_min_y(stbrp_context *c, stbrp_node *first, int x0, int width, int/;"	f	typeref:typename:int
stbrp__skyline_pack_rectangle	interface/imstb_rectpack.h	/^static stbrp__findresult stbrp__skyline_pack_rectangle(stbrp_context *context, int width, int he/;"	f	typeref:typename:stbrp__findresult
stbrp_context	interface/imstb_rectpack.h	/^struct stbrp_context$/;"	s
stbrp_context	interface/imstb_rectpack.h	/^typedef struct stbrp_context stbrp_context;$/;"	t	typeref:struct:stbrp_context
stbrp_context	interface/imstb_truetype.h	/^} stbrp_context;$/;"	t	typeref:struct:__anond1ee77bb1108
stbrp_coord	interface/imstb_rectpack.h	/^typedef int            stbrp_coord;$/;"	t	typeref:typename:int
stbrp_coord	interface/imstb_rectpack.h	/^typedef unsigned short stbrp_coord;$/;"	t	typeref:typename:unsigned short
stbrp_coord	interface/imstb_truetype.h	/^typedef int stbrp_coord;$/;"	t	typeref:typename:int
stbrp_init_target	interface/imstb_rectpack.h	/^STBRP_DEF void stbrp_init_target(stbrp_context *context, int width, int height, stbrp_node *node/;"	f	typeref:typename:STBRP_DEF void
stbrp_init_target	interface/imstb_truetype.h	/^static void stbrp_init_target(stbrp_context *con, int pw, int ph, stbrp_node *nodes, int num_nod/;"	f	typeref:typename:void
stbrp_node	interface/imstb_rectpack.h	/^struct stbrp_node$/;"	s
stbrp_node	interface/imstb_rectpack.h	/^typedef struct stbrp_node    stbrp_node;$/;"	t	typeref:struct:stbrp_node
stbrp_node	interface/imstb_truetype.h	/^} stbrp_node;$/;"	t	typeref:struct:__anond1ee77bb1208
stbrp_pack_rects	interface/imstb_rectpack.h	/^STBRP_DEF int stbrp_pack_rects(stbrp_context *context, stbrp_rect *rects, int num_rects)$/;"	f	typeref:typename:STBRP_DEF int
stbrp_pack_rects	interface/imstb_truetype.h	/^static void stbrp_pack_rects(stbrp_context *con, stbrp_rect *rects, int num_rects)$/;"	f	typeref:typename:void
stbrp_rect	interface/imstb_rectpack.h	/^struct stbrp_rect$/;"	s
stbrp_rect	interface/imstb_rectpack.h	/^typedef struct stbrp_rect    stbrp_rect;$/;"	t	typeref:struct:stbrp_rect
stbrp_rect	interface/imstb_truetype.h	/^struct stbrp_rect$/;"	s
stbrp_rect	interface/imstb_truetype.h	/^typedef struct stbrp_rect stbrp_rect;$/;"	t	typeref:struct:stbrp_rect
stbrp_setup_allow_out_of_mem	interface/imstb_rectpack.h	/^STBRP_DEF void stbrp_setup_allow_out_of_mem(stbrp_context *context, int allow_out_of_mem)$/;"	f	typeref:typename:STBRP_DEF void
stbrp_setup_heuristic	interface/imstb_rectpack.h	/^STBRP_DEF void stbrp_setup_heuristic(stbrp_context *context, int heuristic)$/;"	f	typeref:typename:STBRP_DEF void
stbtt_BakeFontBitmap	interface/imstb_truetype.h	/^STBTT_DEF int stbtt_BakeFontBitmap(const unsigned char *data, int offset,$/;"	f	typeref:typename:STBTT_DEF int
stbtt_BakeFontBitmap_internal	interface/imstb_truetype.h	/^static int stbtt_BakeFontBitmap_internal(unsigned char *data, int offset,  \/\/ font location (u/;"	f	typeref:typename:int
stbtt_CompareUTF8toUTF16_bigendian	interface/imstb_truetype.h	/^STBTT_DEF int stbtt_CompareUTF8toUTF16_bigendian(const char *s1, int len1, const char *s2, int l/;"	f	typeref:typename:STBTT_DEF int
stbtt_CompareUTF8toUTF16_bigendian_internal	interface/imstb_truetype.h	/^static int stbtt_CompareUTF8toUTF16_bigendian_internal(char *s1, int len1, char *s2, int len2) $/;"	f	typeref:typename:int
stbtt_FindGlyphIndex	interface/imstb_truetype.h	/^STBTT_DEF int stbtt_FindGlyphIndex(const stbtt_fontinfo *info, int unicode_codepoint)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_FindMatchingFont	interface/imstb_truetype.h	/^STBTT_DEF int stbtt_FindMatchingFont(const unsigned char *fontdata, const char *name, int flags)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_FindMatchingFont_internal	interface/imstb_truetype.h	/^static int stbtt_FindMatchingFont_internal(unsigned char *font_collection, char *name_utf8, stbt/;"	f	typeref:typename:int
stbtt_FlattenCurves	interface/imstb_truetype.h	/^static stbtt__point *stbtt_FlattenCurves(stbtt_vertex *vertices, int num_verts, float objspace_f/;"	f	typeref:typename:stbtt__point *
stbtt_FreeBitmap	interface/imstb_truetype.h	/^STBTT_DEF void stbtt_FreeBitmap(unsigned char *bitmap, void *userdata)$/;"	f	typeref:typename:STBTT_DEF void
stbtt_FreeSDF	interface/imstb_truetype.h	/^STBTT_DEF void stbtt_FreeSDF(unsigned char *bitmap, void *userdata)$/;"	f	typeref:typename:STBTT_DEF void
stbtt_FreeShape	interface/imstb_truetype.h	/^STBTT_DEF void stbtt_FreeShape(const stbtt_fontinfo *info, stbtt_vertex *v)$/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetBakedQuad	interface/imstb_truetype.h	/^STBTT_DEF void stbtt_GetBakedQuad(const stbtt_bakedchar *chardata, int pw, int ph, int char_inde/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetCodepointBitmap	interface/imstb_truetype.h	/^STBTT_DEF unsigned char *stbtt_GetCodepointBitmap(const stbtt_fontinfo *info, float scale_x, flo/;"	f	typeref:typename:STBTT_DEF unsigned char *
stbtt_GetCodepointBitmapBox	interface/imstb_truetype.h	/^STBTT_DEF void stbtt_GetCodepointBitmapBox(const stbtt_fontinfo *font, int codepoint, float scal/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetCodepointBitmapBoxSubpixel	interface/imstb_truetype.h	/^STBTT_DEF void stbtt_GetCodepointBitmapBoxSubpixel(const stbtt_fontinfo *font, int codepoint, fl/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetCodepointBitmapSubpixel	interface/imstb_truetype.h	/^STBTT_DEF unsigned char *stbtt_GetCodepointBitmapSubpixel(const stbtt_fontinfo *info, float scal/;"	f	typeref:typename:STBTT_DEF unsigned char *
stbtt_GetCodepointBox	interface/imstb_truetype.h	/^STBTT_DEF int stbtt_GetCodepointBox(const stbtt_fontinfo *info, int codepoint, int *x0, int *y0,/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetCodepointHMetrics	interface/imstb_truetype.h	/^STBTT_DEF void stbtt_GetCodepointHMetrics(const stbtt_fontinfo *info, int codepoint, int *advanc/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetCodepointKernAdvance	interface/imstb_truetype.h	/^STBTT_DEF int  stbtt_GetCodepointKernAdvance(const stbtt_fontinfo *info, int ch1, int ch2)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetCodepointSDF	interface/imstb_truetype.h	/^STBTT_DEF unsigned char * stbtt_GetCodepointSDF(const stbtt_fontinfo *info, float scale, int cod/;"	f	typeref:typename:STBTT_DEF unsigned char *
stbtt_GetCodepointShape	interface/imstb_truetype.h	/^STBTT_DEF int stbtt_GetCodepointShape(const stbtt_fontinfo *info, int unicode_codepoint, stbtt_v/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetFontBoundingBox	interface/imstb_truetype.h	/^STBTT_DEF void stbtt_GetFontBoundingBox(const stbtt_fontinfo *info, int *x0, int *y0, int *x1, i/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetFontNameString	interface/imstb_truetype.h	/^STBTT_DEF const char *stbtt_GetFontNameString(const stbtt_fontinfo *font, int *length, int platf/;"	f	typeref:typename:STBTT_DEF const char *
stbtt_GetFontOffsetForIndex	interface/imstb_truetype.h	/^STBTT_DEF int stbtt_GetFontOffsetForIndex(const unsigned char *data, int index)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetFontOffsetForIndex_internal	interface/imstb_truetype.h	/^static int stbtt_GetFontOffsetForIndex_internal(unsigned char *font_collection, int index)$/;"	f	typeref:typename:int
stbtt_GetFontVMetrics	interface/imstb_truetype.h	/^STBTT_DEF void stbtt_GetFontVMetrics(const stbtt_fontinfo *info, int *ascent, int *descent, int /;"	f	typeref:typename:STBTT_DEF void
stbtt_GetFontVMetricsOS2	interface/imstb_truetype.h	/^STBTT_DEF int  stbtt_GetFontVMetricsOS2(const stbtt_fontinfo *info, int *typoAscent, int *typoDe/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetGlyphBitmap	interface/imstb_truetype.h	/^STBTT_DEF unsigned char *stbtt_GetGlyphBitmap(const stbtt_fontinfo *info, float scale_x, float s/;"	f	typeref:typename:STBTT_DEF unsigned char *
stbtt_GetGlyphBitmapBox	interface/imstb_truetype.h	/^STBTT_DEF void stbtt_GetGlyphBitmapBox(const stbtt_fontinfo *font, int glyph, float scale_x, flo/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetGlyphBitmapBoxSubpixel	interface/imstb_truetype.h	/^STBTT_DEF void stbtt_GetGlyphBitmapBoxSubpixel(const stbtt_fontinfo *font, int glyph, float scal/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetGlyphBitmapSubpixel	interface/imstb_truetype.h	/^STBTT_DEF unsigned char *stbtt_GetGlyphBitmapSubpixel(const stbtt_fontinfo *info, float scale_x,/;"	f	typeref:typename:STBTT_DEF unsigned char *
stbtt_GetGlyphBox	interface/imstb_truetype.h	/^STBTT_DEF int stbtt_GetGlyphBox(const stbtt_fontinfo *info, int glyph_index, int *x0, int *y0, i/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetGlyphHMetrics	interface/imstb_truetype.h	/^STBTT_DEF void stbtt_GetGlyphHMetrics(const stbtt_fontinfo *info, int glyph_index, int *advanceW/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetGlyphKernAdvance	interface/imstb_truetype.h	/^STBTT_DEF int  stbtt_GetGlyphKernAdvance(const stbtt_fontinfo *info, int g1, int g2)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetGlyphSDF	interface/imstb_truetype.h	/^STBTT_DEF unsigned char * stbtt_GetGlyphSDF(const stbtt_fontinfo *info, float scale, int glyph, /;"	f	typeref:typename:STBTT_DEF unsigned char *
stbtt_GetGlyphShape	interface/imstb_truetype.h	/^STBTT_DEF int stbtt_GetGlyphShape(const stbtt_fontinfo *info, int glyph_index, stbtt_vertex **pv/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetNumberOfFonts	interface/imstb_truetype.h	/^STBTT_DEF int stbtt_GetNumberOfFonts(const unsigned char *data)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetNumberOfFonts_internal	interface/imstb_truetype.h	/^static int stbtt_GetNumberOfFonts_internal(unsigned char *font_collection)$/;"	f	typeref:typename:int
stbtt_GetPackedQuad	interface/imstb_truetype.h	/^STBTT_DEF void stbtt_GetPackedQuad(const stbtt_packedchar *chardata, int pw, int ph, int char_in/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetScaledFontVMetrics	interface/imstb_truetype.h	/^STBTT_DEF void stbtt_GetScaledFontVMetrics(const unsigned char *fontdata, int index, float size,/;"	f	typeref:typename:STBTT_DEF void
stbtt_InitFont	interface/imstb_truetype.h	/^STBTT_DEF int stbtt_InitFont(stbtt_fontinfo *info, const unsigned char *data, int offset)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_InitFont_internal	interface/imstb_truetype.h	/^static int stbtt_InitFont_internal(stbtt_fontinfo *info, unsigned char *data, int fontstart)$/;"	f	typeref:typename:int
stbtt_IsGlyphEmpty	interface/imstb_truetype.h	/^STBTT_DEF int stbtt_IsGlyphEmpty(const stbtt_fontinfo *info, int glyph_index)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_MakeCodepointBitmap	interface/imstb_truetype.h	/^STBTT_DEF void stbtt_MakeCodepointBitmap(const stbtt_fontinfo *info, unsigned char *output, int /;"	f	typeref:typename:STBTT_DEF void
stbtt_MakeCodepointBitmapSubpixel	interface/imstb_truetype.h	/^STBTT_DEF void stbtt_MakeCodepointBitmapSubpixel(const stbtt_fontinfo *info, unsigned char *outp/;"	f	typeref:typename:STBTT_DEF void
stbtt_MakeCodepointBitmapSubpixelPrefilter	interface/imstb_truetype.h	/^STBTT_DEF void stbtt_MakeCodepointBitmapSubpixelPrefilter(const stbtt_fontinfo *info, unsigned c/;"	f	typeref:typename:STBTT_DEF void
stbtt_MakeGlyphBitmap	interface/imstb_truetype.h	/^STBTT_DEF void stbtt_MakeGlyphBitmap(const stbtt_fontinfo *info, unsigned char *output, int out_/;"	f	typeref:typename:STBTT_DEF void
stbtt_MakeGlyphBitmapSubpixel	interface/imstb_truetype.h	/^STBTT_DEF void stbtt_MakeGlyphBitmapSubpixel(const stbtt_fontinfo *info, unsigned char *output, /;"	f	typeref:typename:STBTT_DEF void
stbtt_MakeGlyphBitmapSubpixelPrefilter	interface/imstb_truetype.h	/^STBTT_DEF void stbtt_MakeGlyphBitmapSubpixelPrefilter(const stbtt_fontinfo *info, unsigned char /;"	f	typeref:typename:STBTT_DEF void
stbtt_PackBegin	interface/imstb_truetype.h	/^STBTT_DEF int stbtt_PackBegin(stbtt_pack_context *spc, unsigned char *pixels, int pw, int ph, in/;"	f	typeref:typename:STBTT_DEF int
stbtt_PackEnd	interface/imstb_truetype.h	/^STBTT_DEF void stbtt_PackEnd  (stbtt_pack_context *spc)$/;"	f	typeref:typename:STBTT_DEF void
stbtt_PackFontRange	interface/imstb_truetype.h	/^STBTT_DEF int stbtt_PackFontRange(stbtt_pack_context *spc, const unsigned char *fontdata, int fo/;"	f	typeref:typename:STBTT_DEF int
stbtt_PackFontRanges	interface/imstb_truetype.h	/^STBTT_DEF int stbtt_PackFontRanges(stbtt_pack_context *spc, const unsigned char *fontdata, int f/;"	f	typeref:typename:STBTT_DEF int
stbtt_PackFontRangesGatherRects	interface/imstb_truetype.h	/^STBTT_DEF int stbtt_PackFontRangesGatherRects(stbtt_pack_context *spc, const stbtt_fontinfo *inf/;"	f	typeref:typename:STBTT_DEF int
stbtt_PackFontRangesPackRects	interface/imstb_truetype.h	/^STBTT_DEF void stbtt_PackFontRangesPackRects(stbtt_pack_context *spc, stbrp_rect *rects, int num/;"	f	typeref:typename:STBTT_DEF void
stbtt_PackFontRangesRenderIntoRects	interface/imstb_truetype.h	/^STBTT_DEF int stbtt_PackFontRangesRenderIntoRects(stbtt_pack_context *spc, const stbtt_fontinfo /;"	f	typeref:typename:STBTT_DEF int
stbtt_PackSetOversampling	interface/imstb_truetype.h	/^STBTT_DEF void stbtt_PackSetOversampling(stbtt_pack_context *spc, unsigned int h_oversample, uns/;"	f	typeref:typename:STBTT_DEF void
stbtt_PackSetSkipMissingCodepoints	interface/imstb_truetype.h	/^STBTT_DEF void stbtt_PackSetSkipMissingCodepoints(stbtt_pack_context *spc, int skip)$/;"	f	typeref:typename:STBTT_DEF void
stbtt_Rasterize	interface/imstb_truetype.h	/^STBTT_DEF void stbtt_Rasterize(stbtt__bitmap *result, float flatness_in_pixels, stbtt_vertex *ve/;"	f	typeref:typename:STBTT_DEF void
stbtt_ScaleForMappingEmToPixels	interface/imstb_truetype.h	/^STBTT_DEF float stbtt_ScaleForMappingEmToPixels(const stbtt_fontinfo *info, float pixels)$/;"	f	typeref:typename:STBTT_DEF float
stbtt_ScaleForPixelHeight	interface/imstb_truetype.h	/^STBTT_DEF float stbtt_ScaleForPixelHeight(const stbtt_fontinfo *info, float height)$/;"	f	typeref:typename:STBTT_DEF float
stbtt__CompareUTF8toUTF16_bigendian_prefix	interface/imstb_truetype.h	/^static stbtt_int32 stbtt__CompareUTF8toUTF16_bigendian_prefix(stbtt_uint8 *s1, stbtt_int32 len1,/;"	f	typeref:typename:stbtt_int32
stbtt__GetCoverageIndex	interface/imstb_truetype.h	/^static stbtt_int32  stbtt__GetCoverageIndex(stbtt_uint8 *coverageTable, int glyph)$/;"	f	typeref:typename:stbtt_int32
stbtt__GetGlyfOffset	interface/imstb_truetype.h	/^static int stbtt__GetGlyfOffset(const stbtt_fontinfo *info, int glyph_index)$/;"	f	typeref:typename:int
stbtt__GetGlyphClass	interface/imstb_truetype.h	/^static stbtt_int32  stbtt__GetGlyphClass(stbtt_uint8 *classDefTable, int glyph)$/;"	f	typeref:typename:stbtt_int32
stbtt__GetGlyphGPOSInfoAdvance	interface/imstb_truetype.h	/^static stbtt_int32  stbtt__GetGlyphGPOSInfoAdvance(const stbtt_fontinfo *info, int glyph1, int g/;"	f	typeref:typename:stbtt_int32
stbtt__GetGlyphInfoT2	interface/imstb_truetype.h	/^static int stbtt__GetGlyphInfoT2(const stbtt_fontinfo *info, int glyph_index, int *x0, int *y0, /;"	f	typeref:typename:int
stbtt__GetGlyphKernInfoAdvance	interface/imstb_truetype.h	/^static int  stbtt__GetGlyphKernInfoAdvance(const stbtt_fontinfo *info, int glyph1, int glyph2)$/;"	f	typeref:typename:int
stbtt__GetGlyphShapeT2	interface/imstb_truetype.h	/^static int stbtt__GetGlyphShapeT2(const stbtt_fontinfo *info, int glyph_index, stbtt_vertex **pv/;"	f	typeref:typename:int
stbtt__GetGlyphShapeTT	interface/imstb_truetype.h	/^static int stbtt__GetGlyphShapeTT(const stbtt_fontinfo *info, int glyph_index, stbtt_vertex **pv/;"	f	typeref:typename:int
stbtt__active_edge	interface/imstb_truetype.h	/^typedef struct stbtt__active_edge$/;"	s
stbtt__active_edge	interface/imstb_truetype.h	/^} stbtt__active_edge;$/;"	t	typeref:struct:stbtt__active_edge
stbtt__add_point	interface/imstb_truetype.h	/^static void stbtt__add_point(stbtt__point *points, int n, float x, float y)$/;"	f	typeref:typename:void
stbtt__bitmap	interface/imstb_truetype.h	/^} stbtt__bitmap;$/;"	t	typeref:struct:__anond1ee77bb0808
stbtt__buf	interface/imstb_truetype.h	/^} stbtt__buf;$/;"	t	typeref:struct:__anond1ee77bb0108
stbtt__buf_get	interface/imstb_truetype.h	/^static stbtt_uint32 stbtt__buf_get(stbtt__buf *b, int n)$/;"	f	typeref:typename:stbtt_uint32
stbtt__buf_get16	interface/imstb_truetype.h	/^#define stbtt__buf_get16(/;"	d
stbtt__buf_get32	interface/imstb_truetype.h	/^#define stbtt__buf_get32(/;"	d
stbtt__buf_get8	interface/imstb_truetype.h	/^static stbtt_uint8 stbtt__buf_get8(stbtt__buf *b)$/;"	f	typeref:typename:stbtt_uint8
stbtt__buf_peek8	interface/imstb_truetype.h	/^static stbtt_uint8 stbtt__buf_peek8(stbtt__buf *b)$/;"	f	typeref:typename:stbtt_uint8
stbtt__buf_range	interface/imstb_truetype.h	/^static stbtt__buf stbtt__buf_range(const stbtt__buf *b, int o, int s)$/;"	f	typeref:typename:stbtt__buf
stbtt__buf_seek	interface/imstb_truetype.h	/^static void stbtt__buf_seek(stbtt__buf *b, int o)$/;"	f	typeref:typename:void
stbtt__buf_skip	interface/imstb_truetype.h	/^static void stbtt__buf_skip(stbtt__buf *b, int o)$/;"	f	typeref:typename:void
stbtt__cff_get_index	interface/imstb_truetype.h	/^static stbtt__buf stbtt__cff_get_index(stbtt__buf *b)$/;"	f	typeref:typename:stbtt__buf
stbtt__cff_index_count	interface/imstb_truetype.h	/^static int stbtt__cff_index_count(stbtt__buf *b)$/;"	f	typeref:typename:int
stbtt__cff_index_get	interface/imstb_truetype.h	/^static stbtt__buf stbtt__cff_index_get(stbtt__buf b, int i)$/;"	f	typeref:typename:stbtt__buf
stbtt__cff_int	interface/imstb_truetype.h	/^static stbtt_uint32 stbtt__cff_int(stbtt__buf *b)$/;"	f	typeref:typename:stbtt_uint32
stbtt__cff_skip_operand	interface/imstb_truetype.h	/^static void stbtt__cff_skip_operand(stbtt__buf *b) {$/;"	f	typeref:typename:void
stbtt__check_size16	interface/imstb_truetype.h	/^   typedef char stbtt__check_size16[sizeof(stbtt_int16)==2 ? 1 : -1];$/;"	t	typeref:typename:char[sizeof (stbtt_int16)==2?1:-1]
stbtt__check_size32	interface/imstb_truetype.h	/^   typedef char stbtt__check_size32[sizeof(stbtt_int32)==4 ? 1 : -1];$/;"	t	typeref:typename:char[sizeof (stbtt_int32)==4?1:-1]
stbtt__cid_get_glyph_subrs	interface/imstb_truetype.h	/^static stbtt__buf stbtt__cid_get_glyph_subrs(const stbtt_fontinfo *info, int glyph_index)$/;"	f	typeref:typename:stbtt__buf
stbtt__close_shape	interface/imstb_truetype.h	/^static int stbtt__close_shape(stbtt_vertex *vertices, int num_vertices, int was_off, int start_o/;"	f	typeref:typename:int
stbtt__compute_crossings_x	interface/imstb_truetype.h	/^static int stbtt__compute_crossings_x(float x, float y, int nverts, stbtt_vertex *verts)$/;"	f	typeref:typename:int
stbtt__csctx	interface/imstb_truetype.h	/^} stbtt__csctx;$/;"	t	typeref:struct:__anond1ee77bb0f08
stbtt__csctx_close_shape	interface/imstb_truetype.h	/^static void stbtt__csctx_close_shape(stbtt__csctx *ctx)$/;"	f	typeref:typename:void
stbtt__csctx_rccurve_to	interface/imstb_truetype.h	/^static void stbtt__csctx_rccurve_to(stbtt__csctx *ctx, float dx1, float dy1, float dx2, float dy/;"	f	typeref:typename:void
stbtt__csctx_rline_to	interface/imstb_truetype.h	/^static void stbtt__csctx_rline_to(stbtt__csctx *ctx, float dx, float dy)$/;"	f	typeref:typename:void
stbtt__csctx_rmove_to	interface/imstb_truetype.h	/^static void stbtt__csctx_rmove_to(stbtt__csctx *ctx, float dx, float dy)$/;"	f	typeref:typename:void
stbtt__csctx_v	interface/imstb_truetype.h	/^static void stbtt__csctx_v(stbtt__csctx *c, stbtt_uint8 type, stbtt_int32 x, stbtt_int32 y, stbt/;"	f	typeref:typename:void
stbtt__cuberoot	interface/imstb_truetype.h	/^static float stbtt__cuberoot( float x )$/;"	f	typeref:typename:float
stbtt__dict_get	interface/imstb_truetype.h	/^static stbtt__buf stbtt__dict_get(stbtt__buf *b, int key)$/;"	f	typeref:typename:stbtt__buf
stbtt__dict_get_ints	interface/imstb_truetype.h	/^static void stbtt__dict_get_ints(stbtt__buf *b, int key, int outcount, stbtt_uint32 *out)$/;"	f	typeref:typename:void
stbtt__edge	interface/imstb_truetype.h	/^typedef struct stbtt__edge {$/;"	s
stbtt__edge	interface/imstb_truetype.h	/^} stbtt__edge;$/;"	t	typeref:struct:stbtt__edge
stbtt__fill_active_edges	interface/imstb_truetype.h	/^static void stbtt__fill_active_edges(unsigned char *scanline, int len, stbtt__active_edge *e, in/;"	f	typeref:typename:void
stbtt__fill_active_edges_new	interface/imstb_truetype.h	/^static void stbtt__fill_active_edges_new(float *scanline, float *scanline_fill, int len, stbtt__/;"	f	typeref:typename:void
stbtt__find_table	interface/imstb_truetype.h	/^static stbtt_uint32 stbtt__find_table(stbtt_uint8 *data, stbtt_uint32 fontstart, const char *tag/;"	f	typeref:typename:stbtt_uint32
stbtt__get_subr	interface/imstb_truetype.h	/^static stbtt__buf stbtt__get_subr(stbtt__buf idx, int n)$/;"	f	typeref:typename:stbtt__buf
stbtt__get_subrs	interface/imstb_truetype.h	/^static stbtt__buf stbtt__get_subrs(stbtt__buf cff, stbtt__buf fontdict)$/;"	f	typeref:typename:stbtt__buf
stbtt__h_prefilter	interface/imstb_truetype.h	/^static void stbtt__h_prefilter(unsigned char *pixels, int w, int h, int stride_in_bytes, unsigne/;"	f	typeref:typename:void
stbtt__handle_clipped_edge	interface/imstb_truetype.h	/^static void stbtt__handle_clipped_edge(float *scanline, int x, stbtt__active_edge *e, float x0, /;"	f	typeref:typename:void
stbtt__hheap	interface/imstb_truetype.h	/^typedef struct stbtt__hheap$/;"	s
stbtt__hheap	interface/imstb_truetype.h	/^} stbtt__hheap;$/;"	t	typeref:struct:stbtt__hheap
stbtt__hheap_alloc	interface/imstb_truetype.h	/^static void *stbtt__hheap_alloc(stbtt__hheap *hh, size_t size, void *userdata)$/;"	f	typeref:typename:void *
stbtt__hheap_chunk	interface/imstb_truetype.h	/^typedef struct stbtt__hheap_chunk$/;"	s
stbtt__hheap_chunk	interface/imstb_truetype.h	/^} stbtt__hheap_chunk;$/;"	t	typeref:struct:stbtt__hheap_chunk
stbtt__hheap_cleanup	interface/imstb_truetype.h	/^static void stbtt__hheap_cleanup(stbtt__hheap *hh, void *userdata)$/;"	f	typeref:typename:void
stbtt__hheap_free	interface/imstb_truetype.h	/^static void stbtt__hheap_free(stbtt__hheap *hh, void *p)$/;"	f	typeref:typename:void
stbtt__isfont	interface/imstb_truetype.h	/^static int stbtt__isfont(stbtt_uint8 *font)$/;"	f	typeref:typename:int
stbtt__matches	interface/imstb_truetype.h	/^static int stbtt__matches(stbtt_uint8 *fc, stbtt_uint32 offset, stbtt_uint8 *name, stbtt_int32 f/;"	f	typeref:typename:int
stbtt__matchpair	interface/imstb_truetype.h	/^static int stbtt__matchpair(stbtt_uint8 *fc, stbtt_uint32 nm, stbtt_uint8 *name, stbtt_int32 nle/;"	f	typeref:typename:int
stbtt__new_active	interface/imstb_truetype.h	/^static stbtt__active_edge *stbtt__new_active(stbtt__hheap *hh, stbtt__edge *e, int off_x, float /;"	f	typeref:typename:stbtt__active_edge *
stbtt__new_buf	interface/imstb_truetype.h	/^static stbtt__buf stbtt__new_buf(const void *p, size_t size)$/;"	f	typeref:typename:stbtt__buf
stbtt__oversample_shift	interface/imstb_truetype.h	/^static float stbtt__oversample_shift(int oversample)$/;"	f	typeref:typename:float
stbtt__point	interface/imstb_truetype.h	/^} stbtt__point;$/;"	t	typeref:struct:__anond1ee77bb1008
stbtt__rasterize	interface/imstb_truetype.h	/^static void stbtt__rasterize(stbtt__bitmap *result, stbtt__point *pts, int *wcount, int windings/;"	f	typeref:typename:void
stbtt__rasterize_sorted_edges	interface/imstb_truetype.h	/^static void stbtt__rasterize_sorted_edges(stbtt__bitmap *result, stbtt__edge *e, int n, int vsub/;"	f	typeref:typename:void
stbtt__ray_intersect_bezier	interface/imstb_truetype.h	/^static int stbtt__ray_intersect_bezier(float orig[2], float ray[2], float q0[2], float q1[2], fl/;"	f	typeref:typename:int
stbtt__run_charstring	interface/imstb_truetype.h	/^static int stbtt__run_charstring(const stbtt_fontinfo *info, int glyph_index, stbtt__csctx *c)$/;"	f	typeref:typename:int
stbtt__solve_cubic	interface/imstb_truetype.h	/^static int stbtt__solve_cubic(float a, float b, float c, float* r)$/;"	f	typeref:typename:int
stbtt__sort_edges	interface/imstb_truetype.h	/^static void stbtt__sort_edges(stbtt__edge *p, int n)$/;"	f	typeref:typename:void
stbtt__sort_edges_ins_sort	interface/imstb_truetype.h	/^static void stbtt__sort_edges_ins_sort(stbtt__edge *p, int n)$/;"	f	typeref:typename:void
stbtt__sort_edges_quicksort	interface/imstb_truetype.h	/^static void stbtt__sort_edges_quicksort(stbtt__edge *p, int n)$/;"	f	typeref:typename:void
stbtt__tesselate_cubic	interface/imstb_truetype.h	/^static void stbtt__tesselate_cubic(stbtt__point *points, int *num_points, float x0, float y0, fl/;"	f	typeref:typename:void
stbtt__tesselate_curve	interface/imstb_truetype.h	/^static int stbtt__tesselate_curve(stbtt__point *points, int *num_points, float x0, float y0, flo/;"	f	typeref:typename:int
stbtt__test_oversample_pow2	interface/imstb_truetype.h	/^typedef int stbtt__test_oversample_pow2[(STBTT_MAX_OVERSAMPLE & (STBTT_MAX_OVERSAMPLE-1)) == 0 ?/;"	t	typeref:typename:int[(STBTT_MAX_OVERSAMPLE & (STBTT_MAX_OVERSAMPLE-1))==0?1:-1]
stbtt__track_vertex	interface/imstb_truetype.h	/^static void stbtt__track_vertex(stbtt__csctx *c, stbtt_int32 x, stbtt_int32 y)$/;"	f	typeref:typename:void
stbtt__v_prefilter	interface/imstb_truetype.h	/^static void stbtt__v_prefilter(unsigned char *pixels, int w, int h, int stride_in_bytes, unsigne/;"	f	typeref:typename:void
stbtt_aligned_quad	interface/imstb_truetype.h	/^} stbtt_aligned_quad;$/;"	t	typeref:struct:__anond1ee77bb0308
stbtt_bakedchar	interface/imstb_truetype.h	/^} stbtt_bakedchar;$/;"	t	typeref:struct:__anond1ee77bb0208
stbtt_fontinfo	interface/imstb_truetype.h	/^struct stbtt_fontinfo$/;"	s
stbtt_fontinfo	interface/imstb_truetype.h	/^typedef struct stbtt_fontinfo stbtt_fontinfo;$/;"	t	typeref:struct:stbtt_fontinfo
stbtt_int16	interface/imstb_truetype.h	/^   typedef signed   short  stbtt_int16;$/;"	t	typeref:typename:signed short
stbtt_int32	interface/imstb_truetype.h	/^   typedef signed   int    stbtt_int32;$/;"	t	typeref:typename:signed int
stbtt_int8	interface/imstb_truetype.h	/^   typedef signed   char   stbtt_int8;$/;"	t	typeref:typename:signed char
stbtt_pack_context	interface/imstb_truetype.h	/^struct stbtt_pack_context {$/;"	s
stbtt_pack_context	interface/imstb_truetype.h	/^typedef struct stbtt_pack_context stbtt_pack_context;$/;"	t	typeref:struct:stbtt_pack_context
stbtt_pack_range	interface/imstb_truetype.h	/^} stbtt_pack_range;$/;"	t	typeref:struct:__anond1ee77bb0508
stbtt_packedchar	interface/imstb_truetype.h	/^} stbtt_packedchar;$/;"	t	typeref:struct:__anond1ee77bb0408
stbtt_setvertex	interface/imstb_truetype.h	/^static void stbtt_setvertex(stbtt_vertex *v, stbtt_uint8 type, stbtt_int32 x, stbtt_int32 y, stb/;"	f	typeref:typename:void
stbtt_tag	interface/imstb_truetype.h	/^#define stbtt_tag(/;"	d
stbtt_tag4	interface/imstb_truetype.h	/^#define stbtt_tag4(/;"	d
stbtt_uint16	interface/imstb_truetype.h	/^   typedef unsigned short  stbtt_uint16;$/;"	t	typeref:typename:unsigned short
stbtt_uint32	interface/imstb_truetype.h	/^   typedef unsigned int    stbtt_uint32;$/;"	t	typeref:typename:unsigned int
stbtt_uint8	interface/imstb_truetype.h	/^   typedef unsigned char   stbtt_uint8;$/;"	t	typeref:typename:unsigned char
stbtt_vertex	interface/imstb_truetype.h	/^   } stbtt_vertex;$/;"	t	typeref:struct:__anond1ee77bb0708
stbtt_vertex_type	interface/imstb_truetype.h	/^   #define stbtt_vertex_type /;"	d
stride	interface/imstb_truetype.h	/^   int w,h,stride;$/;"	m	struct:__anond1ee77bb0808	typeref:typename:int
stride_in_bytes	interface/imstb_truetype.h	/^   int   stride_in_bytes;$/;"	m	struct:stbtt_pack_context	typeref:typename:int
subrs	interface/imstb_truetype.h	/^   stbtt__buf subrs;                  \/\/ private charstring subroutines index$/;"	m	struct:stbtt_fontinfo	typeref:typename:stbtt__buf
swap	interface/imgui.h	/^    inline void         swap(ImVector<T>& rhs)              { int rhs_size = rhs.Size; rhs.Size /;"	f	struct:ImVector	typeref:typename:void
sy	interface/imstb_truetype.h	/^   float sy;$/;"	m	struct:stbtt__active_edge	typeref:typename:float
t0	interface/imstb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anond1ee77bb0308	typeref:typename:float
t1	interface/imstb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anond1ee77bb0308	typeref:typename:float
tcmSize	arm.hpp	/^        u32 tcmSize;$/;"	m	class:CP15	typeref:typename:u32
ttBYTE	interface/imstb_truetype.h	/^#define ttBYTE(/;"	d
ttCHAR	interface/imstb_truetype.h	/^#define ttCHAR(/;"	d
ttFixed	interface/imstb_truetype.h	/^#define ttFixed(/;"	d
ttLONG	interface/imstb_truetype.h	/^static stbtt_int32 ttLONG(stbtt_uint8 *p)    { return (p[0]<<24) + (p[1]<<16) + (p[2]<<8) + p[3]/;"	f	typeref:typename:stbtt_int32
ttSHORT	interface/imstb_truetype.h	/^static stbtt_int16 ttSHORT(stbtt_uint8 *p)   { return p[0]*256 + p[1]; }$/;"	f	typeref:typename:stbtt_int16
ttULONG	interface/imstb_truetype.h	/^static stbtt_uint32 ttULONG(stbtt_uint8 *p)  { return (p[0]<<24) + (p[1]<<16) + (p[2]<<8) + p[3]/;"	f	typeref:typename:stbtt_uint32
ttUSHORT	interface/imstb_truetype.h	/^static stbtt_uint16 ttUSHORT(stbtt_uint8 *p) { return p[0]*256 + p[1]; }$/;"	f	typeref:typename:stbtt_uint16
type	interface/imstb_truetype.h	/^      unsigned char type,padding;$/;"	m	struct:__anond1ee77bb0708	typeref:typename:unsigned char
u16	types.hpp	/^using u16 = std::uint16_t;$/;"	t	typeref:typename:std::uint16_t
u16_fast	types.hpp	/^using u16_fast = std::uint_fast16_t;$/;"	t	typeref:typename:std::uint_fast16_t
u32	types.hpp	/^using u32 = std::uint32_t;$/;"	t	typeref:typename:std::uint32_t
u32_fast	types.hpp	/^using u32_fast = std::uint_fast32_t;$/;"	t	typeref:typename:std::uint_fast32_t
u64	types.hpp	/^using u64 = std::uint64_t;$/;"	t	typeref:typename:std::uint64_t
u64_fast	types.hpp	/^using u64_fast = std::uint_fast64_t;$/;"	t	typeref:typename:std::uint_fast64_t
u8	types.hpp	/^using u8 =  std::uint8_t;$/;"	t	typeref:typename:std::uint8_t
u8_fast	types.hpp	/^using u8_fast  = std::uint_fast8_t;$/;"	t	typeref:typename:std::uint_fast8_t
undo_char	interface/imstb_textedit.h	/^   STB_TEXTEDIT_CHARTYPE  undo_char[STB_TEXTEDIT_UNDOCHARCOUNT];$/;"	m	struct:__anon0a8ecdc40208	typeref:typename:STB_TEXTEDIT_CHARTYPE[]
undo_char_point	interface/imstb_textedit.h	/^   int undo_char_point, redo_char_point;$/;"	m	struct:__anon0a8ecdc40208	typeref:typename:int
undo_point	interface/imstb_textedit.h	/^   short undo_point, redo_point;$/;"	m	struct:__anon0a8ecdc40208	typeref:typename:short
undo_rec	interface/imstb_textedit.h	/^   StbUndoRecord          undo_rec [STB_TEXTEDIT_UNDOSTATECOUNT];$/;"	m	struct:__anon0a8ecdc40208	typeref:typename:StbUndoRecord[]
undostate	interface/imstb_textedit.h	/^   StbUndoState undostate;$/;"	m	struct:__anon0a8ecdc40308	typeref:typename:StbUndoState
user_allocator_context	interface/imstb_truetype.h	/^   void *user_allocator_context;$/;"	m	struct:stbtt_pack_context	typeref:typename:void *
userdata	interface/imstb_truetype.h	/^   void           * userdata;$/;"	m	struct:stbtt_fontinfo	typeref:typename:void *
uv	interface/imgui.h	/^    ImVec2  uv;$/;"	m	struct:ImDrawVert	typeref:typename:ImVec2
v_oversample	interface/imstb_truetype.h	/^   unsigned char h_oversample, v_oversample; \/\/ don't set these, they're used internally$/;"	m	struct:__anond1ee77bb0508	typeref:typename:unsigned char
v_oversample	interface/imstb_truetype.h	/^   unsigned int   h_oversample, v_oversample;$/;"	m	struct:stbtt_pack_context	typeref:typename:unsigned int
va_copy	interface/imgui.cpp	/^#define va_copy(/;"	d	file:
val_f	interface/imgui.h	/^        union { int val_i; float val_f; void* val_p; };$/;"	m	union:ImGuiStorage::ImGuiStoragePair::__anon2d41b9d6010a	typeref:typename:float
val_i	interface/imgui.h	/^        union { int val_i; float val_f; void* val_p; };$/;"	m	union:ImGuiStorage::ImGuiStoragePair::__anon2d41b9d6010a	typeref:typename:int
val_p	interface/imgui.h	/^        union { int val_i; float val_f; void* val_p; };$/;"	m	union:ImGuiStorage::ImGuiStoragePair::__anon2d41b9d6010a	typeref:typename:void *
value_type	interface/imgui.h	/^    typedef T                   value_type;$/;"	t	struct:ImVector	typeref:typename:T
vsnprintf	interface/imgui.cpp	/^#define vsnprintf /;"	d	file:
w	interface/imgui.h	/^    float                                   x, y, z, w;$/;"	m	struct:ImVec4	typeref:typename:float
w	interface/imstb_rectpack.h	/^   stbrp_coord    w, h;$/;"	m	struct:stbrp_rect	typeref:typename:stbrp_coord
w	interface/imstb_truetype.h	/^   int id,w,h,was_packed;$/;"	m	struct:stbrp_rect	typeref:typename:int
w	interface/imstb_truetype.h	/^   int w,h,stride;$/;"	m	struct:__anond1ee77bb0808	typeref:typename:int
warn	debug.hpp	/^        inline void warn() {}$/;"	f	namespace:debug	typeref:typename:void
was_packed	interface/imstb_rectpack.h	/^   int            was_packed;  \/\/ non-zero if valid packing$/;"	m	struct:stbrp_rect	typeref:typename:int
was_packed	interface/imstb_truetype.h	/^   int id,w,h,was_packed;$/;"	m	struct:stbrp_rect	typeref:typename:int
where	interface/imstb_textedit.h	/^   STB_TEXTEDIT_POSITIONTYPE  where;$/;"	m	struct:__anon0a8ecdc40108	typeref:typename:STB_TEXTEDIT_POSITIONTYPE
width	interface/imstb_rectpack.h	/^   int width;$/;"	m	struct:stbrp_context	typeref:typename:int
width	interface/imstb_truetype.h	/^   int   width;$/;"	m	struct:stbtt_pack_context	typeref:typename:int
width	interface/imstb_truetype.h	/^   int width,height;$/;"	m	struct:__anond1ee77bb1108	typeref:typename:int
write	debug.hpp	/^        inline int write(char* buffer, const char* fmt, ...) {$/;"	f	namespace:debug	typeref:typename:int
x	interface/imgui.h	/^    float                                   x, y, z, w;$/;"	m	struct:ImVec4	typeref:typename:float
x	interface/imgui.h	/^    float                                   x, y;$/;"	m	struct:ImVec2	typeref:typename:float
x	interface/imgui_internal.h	/^    float   x;$/;"	m	struct:ImVec1	typeref:typename:float
x	interface/imgui_internal.h	/^    short   x, y;$/;"	m	struct:ImVec2ih	typeref:typename:short
x	interface/imstb_rectpack.h	/^   int x,y;$/;"	m	struct:__anonba8239e60308	typeref:typename:int
x	interface/imstb_rectpack.h	/^   stbrp_coord    x, y;$/;"	m	struct:stbrp_rect	typeref:typename:stbrp_coord
x	interface/imstb_rectpack.h	/^   stbrp_coord  x,y;$/;"	m	struct:stbrp_node	typeref:typename:stbrp_coord
x	interface/imstb_textedit.h	/^   float x,y;    \/\/ position of n'th character$/;"	m	struct:__anon0a8ecdc40508	typeref:typename:float
x	interface/imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anond1ee77bb0708	typeref:typename:stbtt_vertex_type
x	interface/imstb_truetype.h	/^   float x, y;$/;"	m	struct:__anond1ee77bb0f08	typeref:typename:float
x	interface/imstb_truetype.h	/^   float x,y;$/;"	m	struct:__anond1ee77bb1008	typeref:typename:float
x	interface/imstb_truetype.h	/^   int x,dx;$/;"	m	struct:stbtt__active_edge	typeref:typename:int
x	interface/imstb_truetype.h	/^   int x,y,bottom_y;$/;"	m	struct:__anond1ee77bb1108	typeref:typename:int
x	interface/imstb_truetype.h	/^   stbrp_coord x,y;$/;"	m	struct:stbrp_rect	typeref:typename:stbrp_coord
x	interface/imstb_truetype.h	/^   unsigned char x;$/;"	m	struct:__anond1ee77bb1208	typeref:typename:unsigned char
x0	interface/imstb_textedit.h	/^   float x0,x1;             \/\/ starting x location, end x location (allows for align=right, et/;"	m	struct:__anon0a8ecdc40408	typeref:typename:float
x0	interface/imstb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge	typeref:typename:float
x0	interface/imstb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anond1ee77bb0308	typeref:typename:float
x0	interface/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anond1ee77bb0208	typeref:typename:unsigned short
x0	interface/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anond1ee77bb0408	typeref:typename:unsigned short
x1	interface/imstb_textedit.h	/^   float x0,x1;             \/\/ starting x location, end x location (allows for align=right, et/;"	m	struct:__anon0a8ecdc40408	typeref:typename:float
x1	interface/imstb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge	typeref:typename:float
x1	interface/imstb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anond1ee77bb0308	typeref:typename:float
x1	interface/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anond1ee77bb0208	typeref:typename:unsigned short
x1	interface/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anond1ee77bb0408	typeref:typename:unsigned short
xadvance	interface/imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anond1ee77bb0208	typeref:typename:float
xadvance	interface/imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anond1ee77bb0408	typeref:typename:float
xoff	interface/imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anond1ee77bb0208	typeref:typename:float
xoff	interface/imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anond1ee77bb0408	typeref:typename:float
xoff2	interface/imstb_truetype.h	/^   float xoff2,yoff2;$/;"	m	struct:__anond1ee77bb0408	typeref:typename:float
y	interface/imgui.h	/^    float                                   x, y, z, w;$/;"	m	struct:ImVec4	typeref:typename:float
y	interface/imgui.h	/^    float                                   x, y;$/;"	m	struct:ImVec2	typeref:typename:float
y	interface/imgui_internal.h	/^    short   x, y;$/;"	m	struct:ImVec2ih	typeref:typename:short
y	interface/imstb_rectpack.h	/^   int x,y;$/;"	m	struct:__anonba8239e60308	typeref:typename:int
y	interface/imstb_rectpack.h	/^   stbrp_coord    x, y;$/;"	m	struct:stbrp_rect	typeref:typename:stbrp_coord
y	interface/imstb_rectpack.h	/^   stbrp_coord  x,y;$/;"	m	struct:stbrp_node	typeref:typename:stbrp_coord
y	interface/imstb_textedit.h	/^   float x,y;    \/\/ position of n'th character$/;"	m	struct:__anon0a8ecdc40508	typeref:typename:float
y	interface/imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anond1ee77bb0708	typeref:typename:stbtt_vertex_type
y	interface/imstb_truetype.h	/^   float x, y;$/;"	m	struct:__anond1ee77bb0f08	typeref:typename:float
y	interface/imstb_truetype.h	/^   float x,y;$/;"	m	struct:__anond1ee77bb1008	typeref:typename:float
y	interface/imstb_truetype.h	/^   int x,y,bottom_y;$/;"	m	struct:__anond1ee77bb1108	typeref:typename:int
y	interface/imstb_truetype.h	/^   stbrp_coord x,y;$/;"	m	struct:stbrp_rect	typeref:typename:stbrp_coord
y0	interface/imstb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge	typeref:typename:float
y0	interface/imstb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anond1ee77bb0308	typeref:typename:float
y0	interface/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anond1ee77bb0208	typeref:typename:unsigned short
y0	interface/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anond1ee77bb0408	typeref:typename:unsigned short
y1	interface/imstb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge	typeref:typename:float
y1	interface/imstb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anond1ee77bb0308	typeref:typename:float
y1	interface/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anond1ee77bb0208	typeref:typename:unsigned short
y1	interface/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anond1ee77bb0408	typeref:typename:unsigned short
ymax	interface/imstb_textedit.h	/^   float ymin,ymax;         \/\/ height of row above and below baseline$/;"	m	struct:__anon0a8ecdc40408	typeref:typename:float
ymin	interface/imstb_textedit.h	/^   float ymin,ymax;         \/\/ height of row above and below baseline$/;"	m	struct:__anon0a8ecdc40408	typeref:typename:float
yoff	interface/imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anond1ee77bb0208	typeref:typename:float
yoff	interface/imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anond1ee77bb0408	typeref:typename:float
yoff2	interface/imstb_truetype.h	/^   float xoff2,yoff2;$/;"	m	struct:__anond1ee77bb0408	typeref:typename:float
z	interface/imgui.h	/^    float                                   x, y, z, w;$/;"	m	struct:ImVec4	typeref:typename:float
~ImDrawData	interface/imgui.h	/^    ~ImDrawData()   { Clear(); }$/;"	f	struct:ImDrawData
~ImDrawList	interface/imgui.h	/^    ~ImDrawList() { _ClearFreeMemory(); }$/;"	f	struct:ImDrawList
~ImDrawListSplitter	interface/imgui.h	/^    inline ~ImDrawListSplitter() { ClearFreeMemory(); }$/;"	f	struct:ImDrawListSplitter
~ImFont	interface/imgui_draw.cpp	/^ImFont::~ImFont()$/;"	f	class:ImFont
~ImFontAtlas	interface/imgui_draw.cpp	/^ImFontAtlas::~ImFontAtlas()$/;"	f	class:ImFontAtlas
~ImGuiListClipper	interface/imgui.cpp	/^ImGuiListClipper::~ImGuiListClipper()$/;"	f	class:ImGuiListClipper
~ImGuiWindow	interface/imgui.cpp	/^ImGuiWindow::~ImGuiWindow()$/;"	f	class:ImGuiWindow
~ImPool	interface/imgui_internal.h	/^    ~ImPool()   { Clear(); }$/;"	f	struct:ImPool
~ImVector	interface/imgui.h	/^    inline ~ImVector()                                      { if (Data) IM_FREE(Data); }$/;"	f	struct:ImVector
